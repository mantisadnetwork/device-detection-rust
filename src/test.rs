/* automatically generated by rust-bindgen 0.58.1 */

pub type std_stringstream = u8;
pub type std_string = [u64; 3usize];

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pair {
    pub _address: u8,
}

pub type std_pair_first_type = u8;
pub type std_pair_second_type = u8;
pub type std_pair__EnableB = u8;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pair__CheckArgs {
    pub _address: u8,
}

pub type std_pair__CheckArgsDep = u8;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pair__CheckTupleLikeConstructor {
    pub _address: u8,
}

pub type std_pair__CheckTLC = u8;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_less {
    pub _address: u8,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator {
    pub _address: u8,
}

pub type std_allocator_size_type = u64;
pub type std_allocator_difference_type = u64;
pub type std_allocator_pointer = u8;
pub type std_allocator_const_pointer = u8;
pub type std_allocator_reference = u8;
pub type std_allocator_const_reference = u8;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_rebind {
    pub _address: u8,
}

pub type std_allocator_rebind_other = u8;
pub type std_allocator_value_type = u8;
pub type std_allocator_propagate_on_container_move_assignment = u8;
pub type std_allocator_is_always_equal = u8;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_shared_ptr {
    pub _address: u8,
}

pub type std_shared_ptr_element_type = u8;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_shared_ptr___nat {
    pub _address: u8,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_shared_ptr___shared_ptr_default_delete {
    pub _address: u8,
}

pub type std_shared_ptr___shared_ptr_default_allocator_type = u8;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_char_traits {
    pub _address: u8,
}

pub type std_char_traits_char_type = u8;
pub type std_char_traits_int_type = u32;
pub type std_char_traits_off_type = u64;
pub type std_char_traits_pos_type = u8;
pub type std_char_traits_state_type = [u64; 16usize];

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string {
    pub _address: u8,
}

pub type std_basic_string___self = u8;
pub type std_basic_string___self_view = u8;
pub type std_basic_string_traits_type = u8;
pub type std_basic_string_value_type = u8;
pub type std_basic_string_allocator_type = u8;
pub type std_basic_string___alloc_traits = u8;
pub type std_basic_string_size_type = u8;
pub type std_basic_string_difference_type = u8;
pub type std_basic_string_reference = u8;
pub type std_basic_string_const_reference = u8;
pub type std_basic_string_pointer = u8;
pub type std_basic_string_const_pointer = u8;
pub type std_basic_string_iterator = u8;
pub type std_basic_string_const_iterator = u8;
pub type std_basic_string_reverse_iterator = u8;
pub type std_basic_string_const_reverse_iterator = u8;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string___long {
    pub _address: u8,
}

pub const std_basic_string___min_cap: i32 = 0;

pub type std_basic_string__bindgen_ty_1 = i32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string___short {
    pub _address: u8,
}

#[repr(C)]
#[repr(align(1))]
#[derive(Copy, Clone)]
pub union std_basic_string___short__bindgen_ty_1 {
    pub _bindgen_opaque_blob: u8,
}

#[repr(C)]
#[repr(align(1))]
#[derive(Copy, Clone)]
pub struct std_basic_string___ulx {
    pub _bindgen_opaque_blob: [u8; 0usize],
}

pub const std_basic_string___n_words: i32 = 0;

pub type std_basic_string__bindgen_ty_2 = i32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string___raw {
    pub _address: u8,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string___rep {
    pub _address: u8,
}

#[repr(C)]
#[repr(align(1))]
#[derive(Copy, Clone)]
pub struct std_basic_string___rep__bindgen_ty_1 {
    pub _bindgen_opaque_blob: [u8; 0usize],
}

pub const std_basic_string___alignment: i32 = 0;

pub type std_basic_string__bindgen_ty_3 = i32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tree_node {
    pub _address: u8,
}

pub type std___tree_node___node_value_type = u8;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tree_iterator {
    pub _address: u8,
}

pub type std___tree_iterator__NodeTypes = u8;
pub type std___tree_iterator___node_pointer = u8;
pub type std___tree_iterator___node_base_pointer = u8;
pub type std___tree_iterator___end_node_pointer = u8;
pub type std___tree_iterator___iter_pointer = u8;
pub type std___tree_iterator___pointer_traits = u8;
pub type std___tree_iterator_iterator_category = u8;
pub type std___tree_iterator_value_type = u8;
pub type std___tree_iterator_difference_type = u8;
pub type std___tree_iterator_reference = u8;
pub type std___tree_iterator_pointer = u8;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___value_type {
    pub _address: u8,
}

pub type std___value_type_key_type = u8;
pub type std___value_type_mapped_type = u8;
pub type std___value_type_value_type = u8;
pub type std___value_type___nc_ref_pair_type = u8;
pub type std___value_type___nc_rref_pair_type = u8;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___map_iterator {
    pub _address: u8,
}

pub type std___map_iterator__NodeTypes = u8;
pub type std___map_iterator___pointer_traits = u8;
pub type std___map_iterator_iterator_category = u8;
pub type std___map_iterator_value_type = u8;
pub type std___map_iterator_difference_type = u8;
pub type std___map_iterator_reference = u8;
pub type std___map_iterator_pointer = u8;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_map {
    pub _address: u8,
}

pub type std_map_key_type = u8;
pub type std_map_mapped_type = u8;
pub type std_map_value_type = u8;
pub type std_map_key_compare = u8;
pub type std_map_allocator_type = u8;
pub type std_map_reference = u8;
pub type std_map_const_reference = u8;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_map_value_compare {
    pub _address: u8,
}

pub type std_map___value_type = u8;
pub type std_map___vc = u8;
pub type std_map___allocator_type = u8;
pub type std_map___base = u8;
pub type std_map___node_traits = u8;
pub type std_map___alloc_traits = u8;
pub type std_map_pointer = u8;
pub type std_map_const_pointer = u8;
pub type std_map_size_type = u8;
pub type std_map_difference_type = u8;
pub type std_map_iterator = u8;
pub type std_map_const_iterator = u8;
pub type std_map_reverse_iterator = u8;
pub type std_map_const_reverse_iterator = u8;
pub type std_map___node = u8;
pub type std_map___node_allocator = u8;
pub type std_map___node_pointer = u8;
pub type std_map___node_base_pointer = u8;
pub type std_map___parent_pointer = u8;
pub type std_map__Dp = u8;
pub type std_map___node_holder = u8;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_vector {
    pub _address: u8,
}

pub type std_vector___base = u8;
pub type std_vector___default_allocator_type = u8;
pub type std_vector___self = u8;
pub type std_vector_value_type = u8;
pub type std_vector_allocator_type = u8;
pub type std_vector___alloc_traits = u8;
pub type std_vector_reference = u8;
pub type std_vector_const_reference = u8;
pub type std_vector_size_type = u8;
pub type std_vector_difference_type = u8;
pub type std_vector_pointer = u8;
pub type std_vector_const_pointer = u8;
pub type std_vector_iterator = u8;
pub type std_vector_const_iterator = u8;
pub type std_vector_reverse_iterator = u8;
pub type std_vector_const_reverse_iterator = u8;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_vector__ConstructTransaction {
    pub _address: u8,
}

pub type size_t = ::std::os::raw::c_ulong;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_interlock_dw_type_t {
    pub low: i64,
    pub high: i64,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_interlock_dw_type_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_interlock_dw_type_t>(), 16usize, concat!("Size of: ", stringify!(fiftyone_degrees_interlock_dw_type_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_interlock_dw_type_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_interlock_dw_type_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_interlock_dw_type_t>())).low as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_interlock_dw_type_t), "::", stringify!(low)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_interlock_dw_type_t>())).high as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_interlock_dw_type_t), "::", stringify!(high)));
}

pub type fiftyoneDegreesInterlockDoubleWidth = fiftyone_degrees_interlock_dw_type_t;
#[doc = " @cond FORWARD_DECLARATIONS"]
pub type fiftyoneDegreesResourceManager = fiftyone_degrees_resource_manager_t;
#[doc = " Handle for a shared resource. The first data structure counter tracks use"]
#[doc = " of the resource and free resources that are not longer active."]
#[doc = " Counter must be the first member to ensure correct memory aligned for"]
#[doc = " interlocked operations."]
pub type fiftyoneDegreesResourceHandle = fiftyone_degrees_resource_handle_t;

#[doc = " Handle for a shared resource. The first data structure counter tracks use"]
#[doc = " of the resource and free resources that are not longer active."]
#[doc = " Counter must be the first member to ensure correct memory aligned for"]
#[doc = " interlocked operations."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_resource_handle_t {
    #[doc = "< Counter for this"]
    #[doc = "handle."] pub counter: fiftyoneDegreesInterlockDoubleWidth,
    #[doc = "< Pointer to the resource being managed."] pub resource: *const ::std::os::raw::c_void,
    #[doc = "< Pointer to the manager"]
    #[doc = "the handle relates to."] pub manager: *const fiftyoneDegreesResourceManager,
    #[doc = "< Pointer to the method used to free the"]
    #[doc = "resource."] pub freeResource: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_resource_handle_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_resource_handle_t>(), 40usize, concat!("Size of: ", stringify!(fiftyone_degrees_resource_handle_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_resource_handle_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_resource_handle_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_resource_handle_t>())).counter as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_resource_handle_t), "::", stringify!(counter)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_resource_handle_t>())).resource as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_resource_handle_t), "::", stringify!(resource)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_resource_handle_t>())).manager as *const _ as usize }, 24usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_resource_handle_t), "::", stringify!(manager)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_resource_handle_t>())).freeResource as *const _ as usize }, 32usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_resource_handle_t), "::", stringify!(freeResource)));
}

#[doc = " Manager structure used to provide access to a shared and changing resource."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_resource_manager_t {
    #[doc = "< Current handle"]
    #[doc = "for resource used"]
    #[doc = "by the manager."] pub active: *mut fiftyoneDegreesResourceHandle,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_resource_manager_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_resource_manager_t>(), 8usize, concat!("Size of: ", stringify!(fiftyone_degrees_resource_manager_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_resource_manager_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_resource_manager_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_resource_manager_t>())).active as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_resource_manager_t), "::", stringify!(active)));
}

#[doc = "< All okay"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_SUCCESS: e_fiftyone_degrees_status_code = 0;
#[doc = "< Lack of memory"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_INSUFFICIENT_MEMORY: e_fiftyone_degrees_status_code = 1;
#[doc = "< Data structure not readable"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_CORRUPT_DATA: e_fiftyone_degrees_status_code = 2;
#[doc = "< Data not the required"]
#[doc = "version"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_INCORRECT_VERSION: e_fiftyone_degrees_status_code = 3;
#[doc = "< The data file couldn't be"]
#[doc = "found"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_FILE_NOT_FOUND: e_fiftyone_degrees_status_code = 4;
#[doc = "< The data file was busy"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_FILE_BUSY: e_fiftyone_degrees_status_code = 5;
#[doc = "< Unknown file error"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_FILE_FAILURE: e_fiftyone_degrees_status_code = 6;
#[doc = "< Should never be returned to the"]
#[doc = "caller"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_NOT_SET: e_fiftyone_degrees_status_code = 7;
#[doc = "< Working pointer"]
#[doc = "exceeded the amount of"]
#[doc = "memory containing the data"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_POINTER_OUT_OF_BOUNDS: e_fiftyone_degrees_status_code = 8;
#[doc = "< A key pointer was not set"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_NULL_POINTER: e_fiftyone_degrees_status_code = 9;
#[doc = "< Too many files are open"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_TOO_MANY_OPEN_FILES: e_fiftyone_degrees_status_code = 10;
#[doc = "< None of the required"]
#[doc = "properties could be found"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_REQ_PROP_NOT_PRESENT: e_fiftyone_degrees_status_code = 11;
#[doc = "< The profile id represents an"]
#[doc = "empty profile"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_PROFILE_EMPTY: e_fiftyone_degrees_status_code = 12;
#[doc = "< There was an error getting"]
#[doc = "an item from a collection"]
#[doc = "due to too many concurrent"]
#[doc = "operations"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_COLLECTION_FAILURE: e_fiftyone_degrees_status_code = 13;
#[doc = "< The data file could not be"]
#[doc = "copied"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_FILE_COPY_ERROR: e_fiftyone_degrees_status_code = 14;
#[doc = "< The file or directory"]
#[doc = "already exists, so could not be"]
#[doc = "created"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_FILE_EXISTS_ERROR: e_fiftyone_degrees_status_code = 15;
#[doc = "< The data file could not be"]
#[doc = "created"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_FILE_WRITE_ERROR: e_fiftyone_degrees_status_code = 16;
#[doc = "< File permission denied"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_FILE_PERMISSION_DENIED: e_fiftyone_degrees_status_code = 17;
#[doc = "< The file path is longer"]
#[doc = "than the available memory"]
#[doc = "available to store it"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_FILE_PATH_TOO_LONG: e_fiftyone_degrees_status_code = 18;
#[doc = "< There was an error encoding"]
#[doc = "characters of a string"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_ENCODING_ERROR: e_fiftyone_degrees_status_code = 19;
#[doc = "< The configuration"]
#[doc = "provided to create a"]
#[doc = "collection could not be"]
#[doc = "used to create a valid"]
#[doc = "collection"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_INVALID_COLLECTION_CONFIG: e_fiftyone_degrees_status_code = 20;
#[doc = "< An invalid config was provided"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_INVALID_CONFIG: e_fiftyone_degrees_status_code = 21;
#[doc = "< There were not enough"]
#[doc = "handles available to"]
#[doc = "retrieve data from the"]
#[doc = "source"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_INSUFFICIENT_HANDLES: e_fiftyone_degrees_status_code = 22;
#[doc = "< Index out of"]
#[doc = "range"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_COLLECTION_INDEX_OUT_OF_RANGE: e_fiftyone_degrees_status_code = 23;
#[doc = "< Offset out of"]
#[doc = "range"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_COLLECTION_OFFSET_OUT_OF_RANGE: e_fiftyone_degrees_status_code = 24;
#[doc = "< Seek failure"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_COLLECTION_FILE_SEEK_FAIL: e_fiftyone_degrees_status_code = 25;
#[doc = "< Read failure"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_COLLECTION_FILE_READ_FAIL: e_fiftyone_degrees_status_code = 26;
#[doc = "< IP address"]
#[doc = "format is incorrect"]
pub const e_fiftyone_degrees_status_code_FIFTYONE_DEGREES_STATUS_INCORRECT_IP_ADDRESS_FORMAT: e_fiftyone_degrees_status_code = 27;

#[doc = " Status returned from the initialisation of a resource."]
pub type e_fiftyone_degrees_status_code = ::std::os::raw::c_uint;

#[doc = " Status returned from the initialisation of a resource."]
pub use self::e_fiftyone_degrees_status_code as fiftyoneDegreesStatusCode;

#[doc = " Structure used to represent a 51Degrees exception and passed into methods"]
#[doc = " that might generate exceptions. The #FIFTYONE_DEGREES_EXCEPTION_SET macro"]
#[doc = " should be used to set the status code."]
#[doc = " @param exception pointer to an exception data structure to be used if an"]
#[doc = " exception occurs. See exceptions.h."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_exception_t {
    #[doc = "< File generating the exception"] pub file: *const ::std::os::raw::c_char,
    #[doc = "< Function generating the exception"] pub func: *const ::std::os::raw::c_char,
    #[doc = "< Line number generating the exception"] pub line: ::std::os::raw::c_int,
    #[doc = "< Status code to assign"] pub status: fiftyoneDegreesStatusCode,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_exception_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_exception_t>(), 24usize, concat!("Size of: ", stringify!(fiftyone_degrees_exception_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_exception_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_exception_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_exception_t>())).file as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_exception_t), "::", stringify!(file)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_exception_t>())).func as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_exception_t), "::", stringify!(func)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_exception_t>())).line as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_exception_t), "::", stringify!(line)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_exception_t>())).status as *const _ as usize }, 20usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_exception_t), "::", stringify!(status)));
}

#[doc = " Structure used to represent a 51Degrees exception and passed into methods"]
#[doc = " that might generate exceptions. The #FIFTYONE_DEGREES_EXCEPTION_SET macro"]
#[doc = " should be used to set the status code."]
#[doc = " @param exception pointer to an exception data structure to be used if an"]
#[doc = " exception occurs. See exceptions.h."]
pub type fiftyoneDegreesException = fiftyone_degrees_exception_t;
#[doc = " Alias for unsigned char"]
pub type byte = ::std::os::raw::c_uchar;

#[doc = " Data structure used for reusing memory which may have been allocated in a"]
#[doc = " previous operation."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_data_t {
    #[doc = "< Pointer to immutable data"] pub ptr: *mut byte,
    #[doc = "< Number of bytes allocated at the pointer. Used"]
    #[doc = "within the collection and is not intended for"]
    #[doc = "consumers to reference."] pub allocated: u32,
    #[doc = "< Number of valid bytes currently referenced by pointer"] pub used: u32,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_data_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_data_t>(), 16usize, concat!("Size of: ", stringify!(fiftyone_degrees_data_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_data_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_data_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_data_t>())).ptr as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_data_t), "::", stringify!(ptr)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_data_t>())).allocated as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_data_t), "::", stringify!(allocated)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_data_t>())).used as *const _ as usize }, 12usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_data_t), "::", stringify!(used)));
}

#[doc = " Data structure used for reusing memory which may have been allocated in a"]
#[doc = " previous operation."]
pub type fiftyoneDegreesData = fiftyone_degrees_data_t;

#[repr(C)]
pub struct FiftyoneDegrees_Common_EvidenceBase__bindgen_vtable(::std::os::raw::c_void);

#[doc = " Base evidence class containing evidence to be processed by an engine."]
#[doc = " This wraps a dynamically generated C evidence structure."]
#[doc = ""]
#[doc = " The class extends the map<string, string> template to add a method"]
#[doc = " of constructing a C evidence structure from the key value pairs."]
#[doc = ""]
#[doc = " ## Usage Example"]
#[doc = ""]
#[doc = " ```"]
#[doc = " using namespace FiftyoneDegrees::Common;"]
#[doc = " EngineBase *engine;"]
#[doc = ""]
#[doc = " // Construct a new evidence instance"]
#[doc = " EvidenceBase *evidence = new EvidenceBase();"]
#[doc = ""]
#[doc = " // Add an item of evidence"]
#[doc = " evidence->operator[](\"evidence key\") = \"evidence value\";"]
#[doc = ""]
#[doc = " // Give the evidence to an engine for processing"]
#[doc = " ResultsBase *results = engine->processBase(evidence);"]
#[doc = ""]
#[doc = " // Do something with the results (and delete them once finished)"]
#[doc = " // ..."]
#[doc = ""]
#[doc = " // Delete the evidence"]
#[doc = " delete evidence;"]
#[doc = " ```"]
#[repr(C)]
#[derive(Debug)]
pub struct FiftyoneDegrees_Common_EvidenceBase {
    pub vtable_: *const FiftyoneDegrees_Common_EvidenceBase__bindgen_vtable,
    pub _base: [u64; 3usize],
    #[doc = " The underlying evidence structure."] pub evidence: *mut fiftyoneDegreesEvidenceKeyValuePairArray,
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_Common_EvidenceBase() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_EvidenceBase>(), 40usize, concat!("Size of: ", stringify!(FiftyoneDegrees_Common_EvidenceBase)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_EvidenceBase>(), 8usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_Common_EvidenceBase)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_EvidenceBase>())).evidence as *const _ as usize }, 32usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_EvidenceBase), "::", stringify!(evidence)));
}

extern "C" {
    #[doc = " Get the underlying C structure containing the evidence. This"]
    #[doc = " only includes evidence which is relevant to the engine. Any"]
    #[doc = " evidence which is irrelevant will not be included in the result."]
    #[doc = " @return pointer to a populated C evidence structure"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common12EvidenceBase3getEv"]
    pub fn FiftyoneDegrees_Common_EvidenceBase_get(this: *mut FiftyoneDegrees_Common_EvidenceBase) -> *mut fiftyoneDegreesEvidenceKeyValuePairArray;
}

extern "C" {
    #[doc = " Clear all evidence items from the instance."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common12EvidenceBase5clearEv"]
    pub fn FiftyoneDegrees_Common_EvidenceBase_clear(this: *mut FiftyoneDegrees_Common_EvidenceBase);
}

extern "C" {
    #[doc = " Remove the evidence item at the position indicated."]
    #[doc = " @param position of the item to remove"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common12EvidenceBase5eraseENSt3__114__map_iteratorINS2_15__tree_iteratorINS2_12__value_typeINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEPNS2_11__tree_nodeISC_PvEElEEEE"]
    pub fn FiftyoneDegrees_Common_EvidenceBase_erase(this: *mut FiftyoneDegrees_Common_EvidenceBase, position: iterator);
}

extern "C" {
    #[doc = " Remove the evidence items between the two position indicated."]
    #[doc = " @param first item to remove"]
    #[doc = " @param last item to remove"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common12EvidenceBase5eraseENSt3__114__map_iteratorINS2_15__tree_iteratorINS2_12__value_typeINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEPNS2_11__tree_nodeISC_PvEElEEEESI_"]
    pub fn FiftyoneDegrees_Common_EvidenceBase_erase1(this: *mut FiftyoneDegrees_Common_EvidenceBase, first: iterator, last: iterator);
}

extern "C" {
    #[doc = " Construct a new instance containing no evidence."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common12EvidenceBaseC1Ev"]
    pub fn FiftyoneDegrees_Common_EvidenceBase_EvidenceBase(this: *mut FiftyoneDegrees_Common_EvidenceBase);
}

impl FiftyoneDegrees_Common_EvidenceBase {
    #[inline]
    pub unsafe fn get(&mut self) -> *mut fiftyoneDegreesEvidenceKeyValuePairArray { FiftyoneDegrees_Common_EvidenceBase_get(self) }
    #[inline]
    pub unsafe fn clear(&mut self) { FiftyoneDegrees_Common_EvidenceBase_clear(self) }
    #[inline]
    pub unsafe fn erase(&mut self, position: iterator) { FiftyoneDegrees_Common_EvidenceBase_erase(self, position) }
    #[inline]
    pub unsafe fn erase1(&mut self, first: iterator, last: iterator) { FiftyoneDegrees_Common_EvidenceBase_erase1(self, first, last) }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_EvidenceBase_EvidenceBase(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}

extern "C" {
    #[doc = " Free all the underlying memory containing the evidence."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common12EvidenceBaseD1Ev"]
    pub fn FiftyoneDegrees_Common_EvidenceBase_EvidenceBase_destructor(this: *mut FiftyoneDegrees_Common_EvidenceBase);
}

extern "C" {
    #[doc = " Get whether or not the evidence key prefix is relevant or not."]
    #[doc = " If the prefix is not relevant or not known then it is of no use"]
    #[doc = " to the engine processing it."]
    #[doc = " @param prefix extracted from the evidence key"]
    #[doc = " @return true if the key prefix relevant and should be used"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common12EvidenceBase10isRelevantE34e_fiftyone_degrees_evidence_prefix"]
    pub fn FiftyoneDegrees_Common_EvidenceBase_isRelevant(this: *mut ::std::os::raw::c_void, prefix: fiftyoneDegreesEvidencePrefix) -> bool;
}

#[repr(C)]
pub struct FiftyoneDegrees_Common_RequiredPropertiesConfig__bindgen_vtable(::std::os::raw::c_void);

#[doc = " C++ class wrapper for the #fiftyoneDegreesPropertiesRequired"]
#[doc = " structure. It defines a set of properties which are required by a"]
#[doc = " caller, usually to a data set constructor."]
#[doc = ""]
#[doc = " An instance is immutable once instantiated."]
#[doc = ""]
#[doc = " ## Usage Example"]
#[doc = ""]
#[doc = " ```"]
#[doc = " using namespace FiftyoneDegrees::Common;"]
#[doc = " ConfigBase *config;"]
#[doc = ""]
#[doc = " // Construct a required properties configuration with a list of"]
#[doc = " // required properties"]
#[doc = " RequiredPropertiesConfig *properties ="]
#[doc = "     new RequiredPropertiesConfig(\"a property, another property\");"]
#[doc = ""]
#[doc = " // Use the required properties configuration when constructing an"]
#[doc = " // engine"]
#[doc = " EngineBase *engine = new EngineBase(config, properties);"]
#[doc = " ```"]
#[repr(C)]
#[derive(Debug)]
pub struct FiftyoneDegrees_Common_RequiredPropertiesConfig {
    pub vtable_: *const FiftyoneDegrees_Common_RequiredPropertiesConfig__bindgen_vtable,
    #[doc = " The underlying C configuration structure."] pub conf: fiftyoneDegreesPropertiesRequired,
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_Common_RequiredPropertiesConfig() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_RequiredPropertiesConfig>(), 40usize, concat!("Size of: ", stringify!(FiftyoneDegrees_Common_RequiredPropertiesConfig)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_RequiredPropertiesConfig>(), 8usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_Common_RequiredPropertiesConfig)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_RequiredPropertiesConfig>())).conf as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_RequiredPropertiesConfig), "::", stringify!(conf)));
}

extern "C" {
    #[doc = " Get the list of properties which are required."]
    #[doc = " @return vector containing the property names"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common24RequiredPropertiesConfig13getPropertiesEv"]
    pub fn FiftyoneDegrees_Common_RequiredPropertiesConfig_getProperties(this: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig) -> [u64; 3usize];
}

extern "C" {
    #[doc = " Get a pointer to the underlying C required properties structure."]
    #[doc = " This is a pointer memory internal to this class, so should not"]
    #[doc = " be freed."]
    #[doc = " @return required properties config"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common24RequiredPropertiesConfig9getConfigEv"]
    pub fn FiftyoneDegrees_Common_RequiredPropertiesConfig_getConfig(this: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig) -> *mut fiftyoneDegreesPropertiesRequired;
}

extern "C" {
    #[doc = " Get the number of properties contained within the required"]
    #[doc = " properties configuration."]
    #[doc = " @return number of properties"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common24RequiredPropertiesConfig8getCountEv"]
    pub fn FiftyoneDegrees_Common_RequiredPropertiesConfig_getCount(this: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Get whether or not the property name supplied is contained in"]
    #[doc = " the required properties configuration."]
    #[doc = " @param property name of the property to find"]
    #[doc = " @return true if the property name is present"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common24RequiredPropertiesConfig16containsPropertyEPKc"]
    pub fn FiftyoneDegrees_Common_RequiredPropertiesConfig_containsProperty(this: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig, property: *const ::std::os::raw::c_char) -> bool;
}

extern "C" {
    #[doc = " Get whether or not the property name supplied is contained in"]
    #[doc = " the required properties configuration."]
    #[doc = " @param property name of the property to find"]
    #[doc = " @return true if the property name is present"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common24RequiredPropertiesConfig16containsPropertyENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn FiftyoneDegrees_Common_RequiredPropertiesConfig_containsProperty1(this: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig, property: std_string) -> bool;
}

extern "C" {
    #[doc = " Constructs a new instance of the RequiredPropertiesConfig so"]
    #[doc = " that all possible properties contained in the data are available"]
    #[doc = " for inspection."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common24RequiredPropertiesConfigC1Ev"]
    pub fn FiftyoneDegrees_Common_RequiredPropertiesConfig_RequiredPropertiesConfig(this: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig);
}

extern "C" {
    #[doc = " Construct a new instance of required RequiredPropertiesConfig"]
    #[doc = " using the list of property names supplied. Once created,"]
    #[doc = " properties cannot be added."]
    #[doc = " @param properties to enable"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common24RequiredPropertiesConfigC1EPKNSt3__16vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEE"]
    pub fn FiftyoneDegrees_Common_RequiredPropertiesConfig_RequiredPropertiesConfig1(this: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig, properties: *const [u64; 3usize]);
}

extern "C" {
    #[doc = " Construct a new instance of required RequiredPropertiesConfig"]
    #[doc = " using the list of property names supplied. Once created,"]
    #[doc = " properties cannot be added."]
    #[doc = " @param properties to enable"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common24RequiredPropertiesConfigC1EPNSt3__16vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEE"]
    pub fn FiftyoneDegrees_Common_RequiredPropertiesConfig_RequiredPropertiesConfig2(this: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig, properties: *mut [u64; 3usize]);
}

extern "C" {
    #[doc = " Construct a new instance of required RequiredPropertiesConfig"]
    #[doc = " using the list of property names supplied. Once created,"]
    #[doc = " properties cannot be added."]
    #[doc = " @param properties to enable"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common24RequiredPropertiesConfigC1EPKc"]
    pub fn FiftyoneDegrees_Common_RequiredPropertiesConfig_RequiredPropertiesConfig3(this: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig, properties: *const ::std::os::raw::c_char);
}

extern "C" {
    #[doc = " Construct a new instance of required RequiredPropertiesConfig"]
    #[doc = " using the list of property names supplied. Once created,"]
    #[doc = " properties cannot be added."]
    #[doc = " @param properties to enable"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common24RequiredPropertiesConfigC1ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn FiftyoneDegrees_Common_RequiredPropertiesConfig_RequiredPropertiesConfig4(this: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig, properties: *const std_string);
}

extern "C" {
    #[doc = " Construct a new instance of required RequiredPropertiesConfig"]
    #[doc = " using the list of property names supplied. Once created,"]
    #[doc = " properties cannot be added."]
    #[doc = " @param properties to enable"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common24RequiredPropertiesConfigC1EPKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn FiftyoneDegrees_Common_RequiredPropertiesConfig_RequiredPropertiesConfig5(this: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig, properties: *const std_string);
}

impl FiftyoneDegrees_Common_RequiredPropertiesConfig {
    #[inline]
    pub unsafe fn getProperties(&mut self) -> [u64; 3usize] { FiftyoneDegrees_Common_RequiredPropertiesConfig_getProperties(self) }
    #[inline]
    pub unsafe fn getConfig(&mut self) -> *mut fiftyoneDegreesPropertiesRequired { FiftyoneDegrees_Common_RequiredPropertiesConfig_getConfig(self) }
    #[inline]
    pub unsafe fn getCount(&mut self) -> ::std::os::raw::c_int { FiftyoneDegrees_Common_RequiredPropertiesConfig_getCount(self) }
    #[inline]
    pub unsafe fn containsProperty(&mut self, property: *const ::std::os::raw::c_char) -> bool { FiftyoneDegrees_Common_RequiredPropertiesConfig_containsProperty(self, property) }
    #[inline]
    pub unsafe fn containsProperty1(&mut self, property: std_string) -> bool { FiftyoneDegrees_Common_RequiredPropertiesConfig_containsProperty1(self, property) }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_RequiredPropertiesConfig_RequiredPropertiesConfig(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(properties: *const [u64; 3usize]) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_RequiredPropertiesConfig_RequiredPropertiesConfig1(__bindgen_tmp.as_mut_ptr(), properties);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(properties: *mut [u64; 3usize]) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_RequiredPropertiesConfig_RequiredPropertiesConfig2(__bindgen_tmp.as_mut_ptr(), properties);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(properties: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_RequiredPropertiesConfig_RequiredPropertiesConfig3(__bindgen_tmp.as_mut_ptr(), properties);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(properties: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_RequiredPropertiesConfig_RequiredPropertiesConfig4(__bindgen_tmp.as_mut_ptr(), properties);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new5(properties: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_RequiredPropertiesConfig_RequiredPropertiesConfig5(__bindgen_tmp.as_mut_ptr(), properties);
        __bindgen_tmp.assume_init()
    }
}

extern "C" {
    #[doc = " Destroy the configuration, freeing all the memory allocated"]
    #[doc = " within it."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common24RequiredPropertiesConfigD1Ev"]
    pub fn FiftyoneDegrees_Common_RequiredPropertiesConfig_RequiredPropertiesConfig_destructor(this: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig);
}

#[doc = " The Date class wraps the C #fiftyoneDegreesDate structure and is"]
#[doc = " used to represent dates in engines. This is a memory efficient way"]
#[doc = " to store a date."]
#[doc = ""]
#[doc = " ## Usage Example"]
#[doc = ""]
#[doc = " ```"]
#[doc = " FiftyoneDegrees::Common::Date *date;"]
#[doc = " std::stringstream stream;"]
#[doc = ""]
#[doc = " // Format a string representation of a date in the format DD/MM/YYY"]
#[doc = " stream << date->getDay() << \"/\""]
#[doc = "     << date->getMonth() << \"/\""]
#[doc = "     << date->getYear();"]
#[doc = " string dateString = stream.str();"]
#[doc = " ```"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FiftyoneDegrees_Common_Date {
    #[doc = " The underlying date structure."] pub date: fiftyoneDegreesDate,
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_Common_Date() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_Date>(), 4usize, concat!("Size of: ", stringify!(FiftyoneDegrees_Common_Date)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_Date>(), 1usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_Common_Date)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_Date>())).date as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_Date), "::", stringify!(date)));
}

extern "C" {
    #[doc = " Get the year"]
    #[doc = " @return year"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common4Date7getYearEv"]
    pub fn FiftyoneDegrees_Common_Date_getYear(this: *mut FiftyoneDegrees_Common_Date) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Get the month"]
    #[doc = " @return month"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common4Date8getMonthEv"]
    pub fn FiftyoneDegrees_Common_Date_getMonth(this: *mut FiftyoneDegrees_Common_Date) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Get the day of the month"]
    #[doc = " @return day of the month"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common4Date6getDayEv"]
    pub fn FiftyoneDegrees_Common_Date_getDay(this: *mut FiftyoneDegrees_Common_Date) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Construct a \"null\" date with year, month and day all set to zero."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common4DateC1Ev"]
    pub fn FiftyoneDegrees_Common_Date_Date(this: *mut FiftyoneDegrees_Common_Date);
}

extern "C" {
    #[doc = " Construct a date from a C date structure. This copies the date"]
    #[doc = " date structure so the argument can be freed after construction."]
    #[doc = " @param date pointer to copy to the underlying date structure"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common4DateC1EPK23fiftyone_degrees_date_t"]
    pub fn FiftyoneDegrees_Common_Date_Date1(this: *mut FiftyoneDegrees_Common_Date, date: *const fiftyoneDegreesDate);
}

impl FiftyoneDegrees_Common_Date {
    #[inline]
    pub unsafe fn getYear(&mut self) -> ::std::os::raw::c_int { FiftyoneDegrees_Common_Date_getYear(self) }
    #[inline]
    pub unsafe fn getMonth(&mut self) -> ::std::os::raw::c_int { FiftyoneDegrees_Common_Date_getMonth(self) }
    #[inline]
    pub unsafe fn getDay(&mut self) -> ::std::os::raw::c_int { FiftyoneDegrees_Common_Date_getDay(self) }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_Date_Date(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(date: *const fiftyoneDegreesDate) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_Date_Date1(__bindgen_tmp.as_mut_ptr(), date);
        __bindgen_tmp.assume_init()
    }
}

#[repr(C)]
pub struct FiftyoneDegrees_Common_ConfigBase__bindgen_vtable(::std::os::raw::c_void);

#[doc = " C++ class wrapper for the #fiftyoneDegreesConfigBase configuration"]
#[doc = " structure. See config.h."]
#[doc = ""]
#[doc = " Configuration options are set using setter methods and fetched using"]
#[doc = " corresponding getter methods. The names are self explanatory."]
#[doc = ""]
#[doc = " ## Usage Example"]
#[doc = ""]
#[doc = " ```"]
#[doc = " using namespace FiftyoneDegrees::Common;"]
#[doc = " RequiredPropertiesConfig *properties;"]
#[doc = ""]
#[doc = " // Construct a new configuration"]
#[doc = " ConfigBase *config = new ConfigBase();"]
#[doc = ""]
#[doc = " // Configure the engine to create a temporary data file, or reuse"]
#[doc = " // an existing temporary file if one exists"]
#[doc = " config->setUseTempFile(true);"]
#[doc = " config->setReuseTempFile(true);"]
#[doc = ""]
#[doc = " // Use the configuration when constructing an engine"]
#[doc = " EngineBase *engine = new EngineBase(config, properties);"]
#[doc = " ```"]
#[repr(C)]
#[derive(Debug)]
pub struct FiftyoneDegrees_Common_ConfigBase {
    pub vtable_: *const FiftyoneDegrees_Common_ConfigBase__bindgen_vtable,
    #[doc = " Pointer to the underlying C configuration structure."] pub config: *mut fiftyoneDegreesConfigBase,
    #[doc = " Paths to directories which should be used when attempting to"]
    #[doc = "create temp files."] pub tempDirs: [u64; 3usize],
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_Common_ConfigBase() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_ConfigBase>(), 40usize, concat!("Size of: ", stringify!(FiftyoneDegrees_Common_ConfigBase)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_ConfigBase>(), 8usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_Common_ConfigBase)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_ConfigBase>())).config as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_ConfigBase), "::", stringify!(config)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_ConfigBase>())).tempDirs as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_ConfigBase), "::", stringify!(tempDirs)));
}

extern "C" {
    #[doc = " Set whether or not the HTTP header field might be prefixed with"]
    #[doc = " 'HTTP_'."]
    #[doc = " @param use whether or not prefixed upper headers should be used"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10ConfigBase24setUseUpperPrefixHeadersEb"]
    pub fn FiftyoneDegrees_Common_ConfigBase_setUseUpperPrefixHeaders(this: *mut FiftyoneDegrees_Common_ConfigBase, use_: bool);
}

extern "C" {
    #[doc = " Set whether or not a temporary file should be created from the"]
    #[doc = " original data file and used to initialise the data set."]
    #[doc = " @param use should create a temp file"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10ConfigBase14setUseTempFileEb"]
    pub fn FiftyoneDegrees_Common_ConfigBase_setUseTempFile(this: *mut FiftyoneDegrees_Common_ConfigBase, use_: bool);
}

extern "C" {
    #[doc = " Set whether or not a temporary file that already exists for a"]
    #[doc = " master file should be reused by another process."]
    #[doc = " @param reuse should create a temp files be reused"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10ConfigBase16setReuseTempFileEb"]
    pub fn FiftyoneDegrees_Common_ConfigBase_setReuseTempFile(this: *mut FiftyoneDegrees_Common_ConfigBase, reuse: bool);
}

extern "C" {
    #[doc = " Sets a collection of temporary directories to use if temporary"]
    #[doc = " file operation is required in the order in which the directories"]
    #[doc = " should be used. If no temporary directories are provided and"]
    #[doc = " temporary files should be used the temporary files will be"]
    #[doc = " placed in the same directory as the master file."]
    #[doc = " @param tempDirs collection of temporary directories."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10ConfigBase18setTempDirectoriesENSt3__16vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEE"]
    pub fn FiftyoneDegrees_Common_ConfigBase_setTempDirectories(this: *mut FiftyoneDegrees_Common_ConfigBase, tempDirs: [u64; 3usize]);
}

extern "C" {
    #[doc = " Get whether or not an HTTP_ upper case prefixes should be"]
    #[doc = " considered when evaluating HTTP headers."]
    #[doc = " @return true if upper case HTTP_ prefixed header keys should be"]
    #[doc = " considered."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10ConfigBase24getUseUpperPrefixHeadersEv"]
    pub fn FiftyoneDegrees_Common_ConfigBase_getUseUpperPrefixHeaders(this: *mut FiftyoneDegrees_Common_ConfigBase) -> bool;
}

extern "C" {
    #[doc = " Get whether or not a temporary file should be created from the"]
    #[doc = " original data file and used to initialise the data set."]
    #[doc = " @return true if temporary files should be used, otherwise false."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10ConfigBase14getUseTempFileEv"]
    pub fn FiftyoneDegrees_Common_ConfigBase_getUseTempFile(this: *mut FiftyoneDegrees_Common_ConfigBase) -> bool;
}

extern "C" {
    #[doc = " Get whether temporary files can be reused across multiple"]
    #[doc = " processes."]
    #[doc = " @return true if temporary files can be reused, otherwise false."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10ConfigBase16getReuseTempFileEv"]
    pub fn FiftyoneDegrees_Common_ConfigBase_getReuseTempFile(this: *mut FiftyoneDegrees_Common_ConfigBase) -> bool;
}

extern "C" {
    #[doc = " Gets a vector of temporary directory strings which should be"]
    #[doc = " used to store temporary files."]
    #[doc = " @return a vector of temporary directories, or NULL if no"]
    #[doc = " temporary directories are to be used."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10ConfigBase18getTempDirectoriesEv"]
    pub fn FiftyoneDegrees_Common_ConfigBase_getTempDirectories(this: *mut FiftyoneDegrees_Common_ConfigBase) -> [u64; 3usize];
}

extern "C" {
    #[doc = " Constructs a new instance of the configuration with a reference"]
    #[doc = " to the C configuration provided."]
    #[doc = " @param config pointer to the underlying configuration structure"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10ConfigBaseC1EP30fiftyone_degrees_config_base_t"]
    pub fn FiftyoneDegrees_Common_ConfigBase_ConfigBase(this: *mut FiftyoneDegrees_Common_ConfigBase, config: *mut fiftyoneDegreesConfigBase);
}

impl FiftyoneDegrees_Common_ConfigBase {
    #[inline]
    pub unsafe fn setUseUpperPrefixHeaders(&mut self, use_: bool) { FiftyoneDegrees_Common_ConfigBase_setUseUpperPrefixHeaders(self, use_) }
    #[inline]
    pub unsafe fn setUseTempFile(&mut self, use_: bool) { FiftyoneDegrees_Common_ConfigBase_setUseTempFile(self, use_) }
    #[inline]
    pub unsafe fn setReuseTempFile(&mut self, reuse: bool) { FiftyoneDegrees_Common_ConfigBase_setReuseTempFile(self, reuse) }
    #[inline]
    pub unsafe fn setTempDirectories(&mut self, tempDirs: [u64; 3usize]) { FiftyoneDegrees_Common_ConfigBase_setTempDirectories(self, tempDirs) }
    #[inline]
    pub unsafe fn getUseUpperPrefixHeaders(&mut self) -> bool { FiftyoneDegrees_Common_ConfigBase_getUseUpperPrefixHeaders(self) }
    #[inline]
    pub unsafe fn getUseTempFile(&mut self) -> bool { FiftyoneDegrees_Common_ConfigBase_getUseTempFile(self) }
    #[inline]
    pub unsafe fn getReuseTempFile(&mut self) -> bool { FiftyoneDegrees_Common_ConfigBase_getReuseTempFile(self) }
    #[inline]
    pub unsafe fn getTempDirectories(&mut self) -> [u64; 3usize] { FiftyoneDegrees_Common_ConfigBase_getTempDirectories(self) }
    #[inline]
    pub unsafe fn new(config: *mut fiftyoneDegreesConfigBase) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_ConfigBase_ConfigBase(__bindgen_tmp.as_mut_ptr(), config);
        __bindgen_tmp.assume_init()
    }
}

extern "C" {
    #[doc = " Free any memory associated with temporary directories."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10ConfigBaseD1Ev"]
    pub fn FiftyoneDegrees_Common_ConfigBase_ConfigBase_destructor(this: *mut FiftyoneDegrees_Common_ConfigBase);
}

extern "C" {
    #[doc = " Get the expected number of concurrent accessors of the data set."]
    #[doc = " @return concurrency"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10ConfigBase14getConcurrencyEv"]
    pub fn FiftyoneDegrees_Common_ConfigBase_getConcurrency(this: *mut ::std::os::raw::c_void) -> u16;
}

#[repr(C)]
pub struct FiftyoneDegrees_Common_Collection__bindgen_vtable(::std::os::raw::c_void);

#[doc = " A group of items accessible by index or key."]
#[doc = ""]
#[doc = " A Collection instance hands out new instances of any item requested"]
#[doc = " so once they are finished with, they must be deleted. A static"]
#[doc = " object is not returned, as this would require any type V to declare"]
#[doc = " a default constructor in the case that the caller declares a"]
#[doc = " variable before calling a get method."]
#[doc = ""]
#[doc = " ## Usage Example"]
#[doc = ""]
#[doc = " ```"]
#[doc = " FiftyoneDegrees::Common::Collection<string, string> *collection;"]
#[doc = ""]
#[doc = " // Iterate over all indexes"]
#[doc = " for (int i = 0; i < collection->getSize(); i++) {"]
#[doc = ""]
#[doc = "     // Get the value for the current index"]
#[doc = "     string *value = collection->getByIndex(i);"]
#[doc = ""]
#[doc = "     // Do something with the value"]
#[doc = "     // ..."]
#[doc = ""]
#[doc = "     // Delete the value instance"]
#[doc = "     delete value;"]
#[doc = " }"]
#[doc = ""]
#[doc = " // Or get a value using it's key of type <T>"]
#[doc = " string *value = collection->getByKey(\"string type key\");"]
#[doc = ""]
#[doc = " // Do something with the value"]
#[doc = " // ..."]
#[doc = ""]
#[doc = " // Delete the value instance"]
#[doc = " delete value;"]
#[doc = " ```"]
#[doc = ""]
#[doc = " @tparam K key type for the items in the collection which must be"]
#[doc = " unique e.g. string is used for property meta data where the unique"]
#[doc = " key is the name of the property. The type K must implement the '<'"]
#[doc = " and '==' operators"]
#[doc = " @tparam V value type for the items stored in the collection. These"]
#[doc = " must be instantiatable by the collection, and should implement a"]
#[doc = " public destructor as their lifetimes are not handled by the"]
#[doc = " collection instance"]
#[repr(C)]
#[derive(Debug)]
pub struct FiftyoneDegrees_Common_Collection {
    pub vtable_: *const FiftyoneDegrees_Common_Collection__bindgen_vtable,
}

#[doc = " Base class for any entity meta data. All meta data classes should"]
#[doc = " extend this class."]
#[doc = ""]
#[doc = " A meta data instance is immutable once it has been instantiated. An"]
#[doc = " instance is also comparable to another via the `==` and `!=`"]
#[doc = " operators, provided the type K is properly implemented."]
#[doc = " @tparam K key type for the entity which must be unique e.g. string"]
#[doc = " is used for property meta data where the unique key is the name of"]
#[doc = " the property. The type K must implement the `<` and `==` operators."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FiftyoneDegrees_Common_EntityMetaData<K> {
    #[doc = " The unique key for this instance."] pub key: K,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<K>>,
}

#[doc = " EntityMetaData relating to a component populated by an engine"]
#[doc = " implementation."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FiftyoneDegrees_Common_ComponentMetaData {
    pub _base: FiftyoneDegrees_Common_EntityMetaData<byte>,
    #[doc = " The name of the component"] pub name: std_string,
    #[doc = " The unique if of the default profile for this component"] pub defaultProfileId: u32,
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_Common_ComponentMetaData() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_ComponentMetaData>(), 40usize, concat!("Size of: ", stringify!(FiftyoneDegrees_Common_ComponentMetaData)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_ComponentMetaData>(), 8usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_Common_ComponentMetaData)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_ComponentMetaData>())).name as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_ComponentMetaData), "::", stringify!(name)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_ComponentMetaData>())).defaultProfileId as *const _ as usize }, 32usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_ComponentMetaData), "::", stringify!(defaultProfileId)));
}

extern "C" {
    #[doc = " Get the unique if of the component as an integer."]
    #[doc = " @return unique id as int"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common17ComponentMetaData19getComponentIdAsIntEv"]
    pub fn FiftyoneDegrees_Common_ComponentMetaData_getComponentIdAsInt(this: *mut FiftyoneDegrees_Common_ComponentMetaData) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Get the unique id of the component."]
    #[doc = " @return unique id"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common17ComponentMetaData14getComponentIdEv"]
    pub fn FiftyoneDegrees_Common_ComponentMetaData_getComponentId(this: *mut FiftyoneDegrees_Common_ComponentMetaData) -> byte;
}

extern "C" {
    #[doc = " Get the name of the component."]
    #[doc = " @return name of the component"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common17ComponentMetaData7getNameEv"]
    pub fn FiftyoneDegrees_Common_ComponentMetaData_getName(this: *mut FiftyoneDegrees_Common_ComponentMetaData) -> std_string;
}

extern "C" {
    #[doc = " Get the unique id for the default profile for this component."]
    #[doc = " @return default profile id"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common17ComponentMetaData19getDefaultProfileIdEv"]
    pub fn FiftyoneDegrees_Common_ComponentMetaData_getDefaultProfileId(this: *mut FiftyoneDegrees_Common_ComponentMetaData) -> u32;
}

extern "C" {
    #[doc = " Default constructor, should not be used externally as it"]
    #[doc = " produces an invalid instance"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common17ComponentMetaDataC1Ev"]
    pub fn FiftyoneDegrees_Common_ComponentMetaData_ComponentMetaData(this: *mut FiftyoneDegrees_Common_ComponentMetaData);
}

extern "C" {
    #[doc = " Construct a new instance of ComponentMetaData from an existing"]
    #[doc = " instance. This copies the existing instance and does not hold a"]
    #[doc = " reference to it."]
    #[doc = " @param component to copy"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common17ComponentMetaDataC1EPS1_"]
    pub fn FiftyoneDegrees_Common_ComponentMetaData_ComponentMetaData1(this: *mut FiftyoneDegrees_Common_ComponentMetaData, component: *mut FiftyoneDegrees_Common_ComponentMetaData);
}

extern "C" {
    #[doc = " Construct a new instance of ComponentMetaData. This should only"]
    #[doc = " be used internally by the collection class."]
    #[doc = " @param componentId unique id of the component"]
    #[doc = " @param name the name of the component"]
    #[doc = " @param defaultProfileId unique id of the default profile for the"]
    #[doc = " component"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common17ComponentMetaDataC1EhNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEj"]
    pub fn FiftyoneDegrees_Common_ComponentMetaData_ComponentMetaData2(this: *mut FiftyoneDegrees_Common_ComponentMetaData, componentId: byte, name: std_string, defaultProfileId: u32);
}

impl FiftyoneDegrees_Common_ComponentMetaData {
    #[inline]
    pub unsafe fn getComponentIdAsInt(&mut self) -> ::std::os::raw::c_int { FiftyoneDegrees_Common_ComponentMetaData_getComponentIdAsInt(self) }
    #[inline]
    pub unsafe fn getComponentId(&mut self) -> byte { FiftyoneDegrees_Common_ComponentMetaData_getComponentId(self) }
    #[inline]
    pub unsafe fn getName(&mut self) -> std_string { FiftyoneDegrees_Common_ComponentMetaData_getName(self) }
    #[inline]
    pub unsafe fn getDefaultProfileId(&mut self) -> u32 { FiftyoneDegrees_Common_ComponentMetaData_getDefaultProfileId(self) }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_ComponentMetaData_ComponentMetaData(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(component: *mut FiftyoneDegrees_Common_ComponentMetaData) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_ComponentMetaData_ComponentMetaData1(__bindgen_tmp.as_mut_ptr(), component);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(componentId: byte, name: std_string, defaultProfileId: u32) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_ComponentMetaData_ComponentMetaData2(__bindgen_tmp.as_mut_ptr(), componentId, name, defaultProfileId);
        __bindgen_tmp.assume_init()
    }
}

#[doc = " Meta data relating to a property populated by an engine"]
#[doc = " implementation."]
#[repr(C)]
#[derive(Debug)]
pub struct FiftyoneDegrees_Common_PropertyMetaData {
    pub _base: FiftyoneDegrees_Common_EntityMetaData<std_string>,
    #[doc = " Names of the data file containing the property"] pub dataFilesWherePresent: [u64; 3usize],
    #[doc = " Name of the property type e.g. `int`"] pub type_: std_string,
    #[doc = " Category the property belongs to"] pub category: std_string,
    #[doc = " URL containing more information on the property"] pub url: std_string,
    #[doc = " True if the property is available"] pub available: bool,
    #[doc = " Order in which the property should be displayed"] pub displayOrder: byte,
    #[doc = " True if the property is mandatory in the data set"] pub isMandatory: bool,
    #[doc = " True if the values for this property are a list"] pub isList: bool,
    #[doc = " True if the property is obsolete"] pub isObsolete: bool,
    #[doc = " True if the property should be displayed"] pub show: bool,
    #[doc = " True if the property values should be shown"] pub showValues: bool,
    #[doc = " Full description for the property"] pub description: std_string,
    #[doc = " Default value for the property as a string"] pub defaultValue: std_string,
    #[doc = " Unique id of the component the property relates to"] pub componentId: byte,
    #[doc = " Indexes in the properties collection for this property's evidence"]
    #[doc = "properties"] pub evidenceProperties: [u64; 3usize],
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_Common_PropertyMetaData() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_PropertyMetaData>(), 208usize, concat!("Size of: ", stringify!(FiftyoneDegrees_Common_PropertyMetaData)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_PropertyMetaData>(), 8usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_Common_PropertyMetaData)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_PropertyMetaData>())).dataFilesWherePresent as *const _ as usize }, 24usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_PropertyMetaData), "::", stringify!(dataFilesWherePresent)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_PropertyMetaData>())).type_ as *const _ as usize }, 48usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_PropertyMetaData), "::", stringify!(type_)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_PropertyMetaData>())).category as *const _ as usize }, 72usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_PropertyMetaData), "::", stringify!(category)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_PropertyMetaData>())).url as *const _ as usize }, 96usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_PropertyMetaData), "::", stringify!(url)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_PropertyMetaData>())).available as *const _ as usize }, 120usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_PropertyMetaData), "::", stringify!(available)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_PropertyMetaData>())).displayOrder as *const _ as usize }, 121usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_PropertyMetaData), "::", stringify!(displayOrder)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_PropertyMetaData>())).isMandatory as *const _ as usize }, 122usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_PropertyMetaData), "::", stringify!(isMandatory)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_PropertyMetaData>())).isList as *const _ as usize }, 123usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_PropertyMetaData), "::", stringify!(isList)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_PropertyMetaData>())).isObsolete as *const _ as usize }, 124usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_PropertyMetaData), "::", stringify!(isObsolete)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_PropertyMetaData>())).show as *const _ as usize }, 125usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_PropertyMetaData), "::", stringify!(show)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_PropertyMetaData>())).showValues as *const _ as usize }, 126usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_PropertyMetaData), "::", stringify!(showValues)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_PropertyMetaData>())).description as *const _ as usize }, 128usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_PropertyMetaData), "::", stringify!(description)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_PropertyMetaData>())).defaultValue as *const _ as usize }, 152usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_PropertyMetaData), "::", stringify!(defaultValue)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_PropertyMetaData>())).componentId as *const _ as usize }, 176usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_PropertyMetaData), "::", stringify!(componentId)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_PropertyMetaData>())).evidenceProperties as *const _ as usize }, 184usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_PropertyMetaData), "::", stringify!(evidenceProperties)));
}

extern "C" {
    #[doc = " Get the name of the property."]
    #[doc = " @return string representing the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaData7getNameEv"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_getName(this: *mut FiftyoneDegrees_Common_PropertyMetaData) -> std_string;
}

extern "C" {
    #[doc = " Get the list of data file tiers where the property is available"]
    #[doc = " e.g. Premium or Enterprise."]
    #[doc = " @return vector containing data file names"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaData24getDataFilesWherePresentEv"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_getDataFilesWherePresent(this: *mut FiftyoneDegrees_Common_PropertyMetaData) -> [u64; 3usize];
}

extern "C" {
    #[doc = " Get the type of data which the property refers to e.g. `int`"]
    #[doc = " @return string indicating the variable type"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaData7getTypeEv"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_getType(this: *mut FiftyoneDegrees_Common_PropertyMetaData) -> std_string;
}

extern "C" {
    #[doc = " Get the category which the property belongs to e.g. `device`."]
    #[doc = " @return string indicating the category"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaData11getCategoryEv"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_getCategory(this: *mut FiftyoneDegrees_Common_PropertyMetaData) -> std_string;
}

extern "C" {
    #[doc = " Get the URL related to the property."]
    #[doc = " @return URL string"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaData6getUrlEv"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_getUrl(this: *mut FiftyoneDegrees_Common_PropertyMetaData) -> std_string;
}

extern "C" {
    #[doc = " Get whether or not the property is available in the active data"]
    #[doc = " set."]
    #[doc = " @return true if the property is available, otherwise false."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaData12getAvailableEv"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_getAvailable(this: *mut FiftyoneDegrees_Common_PropertyMetaData) -> bool;
}

extern "C" {
    #[doc = " Get the order in which the property should be displayed."]
    #[doc = " @return display order"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaData15getDisplayOrderEv"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_getDisplayOrder(this: *mut FiftyoneDegrees_Common_PropertyMetaData) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Get whether or not the property is mandatory. This means that it"]
    #[doc = " must be populated in the data set."]
    #[doc = " @return true if the property is mandatory"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaData14getIsMandatoryEv"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_getIsMandatory(this: *mut FiftyoneDegrees_Common_PropertyMetaData) -> bool;
}

extern "C" {
    #[doc = " Get whether or not the value of the property is a list. If so,"]
    #[doc = " the a result can contain multiple values for this property."]
    #[doc = " @return true if the value of the property is a list"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaData9getIsListEv"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_getIsList(this: *mut FiftyoneDegrees_Common_PropertyMetaData) -> bool;
}

extern "C" {
    #[doc = " Get whether or not the property is obsolete. If so, the values"]
    #[doc = " may not be exported in the data set."]
    #[doc = " @return true if the property is obsolete"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaData13getIsObsoleteEv"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_getIsObsolete(this: *mut FiftyoneDegrees_Common_PropertyMetaData) -> bool;
}

extern "C" {
    #[doc = " Get whether or not the property should be displayed."]
    #[doc = " @return true if the property should be displayed"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaData7getShowEv"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_getShow(this: *mut FiftyoneDegrees_Common_PropertyMetaData) -> bool;
}

extern "C" {
    #[doc = " Get whether or not the values of the property should be"]
    #[doc = " displayed."]
    #[doc = " @return true if the values of the property should be displayed"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaData13getShowValuesEv"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_getShowValues(this: *mut FiftyoneDegrees_Common_PropertyMetaData) -> bool;
}

extern "C" {
    #[doc = " Get the full description of the property."]
    #[doc = " @return description string"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaData14getDescriptionEv"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_getDescription(this: *mut FiftyoneDegrees_Common_PropertyMetaData) -> std_string;
}

extern "C" {
    #[doc = " Gets the default value as a string for the property. This can be"]
    #[doc = " used along with the property itself to get the value meta data"]
    #[doc = " from the value meta data collection."]
    #[doc = " @return default value string"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaData15getDefaultValueEv"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_getDefaultValue(this: *mut FiftyoneDegrees_Common_PropertyMetaData) -> std_string;
}

extern "C" {
    #[doc = " Get the component id of the property. This can be used to get"]
    #[doc = " the component meta data from the component meta data collection."]
    #[doc = " @return component id"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaData14getComponentIdEv"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_getComponentId(this: *mut FiftyoneDegrees_Common_PropertyMetaData) -> byte;
}

extern "C" {
    #[doc = " Get the evidence property indexes for the property."]
    #[doc = " @return indexes for evidence properties"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaData21getEvidencePropertiesEv"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_getEvidenceProperties(this: *mut FiftyoneDegrees_Common_PropertyMetaData) -> [u64; 3usize];
}

extern "C" {
    #[doc = " Default constructor, should not be used externally as it"]
    #[doc = " produces an invalid instance"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaDataC1Ev"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_PropertyMetaData(this: *mut FiftyoneDegrees_Common_PropertyMetaData);
}

extern "C" {
    #[doc = " Construct a new instance of PropertyMetaData from an existing"]
    #[doc = " instance. This copies the existing instance and does not hold a"]
    #[doc = " reference to it."]
    #[doc = " @param property to copy"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaDataC1EPS1_"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_PropertyMetaData1(this: *mut FiftyoneDegrees_Common_PropertyMetaData, property: *mut FiftyoneDegrees_Common_PropertyMetaData);
}

extern "C" {
    #[doc = " Construct a new instance of PropertyMetaData. This should only"]
    #[doc = " be used internally by the Collection class."]
    #[doc = " @param name of the property"]
    #[doc = " @param dataFilesWherePresent names of data files where the"]
    #[doc = " property is available"]
    #[doc = " @param type string indicating the variable type e.g. `int`"]
    #[doc = " @param category name of the category which the property belongs"]
    #[doc = " to"]
    #[doc = " @param url relating to the property"]
    #[doc = " @param available bool indicating whether the property is"]
    #[doc = " available in the dataset"]
    #[doc = " @param displayOrder the order of importance to use when"]
    #[doc = " displaying the property"]
    #[doc = " @param isMandatory true if the property is mandatory"]
    #[doc = " @param isList true if the value of the property is a list"]
    #[doc = " @param isObsolete true if the property is obsolete"]
    #[doc = " @param show true if the property should be displayed"]
    #[doc = " @param showValues true if the values for the property should be"]
    #[doc = " displayed"]
    #[doc = " @param description the full description of the property"]
    #[doc = " @param defaultValue string representation of the default value"]
    #[doc = " in the dataset for this property. Used when loading the default"]
    #[doc = " value from the value meta data collection."]
    #[doc = " @param componentId the unique id of the component which the"]
    #[doc = " property belongs to"]
    #[doc = " @param evidenceProperties list of indexes in the properties"]
    #[doc = " collection for this property's evidence properties"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16PropertyMetaDataC1ENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_6vectorIS8_NS6_IS8_EEEES8_S8_S8_bhbbbbbS8_S8_hNS9_IjNS6_IjEEEE"]
    pub fn FiftyoneDegrees_Common_PropertyMetaData_PropertyMetaData2(this: *mut FiftyoneDegrees_Common_PropertyMetaData, name: std_string, dataFilesWherePresent: [u64; 3usize], type_: std_string, category: std_string, url: std_string, available: bool, displayOrder: byte, isMandatory: bool, isList: bool, isObsolete: bool, show: bool, showValues: bool, description: std_string, defaultValue: std_string, componentId: byte, evidenceProperties: [u64; 3usize]);
}

impl FiftyoneDegrees_Common_PropertyMetaData {
    #[inline]
    pub unsafe fn getName(&mut self) -> std_string { FiftyoneDegrees_Common_PropertyMetaData_getName(self) }
    #[inline]
    pub unsafe fn getDataFilesWherePresent(&mut self) -> [u64; 3usize] { FiftyoneDegrees_Common_PropertyMetaData_getDataFilesWherePresent(self) }
    #[inline]
    pub unsafe fn getType(&mut self) -> std_string { FiftyoneDegrees_Common_PropertyMetaData_getType(self) }
    #[inline]
    pub unsafe fn getCategory(&mut self) -> std_string { FiftyoneDegrees_Common_PropertyMetaData_getCategory(self) }
    #[inline]
    pub unsafe fn getUrl(&mut self) -> std_string { FiftyoneDegrees_Common_PropertyMetaData_getUrl(self) }
    #[inline]
    pub unsafe fn getAvailable(&mut self) -> bool { FiftyoneDegrees_Common_PropertyMetaData_getAvailable(self) }
    #[inline]
    pub unsafe fn getDisplayOrder(&mut self) -> ::std::os::raw::c_int { FiftyoneDegrees_Common_PropertyMetaData_getDisplayOrder(self) }
    #[inline]
    pub unsafe fn getIsMandatory(&mut self) -> bool { FiftyoneDegrees_Common_PropertyMetaData_getIsMandatory(self) }
    #[inline]
    pub unsafe fn getIsList(&mut self) -> bool { FiftyoneDegrees_Common_PropertyMetaData_getIsList(self) }
    #[inline]
    pub unsafe fn getIsObsolete(&mut self) -> bool { FiftyoneDegrees_Common_PropertyMetaData_getIsObsolete(self) }
    #[inline]
    pub unsafe fn getShow(&mut self) -> bool { FiftyoneDegrees_Common_PropertyMetaData_getShow(self) }
    #[inline]
    pub unsafe fn getShowValues(&mut self) -> bool { FiftyoneDegrees_Common_PropertyMetaData_getShowValues(self) }
    #[inline]
    pub unsafe fn getDescription(&mut self) -> std_string { FiftyoneDegrees_Common_PropertyMetaData_getDescription(self) }
    #[inline]
    pub unsafe fn getDefaultValue(&mut self) -> std_string { FiftyoneDegrees_Common_PropertyMetaData_getDefaultValue(self) }
    #[inline]
    pub unsafe fn getComponentId(&mut self) -> byte { FiftyoneDegrees_Common_PropertyMetaData_getComponentId(self) }
    #[inline]
    pub unsafe fn getEvidenceProperties(&mut self) -> [u64; 3usize] { FiftyoneDegrees_Common_PropertyMetaData_getEvidenceProperties(self) }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_PropertyMetaData_PropertyMetaData(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(property: *mut FiftyoneDegrees_Common_PropertyMetaData) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_PropertyMetaData_PropertyMetaData1(__bindgen_tmp.as_mut_ptr(), property);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(name: std_string, dataFilesWherePresent: [u64; 3usize], type_: std_string, category: std_string, url: std_string, available: bool, displayOrder: byte, isMandatory: bool, isList: bool, isObsolete: bool, show: bool, showValues: bool, description: std_string, defaultValue: std_string, componentId: byte, evidenceProperties: [u64; 3usize]) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_PropertyMetaData_PropertyMetaData2(__bindgen_tmp.as_mut_ptr(), name, dataFilesWherePresent, type_, category, url, available, displayOrder, isMandatory, isList, isObsolete, show, showValues, description, defaultValue, componentId, evidenceProperties);
        __bindgen_tmp.assume_init()
    }
}

#[doc = " Meta data relating to a profile populated by an engine"]
#[doc = " implementation."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FiftyoneDegrees_Common_ProfileMetaData {
    pub _base: FiftyoneDegrees_Common_EntityMetaData<u32>,
    #[doc = " The unique id of the component which the profile relates to"] pub componentId: byte,
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_Common_ProfileMetaData() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_ProfileMetaData>(), 8usize, concat!("Size of: ", stringify!(FiftyoneDegrees_Common_ProfileMetaData)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_ProfileMetaData>(), 4usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_Common_ProfileMetaData)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_ProfileMetaData>())).componentId as *const _ as usize }, 4usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_ProfileMetaData), "::", stringify!(componentId)));
}

extern "C" {
    #[doc = " Get the unique id of the profile."]
    #[doc = " @return unique id"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common15ProfileMetaData12getProfileIdEv"]
    pub fn FiftyoneDegrees_Common_ProfileMetaData_getProfileId(this: *mut FiftyoneDegrees_Common_ProfileMetaData) -> u32;
}

extern "C" {
    #[doc = " Get the unique id of the component the profile relates to."]
    #[doc = " @return unique component id"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common15ProfileMetaData14getComponentIdEv"]
    pub fn FiftyoneDegrees_Common_ProfileMetaData_getComponentId(this: *mut FiftyoneDegrees_Common_ProfileMetaData) -> byte;
}

extern "C" {
    #[doc = " Default constructor, should not be used externally as it"]
    #[doc = " produces an invalid instance"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common15ProfileMetaDataC1Ev"]
    pub fn FiftyoneDegrees_Common_ProfileMetaData_ProfileMetaData(this: *mut FiftyoneDegrees_Common_ProfileMetaData);
}

extern "C" {
    #[doc = " Construct a new instance of ProfileMetaData from an existing"]
    #[doc = " instance. This copies the existing instance and does not hold a"]
    #[doc = " reference to it."]
    #[doc = " @param profile to copy"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common15ProfileMetaDataC1EPS1_"]
    pub fn FiftyoneDegrees_Common_ProfileMetaData_ProfileMetaData1(this: *mut FiftyoneDegrees_Common_ProfileMetaData, profile: *mut FiftyoneDegrees_Common_ProfileMetaData);
}

extern "C" {
    #[doc = " Create a new instance of ProfileMetaData. This should only be"]
    #[doc = " used internally by the Collection class."]
    #[doc = " @param profileId the unique id of the profile"]
    #[doc = " @param componentId the unique id of the component the profile"]
    #[doc = " relates to"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common15ProfileMetaDataC1Ejh"]
    pub fn FiftyoneDegrees_Common_ProfileMetaData_ProfileMetaData2(this: *mut FiftyoneDegrees_Common_ProfileMetaData, profileId: u32, componentId: byte);
}

impl FiftyoneDegrees_Common_ProfileMetaData {
    #[inline]
    pub unsafe fn getProfileId(&mut self) -> u32 { FiftyoneDegrees_Common_ProfileMetaData_getProfileId(self) }
    #[inline]
    pub unsafe fn getComponentId(&mut self) -> byte { FiftyoneDegrees_Common_ProfileMetaData_getComponentId(self) }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_ProfileMetaData_ProfileMetaData(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(profile: *mut FiftyoneDegrees_Common_ProfileMetaData) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_ProfileMetaData_ProfileMetaData1(__bindgen_tmp.as_mut_ptr(), profile);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(profileId: u32, componentId: byte) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_ProfileMetaData_ProfileMetaData2(__bindgen_tmp.as_mut_ptr(), profileId, componentId);
        __bindgen_tmp.assume_init()
    }
}

#[doc = " Key used to store ValueMetaData in a Collection. A value name is not"]
#[doc = " unique, however it is unique within the collection of values for a"]
#[doc = " single property. For this reason, the key consists of the property"]
#[doc = " name and the value name."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FiftyoneDegrees_Common_ValueMetaDataKey {
    #[doc = " The name of the property the value relates to"] pub propertyName: std_string,
    #[doc = " The value as a string"] pub valueName: std_string,
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_Common_ValueMetaDataKey() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_ValueMetaDataKey>(), 48usize, concat!("Size of: ", stringify!(FiftyoneDegrees_Common_ValueMetaDataKey)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_ValueMetaDataKey>(), 8usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_Common_ValueMetaDataKey)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_ValueMetaDataKey>())).propertyName as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_ValueMetaDataKey), "::", stringify!(propertyName)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_ValueMetaDataKey>())).valueName as *const _ as usize }, 24usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_ValueMetaDataKey), "::", stringify!(valueName)));
}

extern "C" {
    #[doc = " Get the name of the property that the value keyed relates to."]
    #[doc = " @return name of the property"]
    #[link_name = "\u{1}__ZNK15FiftyoneDegrees6Common16ValueMetaDataKey15getPropertyNameEv"]
    pub fn FiftyoneDegrees_Common_ValueMetaDataKey_getPropertyName(this: *const FiftyoneDegrees_Common_ValueMetaDataKey) -> std_string;
}

extern "C" {
    #[doc = " Get the name of the value which is being keyed."]
    #[doc = " @return name of the value"]
    #[link_name = "\u{1}__ZNK15FiftyoneDegrees6Common16ValueMetaDataKey12getValueNameEv"]
    pub fn FiftyoneDegrees_Common_ValueMetaDataKey_getValueName(this: *const FiftyoneDegrees_Common_ValueMetaDataKey) -> std_string;
}

extern "C" {
    #[doc = " Default constructor. This should not be used externally as it"]
    #[doc = " returns an invalid instance."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16ValueMetaDataKeyC1Ev"]
    pub fn FiftyoneDegrees_Common_ValueMetaDataKey_ValueMetaDataKey(this: *mut FiftyoneDegrees_Common_ValueMetaDataKey);
}

extern "C" {
    #[doc = " Construct a new instance of ValueMetaDataKey from the unique"]
    #[doc = " combination of property and value names."]
    #[doc = " @param propertyName the name of the property the value relates"]
    #[doc = " to"]
    #[doc = " @param valueName the name of the value"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16ValueMetaDataKeyC1ENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_"]
    pub fn FiftyoneDegrees_Common_ValueMetaDataKey_ValueMetaDataKey1(this: *mut FiftyoneDegrees_Common_ValueMetaDataKey, propertyName: std_string, valueName: std_string);
}

impl FiftyoneDegrees_Common_ValueMetaDataKey {
    #[inline]
    pub unsafe fn getPropertyName(&self) -> std_string { FiftyoneDegrees_Common_ValueMetaDataKey_getPropertyName(self) }
    #[inline]
    pub unsafe fn getValueName(&self) -> std_string { FiftyoneDegrees_Common_ValueMetaDataKey_getValueName(self) }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_ValueMetaDataKey_ValueMetaDataKey(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(propertyName: std_string, valueName: std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_ValueMetaDataKey_ValueMetaDataKey1(__bindgen_tmp.as_mut_ptr(), propertyName, valueName);
        __bindgen_tmp.assume_init()
    }
}

#[doc = " Meta data relating to a value populated by an engine implementation."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FiftyoneDegrees_Common_ValueMetaData {
    pub _base: FiftyoneDegrees_Common_EntityMetaData<FiftyoneDegrees_Common_ValueMetaDataKey>,
    #[doc = " Full description of the value"] pub description: std_string,
    #[doc = " URL containing more information on the value"] pub url: std_string,
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_Common_ValueMetaData() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_ValueMetaData>(), 96usize, concat!("Size of: ", stringify!(FiftyoneDegrees_Common_ValueMetaData)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_ValueMetaData>(), 8usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_Common_ValueMetaData)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_ValueMetaData>())).description as *const _ as usize }, 48usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_ValueMetaData), "::", stringify!(description)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_ValueMetaData>())).url as *const _ as usize }, 72usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_ValueMetaData), "::", stringify!(url)));
}

extern "C" {
    #[doc = " Get the name of the value. This is a string representation of"]
    #[doc = " the value itself."]
    #[doc = " @return value name"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common13ValueMetaData7getNameEv"]
    pub fn FiftyoneDegrees_Common_ValueMetaData_getName(this: *mut FiftyoneDegrees_Common_ValueMetaData) -> std_string;
}

extern "C" {
    #[doc = " Get the full description of the value."]
    #[doc = " @return description string"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common13ValueMetaData14getDescriptionEv"]
    pub fn FiftyoneDegrees_Common_ValueMetaData_getDescription(this: *mut FiftyoneDegrees_Common_ValueMetaData) -> std_string;
}

extern "C" {
    #[doc = " Get the URL containing any extra information about the value."]
    #[doc = " @return URL string"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common13ValueMetaData6getUrlEv"]
    pub fn FiftyoneDegrees_Common_ValueMetaData_getUrl(this: *mut FiftyoneDegrees_Common_ValueMetaData) -> std_string;
}

extern "C" {
    #[doc = " Default constructor, should not be used externally as it"]
    #[doc = " produces an invalid instance"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common13ValueMetaDataC1Ev"]
    pub fn FiftyoneDegrees_Common_ValueMetaData_ValueMetaData(this: *mut FiftyoneDegrees_Common_ValueMetaData);
}

extern "C" {
    #[doc = " Construct a new instance of ValueMetaData from an existing"]
    #[doc = " instance. This copies the existing instance and does not hold a"]
    #[doc = " reference to it."]
    #[doc = " @param value to copy"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common13ValueMetaDataC1EPS1_"]
    pub fn FiftyoneDegrees_Common_ValueMetaData_ValueMetaData1(this: *mut FiftyoneDegrees_Common_ValueMetaData, value: *mut FiftyoneDegrees_Common_ValueMetaData);
}

extern "C" {
    #[doc = " Create a new instance of ValueMetaData. This should only be used"]
    #[doc = " internally by the Collection class."]
    #[doc = " @param key containing the value and property names"]
    #[doc = " @param description full description of the value"]
    #[doc = " @param url relating to the value"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common13ValueMetaDataC1ENS0_16ValueMetaDataKeyENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_"]
    pub fn FiftyoneDegrees_Common_ValueMetaData_ValueMetaData2(this: *mut FiftyoneDegrees_Common_ValueMetaData, key: FiftyoneDegrees_Common_ValueMetaDataKey, description: std_string, url: std_string);
}

impl FiftyoneDegrees_Common_ValueMetaData {
    #[inline]
    pub unsafe fn getName(&mut self) -> std_string { FiftyoneDegrees_Common_ValueMetaData_getName(self) }
    #[inline]
    pub unsafe fn getDescription(&mut self) -> std_string { FiftyoneDegrees_Common_ValueMetaData_getDescription(self) }
    #[inline]
    pub unsafe fn getUrl(&mut self) -> std_string { FiftyoneDegrees_Common_ValueMetaData_getUrl(self) }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_ValueMetaData_ValueMetaData(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(value: *mut FiftyoneDegrees_Common_ValueMetaData) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_ValueMetaData_ValueMetaData1(__bindgen_tmp.as_mut_ptr(), value);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(key: FiftyoneDegrees_Common_ValueMetaDataKey, description: std_string, url: std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_ValueMetaData_ValueMetaData2(__bindgen_tmp.as_mut_ptr(), key, description, url);
        __bindgen_tmp.assume_init()
    }
}

#[repr(C)]
pub struct FiftyoneDegrees_Common_MetaData__bindgen_vtable(::std::os::raw::c_void);

#[doc = " Contains meta data for the properties, values, profiles and"]
#[doc = " components that exist within the engine instance. All Collections"]
#[doc = " returned are new instances which hold a reference to the underlying"]
#[doc = " data structures, so must be disposed of. All single meta data"]
#[doc = " instances returned either by this class or the Collections it"]
#[doc = " returns hold no reference and are safe to hold on to."]
#[doc = ""]
#[doc = " ## Example Usage"]
#[doc = ""]
#[doc = " ```"]
#[doc = " using namespace FiftyoneDegrees::Common;"]
#[doc = " EngineBase *engine;"]
#[doc = ""]
#[doc = " // Get the meta data from an engine"]
#[doc = " MetaData *metaData = engine->getMetaData();"]
#[doc = ""]
#[doc = " // Get the meta data for the engine's properties"]
#[doc = " Collection<string, PropertyMetaData> *properties ="]
#[doc = "     metaData->getProperties();"]
#[doc = ""]
#[doc = " // Do something with the properties (see Collection.hpp for an"]
#[doc = " // example)."]
#[doc = " // ..."]
#[doc = ""]
#[doc = " // Delete the properties collection"]
#[doc = " delete properties;"]
#[doc = ""]
#[doc = " // Delete the meta data instance"]
#[doc = " delete metaData;"]
#[doc = " ```"]
#[repr(C)]
#[derive(Debug)]
pub struct FiftyoneDegrees_Common_MetaData {
    pub vtable_: *const FiftyoneDegrees_Common_MetaData__bindgen_vtable,
    #[doc = " A shared pointer to the manager is passed around and referenced"]
    #[doc = "by all instances that hold open a resource handle. This acts as a"]
    #[doc = "counter to ensure that the pointer to the manager remains valid"]
    #[doc = "until the last handle is freed. The shared pointer also handles"]
    #[doc = "freeing the pointer once no references remain. See resource.h for"]
    #[doc = "more information."] pub manager: [u64; 2usize],
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_Common_MetaData() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_MetaData>(), 24usize, concat!("Size of: ", stringify!(FiftyoneDegrees_Common_MetaData)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_MetaData>(), 8usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_Common_MetaData)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_MetaData>())).manager as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_MetaData), "::", stringify!(manager)));
}

extern "C" {
    #[doc = " Get a string from the collection and copy it to a C++ string"]
    #[doc = " instance. This method releases the collection item before"]
    #[doc = " returning."]
    #[doc = " @param strings pointer to the collection containing the string"]
    #[doc = " @param offset of the string in the collection"]
    #[doc = " @return copy of the requested string from the collection"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common8MetaData9getStringEP29fiftyone_degrees_collection_tj"]
    pub fn FiftyoneDegrees_Common_MetaData_getString(this: *mut FiftyoneDegrees_Common_MetaData, strings: *mut fiftyoneDegreesCollection, offset: u32) -> std_string;
}

extern "C" {
    #[doc = " Construct a new instance of MetaData. This should only be used"]
    #[doc = " internally by engines."]
    #[doc = " @param manager shared pointer to the manager instance to get"]
    #[doc = " data from"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common8MetaDataC2ENSt3__110shared_ptrI35fiftyone_degrees_resource_manager_tEE"]
    pub fn FiftyoneDegrees_Common_MetaData_MetaData(this: *mut FiftyoneDegrees_Common_MetaData, manager: [u64; 2usize]);
}

impl FiftyoneDegrees_Common_MetaData {
    #[inline]
    pub unsafe fn getString(&mut self, strings: *mut fiftyoneDegreesCollection, offset: u32) -> std_string { FiftyoneDegrees_Common_MetaData_getString(self, strings, offset) }
    #[inline]
    pub unsafe fn new(manager: [u64; 2usize]) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_MetaData_MetaData(__bindgen_tmp.as_mut_ptr(), manager);
        __bindgen_tmp.assume_init()
    }
}

extern "C" {
    #[doc = " Free any data and handles used for the meta data."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common8MetaDataD1Ev"]
    pub fn FiftyoneDegrees_Common_MetaData_MetaData_destructor(this: *mut FiftyoneDegrees_Common_MetaData);
}

#[doc = " Encapsulates a value returned an instance of ResultsBase for a"]
#[doc = " specified property. An instance contains either the value, or the"]
#[doc = " reason which there is no value."]
#[doc = ""]
#[doc = " Before retrieving the value itself, its presence should first be"]
#[doc = " checked using the hasValue() method. The typed value can be"]
#[doc = " returned either using the getValue() method, or more simply, by"]
#[doc = " dereferencing (similarly to an iterator). If there is no value, then"]
#[doc = " an exception will be thrown."]
#[doc = ""]
#[doc = " ## Usage Example"]
#[doc = " ```"]
#[doc = " using namespace FiftyoneDegrees::Common;"]
#[doc = " Value<string> value;"]
#[doc = ""]
#[doc = " // Check that there is a valid value"]
#[doc = " if (value.hasValue()) {"]
#[doc = "     // Get the value"]
#[doc = "     string stringValue = *value;"]
#[doc = "     // Do something with the value"]
#[doc = "     // ..."]
#[doc = " }"]
#[doc = " else {"]
#[doc = "     // Get the reason for the value being invalid"]
#[doc = "     string message = value.getNoValueMessage();"]
#[doc = "     // Do something with the message"]
#[doc = "     // ..."]
#[doc = " }"]
#[doc = ""]
#[doc = " // Or just try getting the value and catch the exception. Note that"]
#[doc = " // this is not the recommended method."]
#[doc = " try {"]
#[doc = "     string stringValue = *value;"]
#[doc = " }"]
#[doc = " catch (exception e) {"]
#[doc = "     const char *message = e.what();"]
#[doc = " }"]
#[doc = " ```"]
#[doc = ""]
#[doc = " @tparam T the type of the value e.g. string"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FiftyoneDegrees_Common_Value<T> {
    #[doc = " @}"] pub hasValueInternal: bool,
    pub value: T,
    pub noValueMessage: *const ::std::os::raw::c_char,
    pub noValueReason: fiftyoneDegreesResultsNoValueReason,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}

#[repr(C)]
pub struct FiftyoneDegrees_Common_ResultsBase__bindgen_vtable(::std::os::raw::c_void);

#[doc = " Encapsulates the results of an engine's processing. The class is"]
#[doc = " constructed using an instance of a C #fiftyoneDegreesResultsBase"]
#[doc = " structure which is then referenced to return associated values and"]
#[doc = " metrics. Any memory used by the results is freed by the extending"]
#[doc = " class."]
#[doc = ""]
#[doc = " Values contained in a results instance can be returned as a string,"]
#[doc = " or as a type specified by the method used to fetch the value. For"]
#[doc = " example, the #getValueAsBool(int) method returns a value as a bool"]
#[doc = " instead of a string representation."]
#[doc = ""]
#[doc = " The key used to get the value for a property can be either the name"]
#[doc = " of the property, or the index of the property in the required"]
#[doc = " properties structure."]
#[doc = ""]
#[doc = " Results instances should only be created by a Engine."]
#[doc = ""]
#[doc = " ## Usage Example"]
#[doc = ""]
#[doc = " ```"]
#[doc = " using namespace FiftyoneDegrees::Common;"]
#[doc = " ResultsBase *results;"]
#[doc = ""]
#[doc = " // Iterate over all property indexes"]
#[doc = " for (int i = 0; i < results->getAvailableProperties(); i++) {"]
#[doc = ""]
#[doc = "     // Get the value for the property as a string"]
#[doc = "     string value = *results->getValueAsString(i);"]
#[doc = ""]
#[doc = "     // Do something with the value"]
#[doc = "     // ..."]
#[doc = " }"]
#[doc = ""]
#[doc = " // Or get a value using the name of the property"]
#[doc = " string value = *results->getValueAsString(\"name of a property\");"]
#[doc = ""]
#[doc = " // Delete the results"]
#[doc = " delete results;"]
#[doc = " ```"]
#[repr(C)]
#[derive(Debug)]
pub struct FiftyoneDegrees_Common_ResultsBase {
    pub vtable_: *const FiftyoneDegrees_Common_ResultsBase__bindgen_vtable,
    #[doc = " Pointer to the underlying available properties structure."] pub available: *mut fiftyoneDegreesPropertiesAvailable,
    #[doc = " A shared pointer to the manager is passed around and referenced"]
    #[doc = "by all instances that hold open a resource handle. This acts as a"]
    #[doc = "counter to ensure that the pointer to the manager remains valid"]
    #[doc = "until the last handle is freed. The shared pointer also handles"]
    #[doc = "freeing the pointer once no references remain."]
    #[doc = "IMPORTANT** : Although this pointer is not used, the shared"]
    #[doc = "pointer reference is required by the resource manager logic. See"]
    #[doc = "resource.h for more information."] pub manager: [u64; 2usize],
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_Common_ResultsBase() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_ResultsBase>(), 32usize, concat!("Size of: ", stringify!(FiftyoneDegrees_Common_ResultsBase)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_ResultsBase>(), 8usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_Common_ResultsBase)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_ResultsBase>())).available as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_ResultsBase), "::", stringify!(available)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_ResultsBase>())).manager as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_ResultsBase), "::", stringify!(manager)));
}

extern "C" {
    #[doc = " Get the number of available properties contained in the Results"]
    #[doc = " instance."]
    #[doc = " @return the number of available properties"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase22getAvailablePropertiesEv"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getAvailableProperties(this: *mut FiftyoneDegrees_Common_ResultsBase) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Get whether or not this results instance contains a value for"]
    #[doc = " the requested property."]
    #[doc = " @param propertyName name of the property to check for"]
    #[doc = " @return true if there is a value for the requested property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase16containsPropertyERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn FiftyoneDegrees_Common_ResultsBase_containsProperty(this: *mut FiftyoneDegrees_Common_ResultsBase, propertyName: *const std_string) -> bool;
}

extern "C" {
    #[doc = " Get the names of the properties which are available in the"]
    #[doc = " Results instance. The index of the property in the vector"]
    #[doc = " indicates its index in the Results instance, so a name's index"]
    #[doc = " can be used to fetch its corresponding value via a get method."]
    #[doc = " @return vector containing the names of all available properties"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase13getPropertiesEv"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getProperties(this: *mut FiftyoneDegrees_Common_ResultsBase) -> [u64; 3usize];
}

extern "C" {
    #[doc = " Get the name of the property at the require property index, or"]
    #[doc = " an empty string if the required property index is invalid."]
    #[doc = " @param requiredPropertyIndex of the property name required"]
    #[doc = " @return the name of the property, or an empty string if not"]
    #[doc = " valid"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase15getPropertyNameEi"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getPropertyName(this: *mut FiftyoneDegrees_Common_ResultsBase, requiredPropertyIndex: ::std::os::raw::c_int) -> std_string;
}

extern "C" {
    #[doc = " Get a vector with all values associated with the required"]
    #[doc = " property name. If the name is not valid an empty vector is"]
    #[doc = " returned."]
    #[doc = " @param propertyName pointer to a string containing the property"]
    #[doc = " name"]
    #[doc = " @return a vector of values for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase9getValuesEPKc"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValues(this: *mut FiftyoneDegrees_Common_ResultsBase, propertyName: *const ::std::os::raw::c_char) -> u8;
}

extern "C" {
    #[doc = " Get a vector with all values associated with the required"]
    #[doc = " property name. If the name is not valid an empty vector is"]
    #[doc = " returned."]
    #[doc = " @param propertyName pointer to a string containing the property"]
    #[doc = " name"]
    #[doc = " @return a vector of values for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase9getValuesERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValues1(this: *mut FiftyoneDegrees_Common_ResultsBase, propertyName: *const std_string) -> u8;
}

extern "C" {
    #[doc = " Get a vector with all values associated with the required"]
    #[doc = " property name. If the name is not valid an empty vector is"]
    #[doc = " returned."]
    #[doc = " @param propertyName pointer to a string containing the property"]
    #[doc = " name"]
    #[doc = " @return a vector of values for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase9getValuesEPKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValues2(this: *mut FiftyoneDegrees_Common_ResultsBase, propertyName: *const std_string) -> u8;
}

extern "C" {
    #[doc = " Get a vector with all values associated with the required"]
    #[doc = " property index. If the index is not valid an empty vector is"]
    #[doc = " returned."]
    #[doc = " @param requiredPropertyIndex of the property required"]
    #[doc = " @return a vector of values for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase9getValuesEi"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValues3(this: *mut FiftyoneDegrees_Common_ResultsBase, requiredPropertyIndex: ::std::os::raw::c_int) -> u8;
}

extern "C" {
    #[doc = " Get a string representation of the value associated with the"]
    #[doc = " required property name. If the property name is not valid an"]
    #[doc = " empty string is returned. If the property relates to a list with"]
    #[doc = " more than one value then values are separated by '|' characters."]
    #[doc = " @param propertyName string containing the property name"]
    #[doc = " @return a string representation of the value for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase16getValueAsStringEPKc"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValueAsString(this: *mut FiftyoneDegrees_Common_ResultsBase, propertyName: *const ::std::os::raw::c_char) -> FiftyoneDegrees_Common_Value<std_string>;
}

extern "C" {
    #[doc = " Get a string representation of the value associated with the"]
    #[doc = " required property name. If the property name is not valid an"]
    #[doc = " empty string is returned. If the property relates to a list with"]
    #[doc = " more than one value then values are separated by '|' characters."]
    #[doc = " @param propertyName string containing the property name"]
    #[doc = " @return a string representation of the value for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase16getValueAsStringERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValueAsString1(this: *mut FiftyoneDegrees_Common_ResultsBase, propertyName: *const std_string) -> FiftyoneDegrees_Common_Value<std_string>;
}

extern "C" {
    #[doc = " Get a string representation of the value associated with the"]
    #[doc = " required property name. If the property name is not valid an"]
    #[doc = " empty string is returned. If the property relates to a list with"]
    #[doc = " more than one value then values are separated by '|' characters."]
    #[doc = " @param propertyName string containing the property name"]
    #[doc = " @return a string representation of the value for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase16getValueAsStringEPKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValueAsString2(this: *mut FiftyoneDegrees_Common_ResultsBase, propertyName: *const std_string) -> FiftyoneDegrees_Common_Value<std_string>;
}

extern "C" {
    #[doc = " Get a boolean representation of the value associated with the"]
    #[doc = " required property name. If the property name is not valid then"]
    #[doc = " false is returned."]
    #[doc = " @param propertyName string containing the property name"]
    #[doc = " @return a boolean representation of the value for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase14getValueAsBoolEPKc"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValueAsBool(this: *mut FiftyoneDegrees_Common_ResultsBase, propertyName: *const ::std::os::raw::c_char) -> FiftyoneDegrees_Common_Value<bool>;
}

extern "C" {
    #[doc = " Get a boolean representation of the value associated with the"]
    #[doc = " required property name. If the property name is not valid then"]
    #[doc = " false is returned."]
    #[doc = " @param propertyName string containing the property name"]
    #[doc = " @return a boolean representation of the value for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase14getValueAsBoolERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValueAsBool1(this: *mut FiftyoneDegrees_Common_ResultsBase, propertyName: *const std_string) -> FiftyoneDegrees_Common_Value<bool>;
}

extern "C" {
    #[doc = " Get a boolean representation of the value associated with the"]
    #[doc = " required property name. If the property name is not valid then"]
    #[doc = " false is returned."]
    #[doc = " @param propertyName string containing the property name"]
    #[doc = " @return a boolean representation of the value for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase14getValueAsBoolEPKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValueAsBool2(this: *mut FiftyoneDegrees_Common_ResultsBase, propertyName: *const std_string) -> FiftyoneDegrees_Common_Value<bool>;
}

extern "C" {
    #[doc = " Get an integer representation of the value associated with the"]
    #[doc = " required property name. If the property name is not valid then 0"]
    #[doc = " is returned. Using a property which returns non-numeric"]
    #[doc = " characters will result in unexpected behavior."]
    #[doc = " @param propertyName string containing the property name"]
    #[doc = " @return an integer representation of the value for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase17getValueAsIntegerEPKc"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValueAsInteger(this: *mut FiftyoneDegrees_Common_ResultsBase, propertyName: *const ::std::os::raw::c_char) -> FiftyoneDegrees_Common_Value<::std::os::raw::c_int>;
}

extern "C" {
    #[doc = " Get an integer representation of the value associated with the"]
    #[doc = " required property name. If the property name is not valid then 0"]
    #[doc = " is returned. Using a property which returns non-numeric"]
    #[doc = " characters will result in unexpected behavior."]
    #[doc = " @param propertyName string containing the property name"]
    #[doc = " @return an integer representation of the value for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase17getValueAsIntegerERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValueAsInteger1(this: *mut FiftyoneDegrees_Common_ResultsBase, propertyName: *const std_string) -> FiftyoneDegrees_Common_Value<::std::os::raw::c_int>;
}

extern "C" {
    #[doc = " Get an integer representation of the value associated with the"]
    #[doc = " required property name. If the property name is not valid then 0"]
    #[doc = " is returned. Using a property which returns non-numeric"]
    #[doc = " characters will result in unexpected behavior."]
    #[doc = " @param propertyName string containing the property name"]
    #[doc = " @return an integer representation of the value for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase17getValueAsIntegerEPKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValueAsInteger2(this: *mut FiftyoneDegrees_Common_ResultsBase, propertyName: *const std_string) -> FiftyoneDegrees_Common_Value<::std::os::raw::c_int>;
}

extern "C" {
    #[doc = " Get a double representation of the value associated with the"]
    #[doc = " required property name. If the property name is not valid then 0"]
    #[doc = " is returned. Using a property which returns non-numeric"]
    #[doc = " characters will result in unexpected behavior."]
    #[doc = " @param propertyName string containing the property name"]
    #[doc = " @return a double representation of the value for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase16getValueAsDoubleEPKc"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValueAsDouble(this: *mut FiftyoneDegrees_Common_ResultsBase, propertyName: *const ::std::os::raw::c_char) -> FiftyoneDegrees_Common_Value<f64>;
}

extern "C" {
    #[doc = " Get a double representation of the value associated with the"]
    #[doc = " required property name. If the property name is not valid then 0"]
    #[doc = " is returned. Using a property which returns non-numeric"]
    #[doc = " characters will result in unexpected behavior."]
    #[doc = " @param propertyName string containing the property name"]
    #[doc = " @return a double representation of the value for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase16getValueAsDoubleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValueAsDouble1(this: *mut FiftyoneDegrees_Common_ResultsBase, propertyName: *const std_string) -> FiftyoneDegrees_Common_Value<f64>;
}

extern "C" {
    #[doc = " Get a double representation of the value associated with the"]
    #[doc = " required property name. If the property name is not valid then 0"]
    #[doc = " is returned. Using a property which returns non-numeric"]
    #[doc = " characters will result in unexpected behavior."]
    #[doc = " @param propertyName string containing the property name"]
    #[doc = " @return a double representation of the value for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase16getValueAsDoubleEPKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValueAsDouble2(this: *mut FiftyoneDegrees_Common_ResultsBase, propertyName: *const std_string) -> FiftyoneDegrees_Common_Value<f64>;
}

extern "C" {
    #[doc = " Get the index in the available properties for the property name"]
    #[doc = " provided."]
    #[doc = " @return 0 based index or -1 if not found"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase24getRequiredPropertyIndexEPKc"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getRequiredPropertyIndex(this: *mut FiftyoneDegrees_Common_ResultsBase, propertyName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Create a new instance of Results from the results structure"]
    #[doc = " provided."]
    #[doc = ""]
    #[doc = " This method should only be called from inside an engine's"]
    #[doc = " process method."]
    #[doc = " @param results pointer to the underlying results structure"]
    #[doc = " @param manager shared pointer to the manager which manages the"]
    #[doc = " data set used to create the results. This is needed for"]
    #[doc = " thread-safe operation, see local variable description for more"]
    #[doc = " info."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBaseC2EP31fiftyone_degrees_results_base_tNSt3__110shared_ptrI35fiftyone_degrees_resource_manager_tEE"]
    pub fn FiftyoneDegrees_Common_ResultsBase_ResultsBase(this: *mut FiftyoneDegrees_Common_ResultsBase, results: *mut fiftyoneDegreesResultsBase, manager: [u64; 2usize]);
}

impl FiftyoneDegrees_Common_ResultsBase {
    #[inline]
    pub unsafe fn getAvailableProperties(&mut self) -> ::std::os::raw::c_int { FiftyoneDegrees_Common_ResultsBase_getAvailableProperties(self) }
    #[inline]
    pub unsafe fn containsProperty(&mut self, propertyName: *const std_string) -> bool { FiftyoneDegrees_Common_ResultsBase_containsProperty(self, propertyName) }
    #[inline]
    pub unsafe fn getProperties(&mut self) -> [u64; 3usize] { FiftyoneDegrees_Common_ResultsBase_getProperties(self) }
    #[inline]
    pub unsafe fn getPropertyName(&mut self, requiredPropertyIndex: ::std::os::raw::c_int) -> std_string { FiftyoneDegrees_Common_ResultsBase_getPropertyName(self, requiredPropertyIndex) }
    #[inline]
    pub unsafe fn getValues(&mut self, propertyName: *const ::std::os::raw::c_char) -> u8 { FiftyoneDegrees_Common_ResultsBase_getValues(self, propertyName) }
    #[inline]
    pub unsafe fn getValues1(&mut self, propertyName: *const std_string) -> u8 { FiftyoneDegrees_Common_ResultsBase_getValues1(self, propertyName) }
    #[inline]
    pub unsafe fn getValues2(&mut self, propertyName: *const std_string) -> u8 { FiftyoneDegrees_Common_ResultsBase_getValues2(self, propertyName) }
    #[inline]
    pub unsafe fn getValues3(&mut self, requiredPropertyIndex: ::std::os::raw::c_int) -> u8 { FiftyoneDegrees_Common_ResultsBase_getValues3(self, requiredPropertyIndex) }
    #[inline]
    pub unsafe fn getValueAsString(&mut self, propertyName: *const ::std::os::raw::c_char) -> FiftyoneDegrees_Common_Value<std_string> { FiftyoneDegrees_Common_ResultsBase_getValueAsString(self, propertyName) }
    #[inline]
    pub unsafe fn getValueAsString1(&mut self, propertyName: *const std_string) -> FiftyoneDegrees_Common_Value<std_string> { FiftyoneDegrees_Common_ResultsBase_getValueAsString1(self, propertyName) }
    #[inline]
    pub unsafe fn getValueAsString2(&mut self, propertyName: *const std_string) -> FiftyoneDegrees_Common_Value<std_string> { FiftyoneDegrees_Common_ResultsBase_getValueAsString2(self, propertyName) }
    #[inline]
    pub unsafe fn getValueAsBool(&mut self, propertyName: *const ::std::os::raw::c_char) -> FiftyoneDegrees_Common_Value<bool> { FiftyoneDegrees_Common_ResultsBase_getValueAsBool(self, propertyName) }
    #[inline]
    pub unsafe fn getValueAsBool1(&mut self, propertyName: *const std_string) -> FiftyoneDegrees_Common_Value<bool> { FiftyoneDegrees_Common_ResultsBase_getValueAsBool1(self, propertyName) }
    #[inline]
    pub unsafe fn getValueAsBool2(&mut self, propertyName: *const std_string) -> FiftyoneDegrees_Common_Value<bool> { FiftyoneDegrees_Common_ResultsBase_getValueAsBool2(self, propertyName) }
    #[inline]
    pub unsafe fn getValueAsInteger(&mut self, propertyName: *const ::std::os::raw::c_char) -> FiftyoneDegrees_Common_Value<::std::os::raw::c_int> { FiftyoneDegrees_Common_ResultsBase_getValueAsInteger(self, propertyName) }
    #[inline]
    pub unsafe fn getValueAsInteger1(&mut self, propertyName: *const std_string) -> FiftyoneDegrees_Common_Value<::std::os::raw::c_int> { FiftyoneDegrees_Common_ResultsBase_getValueAsInteger1(self, propertyName) }
    #[inline]
    pub unsafe fn getValueAsInteger2(&mut self, propertyName: *const std_string) -> FiftyoneDegrees_Common_Value<::std::os::raw::c_int> { FiftyoneDegrees_Common_ResultsBase_getValueAsInteger2(self, propertyName) }
    #[inline]
    pub unsafe fn getValueAsDouble(&mut self, propertyName: *const ::std::os::raw::c_char) -> FiftyoneDegrees_Common_Value<f64> { FiftyoneDegrees_Common_ResultsBase_getValueAsDouble(self, propertyName) }
    #[inline]
    pub unsafe fn getValueAsDouble1(&mut self, propertyName: *const std_string) -> FiftyoneDegrees_Common_Value<f64> { FiftyoneDegrees_Common_ResultsBase_getValueAsDouble1(self, propertyName) }
    #[inline]
    pub unsafe fn getValueAsDouble2(&mut self, propertyName: *const std_string) -> FiftyoneDegrees_Common_Value<f64> { FiftyoneDegrees_Common_ResultsBase_getValueAsDouble2(self, propertyName) }
    #[inline]
    pub unsafe fn getRequiredPropertyIndex(&mut self, propertyName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int { FiftyoneDegrees_Common_ResultsBase_getRequiredPropertyIndex(self, propertyName) }
    #[inline]
    pub unsafe fn new(results: *mut fiftyoneDegreesResultsBase, manager: [u64; 2usize]) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_ResultsBase_ResultsBase(__bindgen_tmp.as_mut_ptr(), results, manager);
        __bindgen_tmp.assume_init()
    }
}

extern "C" {
    #[doc = " Free any memory associated with the results and release any"]
    #[doc = " resource handles."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBaseD1Ev"]
    pub fn FiftyoneDegrees_Common_ResultsBase_ResultsBase_destructor(this: *mut FiftyoneDegrees_Common_ResultsBase);
}

extern "C" {
    #[doc = " Get a string representation of the value associated with the"]
    #[doc = " required property index. If the index is not valid an empty"]
    #[doc = " string is returned. If the property relates to a list with more"]
    #[doc = " than one value then values are separated by '|' characters."]
    #[doc = " @param requiredPropertyIndex of the property required"]
    #[doc = " @return a string representation of the value for the property or"]
    #[doc = " an empty string"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase16getValueAsStringEi"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValueAsString3(this: *mut ::std::os::raw::c_void, requiredPropertyIndex: ::std::os::raw::c_int) -> FiftyoneDegrees_Common_Value<std_string>;
}

extern "C" {
    #[doc = " Get a boolean representation of the value associated with the"]
    #[doc = " required property index. If the property index is not valid then"]
    #[doc = " false is returned."]
    #[doc = " @param requiredPropertyIndex in the required properties"]
    #[doc = " @return a boolean representation of the value for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase14getValueAsBoolEi"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValueAsBool3(this: *mut ::std::os::raw::c_void, requiredPropertyIndex: ::std::os::raw::c_int) -> FiftyoneDegrees_Common_Value<bool>;
}

extern "C" {
    #[doc = " Get an integer representation of the value associated with the"]
    #[doc = " required property index. If the property index is not valid then"]
    #[doc = " 0 is returned. Using a property which returns non-numeric"]
    #[doc = " characters will result in unexpected behavior."]
    #[doc = " @param requiredPropertyIndex in the required properties"]
    #[doc = " @return an integer representation of the value for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase17getValueAsIntegerEi"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValueAsInteger3(this: *mut ::std::os::raw::c_void, requiredPropertyIndex: ::std::os::raw::c_int) -> FiftyoneDegrees_Common_Value<::std::os::raw::c_int>;
}

extern "C" {
    #[doc = " Get a double representation of the value associated with the"]
    #[doc = " required property index. If the property index is not valid then"]
    #[doc = " 0 is returned. Using a property which returns non-numeric"]
    #[doc = " characters will result in unexpected behavior."]
    #[doc = " @param requiredPropertyIndex in the required properties"]
    #[doc = " @return a double representation of the value for the property"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common11ResultsBase16getValueAsDoubleEi"]
    pub fn FiftyoneDegrees_Common_ResultsBase_getValueAsDouble3(this: *mut ::std::os::raw::c_void, requiredPropertyIndex: ::std::os::raw::c_int) -> FiftyoneDegrees_Common_Value<f64>;
}

#[repr(C)]
pub struct FiftyoneDegrees_Common_EngineBase__bindgen_vtable(::std::os::raw::c_void);

#[doc = " Encapsulates the engine class to be extended by engine"]
#[doc = " implementations. Common logic is contained in this base class to be"]
#[doc = " used by any extending classes."]
#[doc = ""]
#[doc = " An engine is constructed with a configuration, then used to process"]
#[doc = " evidence in order to return a set of results. It also exposes"]
#[doc = " methods to refresh the data using a new data set, and get properties"]
#[doc = " relating to the data set being used by the engine."]
#[doc = ""]
#[doc = " ## Usage Example"]
#[doc = ""]
#[doc = " ```"]
#[doc = " using namespace FiftyoneDegrees::Common;"]
#[doc = " ConfigBase *config;"]
#[doc = " RequiredPropertiesConfig *properties;"]
#[doc = " EvidenceBase *evidence;"]
#[doc = ""]
#[doc = " // Construct the engine"]
#[doc = " EngineBase *engine = new EngineBase(config, properties);"]
#[doc = ""]
#[doc = " // Process some evidence"]
#[doc = " ResultsBase *results = engine->processBase(evidence);"]
#[doc = ""]
#[doc = " // Do something with the results"]
#[doc = " // ..."]
#[doc = ""]
#[doc = " // Delete the results and the engine"]
#[doc = " delete results;"]
#[doc = " delete engine;"]
#[doc = " ```"]
#[repr(C)]
#[derive(Debug)]
pub struct FiftyoneDegrees_Common_EngineBase {
    pub vtable_: *const FiftyoneDegrees_Common_EngineBase__bindgen_vtable,
    #[doc = " Pointer to the configuration used to build the engine."] pub config: *mut FiftyoneDegrees_Common_ConfigBase,
    #[doc = " A shared pointer to the manager is passed around and referenced"]
    #[doc = "by all instances that hold open a resource handle. This acts as a"]
    #[doc = "counter to ensure that the pointer to the manager remains valid"]
    #[doc = "until the last handle is freed. The shared pointer also handles"]
    #[doc = "freeing the pointer once no references remain. See resource.h for"]
    #[doc = "more information."] pub manager: [u64; 2usize],
    #[doc = " Pointer to the properties which are going to be used."] pub requiredProperties: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig,
    #[doc = " Pointer to the meta data relating to the contents of the"]
    #[doc = "engine's data set."] pub metaData: *mut FiftyoneDegrees_Common_MetaData,
    #[doc = " License key used to update the data set. May be empty."] pub licenceKey: std_string,
    #[doc = " URL used to update the data set."] pub updateUrl: std_string,
    #[doc = " The default key to use when adding the results to a dictionary."] pub defaultDataKey: std_string,
    #[doc = " Keys which should be added to evidence."] pub keys: [u64; 3usize],
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_Common_EngineBase() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_EngineBase>(), 144usize, concat!("Size of: ", stringify!(FiftyoneDegrees_Common_EngineBase)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_EngineBase>(), 8usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_Common_EngineBase)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_EngineBase>())).config as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_EngineBase), "::", stringify!(config)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_EngineBase>())).manager as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_EngineBase), "::", stringify!(manager)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_EngineBase>())).requiredProperties as *const _ as usize }, 32usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_EngineBase), "::", stringify!(requiredProperties)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_EngineBase>())).metaData as *const _ as usize }, 40usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_EngineBase), "::", stringify!(metaData)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_EngineBase>())).licenceKey as *const _ as usize }, 48usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_EngineBase), "::", stringify!(licenceKey)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_EngineBase>())).updateUrl as *const _ as usize }, 72usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_EngineBase), "::", stringify!(updateUrl)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_EngineBase>())).defaultDataKey as *const _ as usize }, 96usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_EngineBase), "::", stringify!(defaultDataKey)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_EngineBase>())).keys as *const _ as usize }, 120usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_EngineBase), "::", stringify!(keys)));
}

extern "C" {
    #[doc = " Sets the license key to be used when updating the data set."]
    #[doc = " @param licenseKey to set"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10EngineBase13setLicenseKeyERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn FiftyoneDegrees_Common_EngineBase_setLicenseKey(this: *mut FiftyoneDegrees_Common_EngineBase, licenseKey: *const std_string);
}

extern "C" {
    #[doc = " Sets the URL to be used when updating the data set."]
    #[doc = " @param updateUrl to set"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10EngineBase16setDataUpdateUrlERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn FiftyoneDegrees_Common_EngineBase_setDataUpdateUrl(this: *mut FiftyoneDegrees_Common_EngineBase, updateUrl: *const std_string);
}

extern "C" {
    #[doc = " Return the a pointer to the meta data class which contains meta"]
    #[doc = " data for the properties, values, profiles and components that"]
    #[doc = " exist within the engine."]
    #[doc = " @return pointer to the meta data class"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10EngineBase11getMetaDataEv"]
    pub fn FiftyoneDegrees_Common_EngineBase_getMetaData(this: *mut FiftyoneDegrees_Common_EngineBase) -> *mut FiftyoneDegrees_Common_MetaData;
}

extern "C" {
    #[doc = " Gets whether or not automatic updates are enabled. If they are,"]
    #[doc = " then this tells an external service that it should update the"]
    #[doc = " data set."]
    #[doc = " @return true if updates are enabled"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10EngineBase26getAutomaticUpdatesEnabledEv"]
    pub fn FiftyoneDegrees_Common_EngineBase_getAutomaticUpdatesEnabled(this: *mut FiftyoneDegrees_Common_EngineBase) -> bool;
}

extern "C" {
    #[doc = " Get the list of keys which the engine accepts as evidence. This"]
    #[doc = " is a pointer to an internal vector should not (and cannot) be"]
    #[doc = " freed."]
    #[doc = " @return pointer to the list of evidence keys"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10EngineBase7getKeysEv"]
    pub fn FiftyoneDegrees_Common_EngineBase_getKeys(this: *mut FiftyoneDegrees_Common_EngineBase) -> *mut [u64; 3usize];
}

extern "C" {
    #[doc = " Get whether or not the engine was compiled with thread-safe"]
    #[doc = " support. If it was not then certain precautions should be taken."]
    #[doc = " @return true if the engine is thread-safe"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10EngineBase15getIsThreadSafeEv"]
    pub fn FiftyoneDegrees_Common_EngineBase_getIsThreadSafe(this: *mut FiftyoneDegrees_Common_EngineBase) -> bool;
}

extern "C" {
    #[doc = " Initialise the override keys which are used by this engine."]
    #[doc = " These are additional pieces of evidence which should be passed"]
    #[doc = " in if available."]
    #[doc = " @param overrideProperties to get the keys from"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10EngineBase16initOverrideKeysEP56fiftyone_degrees_array_fiftyoneDegreesOverrideProperty_t"]
    pub fn FiftyoneDegrees_Common_EngineBase_initOverrideKeys(this: *mut FiftyoneDegrees_Common_EngineBase, overrideProperties: *mut fiftyoneDegreesOverridePropertyArray);
}

extern "C" {
    #[doc = " Adds a key to the list of keys which should be added as evidence."]
    #[doc = " This is called by the key init methods."]
    #[doc = " @param key to add"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10EngineBase6addKeyENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn FiftyoneDegrees_Common_EngineBase_addKey(this: *mut FiftyoneDegrees_Common_EngineBase, key: std_string);
}

extern "C" {
    #[doc = " Construct a new instance of the engine class with the"]
    #[doc = " configuration and properties provided."]
    #[doc = " @param config used to build the engine"]
    #[doc = " @param properties the properties expected to be fetched"]
    #[doc = " from results"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10EngineBaseC2EPNS0_10ConfigBaseEPNS0_24RequiredPropertiesConfigE"]
    pub fn FiftyoneDegrees_Common_EngineBase_EngineBase(this: *mut FiftyoneDegrees_Common_EngineBase, config: *mut FiftyoneDegrees_Common_ConfigBase, properties: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig);
}

impl FiftyoneDegrees_Common_EngineBase {
    #[inline]
    pub unsafe fn setLicenseKey(&mut self, licenseKey: *const std_string) { FiftyoneDegrees_Common_EngineBase_setLicenseKey(self, licenseKey) }
    #[inline]
    pub unsafe fn setDataUpdateUrl(&mut self, updateUrl: *const std_string) { FiftyoneDegrees_Common_EngineBase_setDataUpdateUrl(self, updateUrl) }
    #[inline]
    pub unsafe fn getMetaData(&mut self) -> *mut FiftyoneDegrees_Common_MetaData { FiftyoneDegrees_Common_EngineBase_getMetaData(self) }
    #[inline]
    pub unsafe fn getAutomaticUpdatesEnabled(&mut self) -> bool { FiftyoneDegrees_Common_EngineBase_getAutomaticUpdatesEnabled(self) }
    #[inline]
    pub unsafe fn getKeys(&mut self) -> *mut [u64; 3usize] { FiftyoneDegrees_Common_EngineBase_getKeys(self) }
    #[inline]
    pub unsafe fn getIsThreadSafe(&mut self) -> bool { FiftyoneDegrees_Common_EngineBase_getIsThreadSafe(self) }
    #[inline]
    pub unsafe fn initOverrideKeys(&mut self, overrideProperties: *mut fiftyoneDegreesOverridePropertyArray) { FiftyoneDegrees_Common_EngineBase_initOverrideKeys(self, overrideProperties) }
    #[inline]
    pub unsafe fn addKey(&mut self, key: std_string) { FiftyoneDegrees_Common_EngineBase_addKey(self, key) }
    #[inline]
    pub unsafe fn new(config: *mut FiftyoneDegrees_Common_ConfigBase, properties: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_EngineBase_EngineBase(__bindgen_tmp.as_mut_ptr(), config, properties);
        __bindgen_tmp.assume_init()
    }
}

extern "C" {
    #[doc = " Frees the meta data class and the data set resource created by"]
    #[doc = " the extending class."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10EngineBaseD1Ev"]
    pub fn FiftyoneDegrees_Common_EngineBase_EngineBase_destructor(this: *mut FiftyoneDegrees_Common_EngineBase);
}

extern "C" {
    #[doc = " Get the URL to be used when updating the data file, or an empty"]
    #[doc = " string if this is not set."]
    #[doc = " @return URL to download new data file from"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10EngineBase16getDataUpdateUrlEv"]
    pub fn FiftyoneDegrees_Common_EngineBase_getDataUpdateUrl(this: *mut ::std::os::raw::c_void) -> std_string;
}

extern "C" {
    #[doc = " Gets a string from a strings collection, and appends to a stream."]
    #[doc = " @param stream to append the string to"]
    #[doc = " @param strings collection to get the string from"]
    #[doc = " @param offset of the string in the collection"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10EngineBase12appendStringERNSt3__118basic_stringstreamIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEP29fiftyone_degrees_collection_tj"]
    pub fn FiftyoneDegrees_Common_EngineBase_appendString(this: *mut ::std::os::raw::c_void, stream: *mut std_stringstream, strings: *mut fiftyoneDegreesCollection, offset: u32);
}

extern "C" {
    #[doc = " Initialise the HTTP header keys which are used by this engine."]
    #[doc = " These are the pieces of evidence which should be passed in if"]
    #[doc = " available."]
    #[doc = " @param uniqueHeaders to get the keys from"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common10EngineBase18initHttpHeaderKeysEP46fiftyone_degrees_array_fiftyoneDegreesHeader_t"]
    pub fn FiftyoneDegrees_Common_EngineBase_initHttpHeaderKeys(this: *mut ::std::os::raw::c_void, uniqueHeaders: *mut fiftyoneDegreesHeaders);
}

#[doc = " C++ class wrapper for the #fiftyoneDegreesCollectionConfig structure."]
#[doc = " See collection.h."]
#[doc = ""]
#[doc = " Configuration options are set using setter methods and fetched using"]
#[doc = " corresponding getter methods. The names are self explanatory."]
#[doc = ""]
#[doc = " ## Usage Example"]
#[doc = ""]
#[doc = " ```"]
#[doc = " FiftyoneDegrees::Common::CollectionConfig *config;"]
#[doc = ""]
#[doc = " // Configure a collection with a capacity of 100, with 20 preloaded"]
#[doc = " // items, which can be used by 4 threads concurrently"]
#[doc = " config->setCapacity(100);"]
#[doc = " config->setLoaded(20);"]
#[doc = " config->setConcurrency(4);"]
#[doc = " ```"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FiftyoneDegrees_Common_CollectionConfig {
    #[doc = " Pointer to the underlying C configuration structure."] pub config: *mut fiftyoneDegreesCollectionConfig,
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_Common_CollectionConfig() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_CollectionConfig>(), 8usize, concat!("Size of: ", stringify!(FiftyoneDegrees_Common_CollectionConfig)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_CollectionConfig>(), 8usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_Common_CollectionConfig)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_Common_CollectionConfig>())).config as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_Common_CollectionConfig), "::", stringify!(config)));
}

extern "C" {
    #[doc = " Set the number of items the cache should store, 0 for no cache."]
    #[doc = " @param capacity to set"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16CollectionConfig11setCapacityEj"]
    pub fn FiftyoneDegrees_Common_CollectionConfig_setCapacity(this: *mut FiftyoneDegrees_Common_CollectionConfig, capacity: u32);
}

extern "C" {
    #[doc = " Set the expected number of concurrent requests."]
    #[doc = " @param concurrency to set"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16CollectionConfig14setConcurrencyEt"]
    pub fn FiftyoneDegrees_Common_CollectionConfig_setConcurrency(this: *mut FiftyoneDegrees_Common_CollectionConfig, concurrency: u16);
}

extern "C" {
    #[doc = " Set the number of items to load into memory from the start of"]
    #[doc = "  the collection."]
    #[doc = " @param loaded to set"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16CollectionConfig9setLoadedEj"]
    pub fn FiftyoneDegrees_Common_CollectionConfig_setLoaded(this: *mut FiftyoneDegrees_Common_CollectionConfig, loaded: u32);
}

extern "C" {
    #[doc = " Get the number of items the cache should store, 0 for no cache."]
    #[doc = " @return capacity value"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16CollectionConfig11getCapacityEv"]
    pub fn FiftyoneDegrees_Common_CollectionConfig_getCapacity(this: *mut FiftyoneDegrees_Common_CollectionConfig) -> u32;
}

extern "C" {
    #[doc = " Get the expected number of concurrent requests."]
    #[doc = " @return concurrency value"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16CollectionConfig14getConcurrencyEv"]
    pub fn FiftyoneDegrees_Common_CollectionConfig_getConcurrency(this: *mut FiftyoneDegrees_Common_CollectionConfig) -> u16;
}

extern "C" {
    #[doc = " Get the number of items to load into memory from the start of"]
    #[doc = " the collection."]
    #[doc = " @return loaded value"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16CollectionConfig9getLoadedEv"]
    pub fn FiftyoneDegrees_Common_CollectionConfig_getLoaded(this: *mut FiftyoneDegrees_Common_CollectionConfig) -> u32;
}

extern "C" {
    #[doc = " Get a pointer to the underlying configuration structure."]
    #[doc = " @return C structure pointer"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16CollectionConfig9getConfigEv"]
    pub fn FiftyoneDegrees_Common_CollectionConfig_getConfig(this: *mut FiftyoneDegrees_Common_CollectionConfig) -> *mut fiftyoneDegreesCollectionConfig;
}

extern "C" {
    #[doc = " Construct a new instance of CollectionConfig with the default"]
    #[doc = " configuration. This method does not set the internal config"]
    #[doc = " structure, so an extending class must do this if calling this"]
    #[doc = " constructor."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16CollectionConfigC1Ev"]
    pub fn FiftyoneDegrees_Common_CollectionConfig_CollectionConfig(this: *mut FiftyoneDegrees_Common_CollectionConfig);
}

extern "C" {
    #[doc = " Construct a new instance of CollectionConfig which references an"]
    #[doc = " existing instance of the C structure."]
    #[doc = " @param config pointer to existing collection configuration"]
    #[doc = " structure"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees6Common16CollectionConfigC1EP36fiftyone_degrees_collection_config_t"]
    pub fn FiftyoneDegrees_Common_CollectionConfig_CollectionConfig1(this: *mut FiftyoneDegrees_Common_CollectionConfig, config: *mut fiftyoneDegreesCollectionConfig);
}

impl FiftyoneDegrees_Common_CollectionConfig {
    #[inline]
    pub unsafe fn setCapacity(&mut self, capacity: u32) { FiftyoneDegrees_Common_CollectionConfig_setCapacity(self, capacity) }
    #[inline]
    pub unsafe fn setConcurrency(&mut self, concurrency: u16) { FiftyoneDegrees_Common_CollectionConfig_setConcurrency(self, concurrency) }
    #[inline]
    pub unsafe fn setLoaded(&mut self, loaded: u32) { FiftyoneDegrees_Common_CollectionConfig_setLoaded(self, loaded) }
    #[inline]
    pub unsafe fn getCapacity(&mut self) -> u32 { FiftyoneDegrees_Common_CollectionConfig_getCapacity(self) }
    #[inline]
    pub unsafe fn getConcurrency(&mut self) -> u16 { FiftyoneDegrees_Common_CollectionConfig_getConcurrency(self) }
    #[inline]
    pub unsafe fn getLoaded(&mut self) -> u32 { FiftyoneDegrees_Common_CollectionConfig_getLoaded(self) }
    #[inline]
    pub unsafe fn getConfig(&mut self) -> *mut fiftyoneDegreesCollectionConfig { FiftyoneDegrees_Common_CollectionConfig_getConfig(self) }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_CollectionConfig_CollectionConfig(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(config: *mut fiftyoneDegreesCollectionConfig) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_Common_CollectionConfig_CollectionConfig1(__bindgen_tmp.as_mut_ptr(), config);
        __bindgen_tmp.assume_init()
    }
}

#[doc = " Device detection specific evidence class containing evidence to be"]
#[doc = " processed by a device detection engine."]
#[doc = " This wraps a dynamically generated C evidence structure."]
#[doc = ""]
#[doc = " The class extends the EvidenceBase class to implement the"]
#[doc = " EvidenceBase::isRelevant method to return for device detection"]
#[doc = " specific evidence keys."]
#[doc = ""]
#[doc = " ## Usage Example"]
#[doc = ""]
#[doc = " ```"]
#[doc = " using namespace FiftyoneDegrees::DeviceDetection;"]
#[doc = " EngineDeviceDetection *engine;"]
#[doc = ""]
#[doc = " // Construct a new evidence instance"]
#[doc = " EvidenceDeviceDetection *evidence = new EvidenceDeviceDetection();"]
#[doc = ""]
#[doc = " // Add an item of evidence"]
#[doc = " evidence->operator[](\"evidence key\") = \"evidence value\";"]
#[doc = ""]
#[doc = " // Give the evidence to an engine for processing"]
#[doc = " ResultsDeviceDetection *results = engine->processDeviceDetection("]
#[doc = "     evidence);"]
#[doc = ""]
#[doc = " // Do something with the results (and delete them once finished)"]
#[doc = " // ..."]
#[doc = ""]
#[doc = " // Delete the evidence"]
#[doc = " delete evidence;"]
#[doc = " ```"]
#[repr(C)]
#[derive(Debug)]
pub struct FiftyoneDegrees_DeviceDetection_EvidenceDeviceDetection {
    pub _base: FiftyoneDegrees_Common_EvidenceBase,
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_DeviceDetection_EvidenceDeviceDetection() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_DeviceDetection_EvidenceDeviceDetection>(), 40usize, concat!("Size of: ", stringify!(FiftyoneDegrees_DeviceDetection_EvidenceDeviceDetection)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_DeviceDetection_EvidenceDeviceDetection>(), 8usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_DeviceDetection_EvidenceDeviceDetection)));
}

extern "C" {
    #[doc = " @}"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection23EvidenceDeviceDetection10isRelevantE34e_fiftyone_degrees_evidence_prefix"]
    pub fn FiftyoneDegrees_DeviceDetection_EvidenceDeviceDetection_isRelevant(this: *mut ::std::os::raw::c_void, prefix: fiftyoneDegreesEvidencePrefix) -> bool;
}

#[doc = " C++ class wrapper for the #fiftyoneDegreesConfigDeviceDetection"]
#[doc = " configuration structure. See config-dd.h."]
#[doc = ""]
#[doc = " This extends the ConfigBase class to add device detection specific"]
#[doc = " configuration options."]
#[doc = ""]
#[doc = " Configuration options are set using setter methods and fetched using"]
#[doc = " corresponding getter methods. The names are self explanatory."]
#[doc = ""]
#[doc = " ## Usage Example"]
#[doc = ""]
#[doc = " ```"]
#[doc = " using namespace FiftyoneDegrees::Common;"]
#[doc = " using namespace FiftyoneDegrees::DeviceDetection;"]
#[doc = " RequiredPropertiesConfig *properties;"]
#[doc = ""]
#[doc = " // Construct a new configuration"]
#[doc = " ConfigDeviceDetection *config = new ConfigDeviceDetection();"]
#[doc = ""]
#[doc = " // Configure the engine to return the matched substrings of a"]
#[doc = " User-Agent in the results up to a maximum of 500 characters"]
#[doc = " config->setUpdateMatchedUserAgent(true);"]
#[doc = " config->setMaxMatchedUserAgentLength(500);"]
#[doc = ""]
#[doc = " // Use the configuration when constructing an engine"]
#[doc = " EngineDeviceDetection *engine = new EngineDeviceDetection("]
#[doc = "     config,"]
#[doc = "     properties);"]
#[doc = " ```ConfigHash"]
#[repr(C)]
#[derive(Debug)]
pub struct FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection {
    pub _base: FiftyoneDegrees_Common_ConfigBase,
    #[doc = " The underlying configuration structure"] pub config: *mut fiftyoneDegreesConfigDeviceDetection,
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection>(), 48usize, concat!("Size of: ", stringify!(FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection>(), 8usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection>())).config as *const _ as usize }, 40usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection), "::", stringify!(config)));
}

extern "C" {
    #[doc = " Set whether or not the matched User-Agent should be constructed."]
    #[doc = " This is usually only needed for debugging User-Agents. If this"]
    #[doc = " is set to true then #setMaxMatchedUserAgentLength must be used"]
    #[doc = " to provide the number of characters to record."]
    #[doc = " @param update should update the matched User-Agent"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection21ConfigDeviceDetection25setUpdateMatchedUserAgentEb"]
    pub fn FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection_setUpdateMatchedUserAgent(this: *mut FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection, update: bool);
}

extern "C" {
    #[doc = " Set the maximum length string to be allocated to the matched"]
    #[doc = " User-Agent. This is only required if #setUpdateMatchedUserAgent"]
    #[doc = " is set to true."]
    #[doc = " @param length to set"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection21ConfigDeviceDetection28setMaxMatchedUserAgentLengthEi"]
    pub fn FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection_setMaxMatchedUserAgentLength(this: *mut FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection, length: ::std::os::raw::c_int);
}

extern "C" {
    #[doc = " Set whether there should be at least one matched hash node (or"]
    #[doc = " substring) in order for the results to be considered valid. By"]
    #[doc = " default, this is false."]
    #[doc = " @param allow true if results with no matched hash nodes"]
    #[doc = " should be considered valid"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection21ConfigDeviceDetection17setAllowUnmatchedEb"]
    pub fn FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection_setAllowUnmatched(this: *mut FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection, allow: bool);
}

extern "C" {
    #[doc = " Gets whether the characters matched during processing should be"]
    #[doc = " stored in results."]
    #[doc = " @return true if the characters should be available, otherwise"]
    #[doc = " false."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection21ConfigDeviceDetection25getUpdateMatchedUserAgentEv"]
    pub fn FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection_getUpdateMatchedUserAgent(this: *mut FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection) -> bool;
}

extern "C" {
    #[doc = " If the matched User-Agent characters should be stored the"]
    #[doc = " maximum number which should be available."]
    #[doc = " @return the number of characters to store if enabled, otherwise"]
    #[doc = " 0."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection21ConfigDeviceDetection28getMaxMatchedUserAgentLengthEv"]
    pub fn FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection_getMaxMatchedUserAgentLength(this: *mut FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Get whether there should be at least one matched hash node (or"]
    #[doc = " substring) in order for the results to be considered valid. By"]
    #[doc = " default, this is false."]
    #[doc = " @return true if results with no matched hash nodes should be"]
    #[doc = " considered valid"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection21ConfigDeviceDetection17getAllowUnmatchedEv"]
    pub fn FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection_getAllowUnmatched(this: *mut FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection) -> bool;
}

extern "C" {
    #[doc = " @copydoc Common::ConfigBase::ConfigBase"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection21ConfigDeviceDetectionC1EP41fiftyone_degrees_config_device_detecton_t"]
    pub fn FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection_ConfigDeviceDetection(this: *mut FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection, config: *mut fiftyoneDegreesConfigDeviceDetection);
}

impl FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection {
    #[inline]
    pub unsafe fn setUpdateMatchedUserAgent(&mut self, update: bool) { FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection_setUpdateMatchedUserAgent(self, update) }
    #[inline]
    pub unsafe fn setMaxMatchedUserAgentLength(&mut self, length: ::std::os::raw::c_int) { FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection_setMaxMatchedUserAgentLength(self, length) }
    #[inline]
    pub unsafe fn setAllowUnmatched(&mut self, allow: bool) { FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection_setAllowUnmatched(self, allow) }
    #[inline]
    pub unsafe fn getUpdateMatchedUserAgent(&mut self) -> bool { FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection_getUpdateMatchedUserAgent(self) }
    #[inline]
    pub unsafe fn getMaxMatchedUserAgentLength(&mut self) -> ::std::os::raw::c_int { FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection_getMaxMatchedUserAgentLength(self) }
    #[inline]
    pub unsafe fn getAllowUnmatched(&mut self) -> bool { FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection_getAllowUnmatched(self) }
    #[inline]
    pub unsafe fn new(config: *mut fiftyoneDegreesConfigDeviceDetection) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection_ConfigDeviceDetection(__bindgen_tmp.as_mut_ptr(), config);
        __bindgen_tmp.assume_init()
    }
}

#[doc = " Encapsulates the results of a device detection engine's processing."]
#[doc = " The class is constructed using an instance of a C"]
#[doc = " #fiftyoneDegreesResultsDeviceDetection structure which are then"]
#[doc = " referenced to return associated values and metrics. Any memory used"]
#[doc = " by the results is freed by the extending class."]
#[doc = ""]
#[doc = " Additional get methods are included on top of the base methods to"]
#[doc = " return device detection specific metrics."]
#[doc = ""]
#[doc = " Results instances should only be created by an Engine."]
#[doc = ""]
#[doc = " The key used to get the value for a property can be either the name"]
#[doc = " of the property, or the index of the property in the required"]
#[doc = " properties structure."]
#[doc = ""]
#[doc = " Results instances should only be created by a Engine."]
#[doc = ""]
#[doc = " ## Usage Example"]
#[doc = ""]
#[doc = " ```"]
#[doc = " using namespace FiftyoneDegrees::DeviceDetection;"]
#[doc = " ResultsDeviceDetection *results;"]
#[doc = ""]
#[doc = " // Iterate over all User-Agent indexes"]
#[doc = " for (int i = 0; i < results->getUserAgents(); i++) {"]
#[doc = ""]
#[doc = "     // Get the matched substrings of the User-Agent"]
#[doc = "     string matchedUserAgent = results->getUserAgent(i);"]
#[doc = ""]
#[doc = "     // Do something with the string"]
#[doc = "     // ..."]
#[doc = " }"]
#[doc = ""]
#[doc = " // Get the device id for the device"]
#[doc = " string deviceId = results->getDeviceId();"]
#[doc = ""]
#[doc = " // Delete the results"]
#[doc = " delete results;"]
#[doc = " ```"]
#[repr(C)]
#[derive(Debug)]
pub struct FiftyoneDegrees_DeviceDetection_ResultsDeviceDetection {
    pub _base: FiftyoneDegrees_Common_ResultsBase,
    #[doc = " The underlying results structure"] pub results: *mut fiftyoneDegreesResultsDeviceDetection,
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_DeviceDetection_ResultsDeviceDetection() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_DeviceDetection_ResultsDeviceDetection>(), 40usize, concat!("Size of: ", stringify!(FiftyoneDegrees_DeviceDetection_ResultsDeviceDetection)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_DeviceDetection_ResultsDeviceDetection>(), 8usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_DeviceDetection_ResultsDeviceDetection)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_DeviceDetection_ResultsDeviceDetection>())).results as *const _ as usize }, 32usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_DeviceDetection_ResultsDeviceDetection), "::", stringify!(results)));
}

extern "C" {
    #[doc = " @copydoc Common::ResultsBase::ResultsBase"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection22ResultsDeviceDetectionC2EP43fiftyone_degrees_results_device_detection_tNSt3__110shared_ptrI35fiftyone_degrees_resource_manager_tEE"]
    pub fn FiftyoneDegrees_DeviceDetection_ResultsDeviceDetection_ResultsDeviceDetection(this: *mut FiftyoneDegrees_DeviceDetection_ResultsDeviceDetection, results: *mut fiftyoneDegreesResultsDeviceDetection, manager: [u64; 2usize]);
}

impl FiftyoneDegrees_DeviceDetection_ResultsDeviceDetection {
    #[inline]
    pub unsafe fn new(results: *mut fiftyoneDegreesResultsDeviceDetection, manager: [u64; 2usize]) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_DeviceDetection_ResultsDeviceDetection_ResultsDeviceDetection(__bindgen_tmp.as_mut_ptr(), results, manager);
        __bindgen_tmp.assume_init()
    }
}

#[doc = " Encapsulates the device detection engine class to be extended by"]
#[doc = " device detection engine implementations."]
#[doc = " Device detection specific logic is contained in this class to be"]
#[doc = " used by any extending classes."]
#[doc = ""]
#[doc = " An engine is constructed with a configuration, then used to process"]
#[doc = " evidence in order to return a set of results. It also exposes"]
#[doc = " methods to refresh the data using a new data set, and get properties"]
#[doc = " relating to the data set being used by the engine."]
#[doc = ""]
#[doc = " ## Usage Example"]
#[doc = ""]
#[doc = " ```"]
#[doc = " using namespace FiftyoneDegrees::Common;"]
#[doc = " using namespace FiftyoneDegrees::DeviceDetection;"]
#[doc = " ConfigDeviceDetection *config;"]
#[doc = " RequiredPropertiesConfig *properties;"]
#[doc = " EvidenceDeviceDetection *evidence;"]
#[doc = ""]
#[doc = " // Construct the engine"]
#[doc = " EngineDeviceDetection *engine = new EngineDeviceDetection("]
#[doc = "     config,"]
#[doc = "     properties);"]
#[doc = ""]
#[doc = " // Process some evidence"]
#[doc = " ResultsDeviceDetection *results = engine->processDeviceDetection("]
#[doc = "     evidence);"]
#[doc = ""]
#[doc = " // Or just process a single User-Agent string"]
#[doc = " ResultsDeviceDetection *results = engine->processDeviceDetection("]
#[doc = "     \"some User-Agent\");"]
#[doc = ""]
#[doc = " // Do something with the results"]
#[doc = " // ..."]
#[doc = ""]
#[doc = " // Delete the results and the engine"]
#[doc = " delete results;"]
#[doc = " delete engine;"]
#[doc = " ```"]
#[repr(C)]
#[derive(Debug)]
pub struct FiftyoneDegrees_DeviceDetection_EngineDeviceDetection {
    pub _base: FiftyoneDegrees_Common_EngineBase,
}

extern "C" {
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection21EngineDeviceDetection21defaultElementDataKeyE"]
    pub static mut FiftyoneDegrees_DeviceDetection_EngineDeviceDetection_defaultElementDataKey: std_string;
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_DeviceDetection_EngineDeviceDetection() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_DeviceDetection_EngineDeviceDetection>(), 144usize, concat!("Size of: ", stringify!(FiftyoneDegrees_DeviceDetection_EngineDeviceDetection)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_DeviceDetection_EngineDeviceDetection>(), 8usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_DeviceDetection_EngineDeviceDetection)));
}

extern "C" {
    #[doc = " @copydoc Common::EngineBase::EngineBase"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection21EngineDeviceDetectionC2EPNS0_21ConfigDeviceDetectionEPNS_6Common24RequiredPropertiesConfigE"]
    pub fn FiftyoneDegrees_DeviceDetection_EngineDeviceDetection_EngineDeviceDetection(this: *mut FiftyoneDegrees_DeviceDetection_EngineDeviceDetection, config: *mut FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection, properties: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig);
}

impl FiftyoneDegrees_DeviceDetection_EngineDeviceDetection {
    #[inline]
    pub unsafe fn new(config: *mut FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection, properties: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_DeviceDetection_EngineDeviceDetection_EngineDeviceDetection(__bindgen_tmp.as_mut_ptr(), config, properties);
        __bindgen_tmp.assume_init()
    }
}

extern "C" {
    #[doc = " Processes the User-Agent provided and returns the result."]
    #[doc = " @param userAgent to process. This is equivalent to processing"]
    #[doc = " the string as an item of evidence with the User-Agent header key."]
    #[doc = " @return a new results instance with the values for all requested"]
    #[doc = " properties"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection21EngineDeviceDetection22processDeviceDetectionERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn FiftyoneDegrees_DeviceDetection_EngineDeviceDetection_processDeviceDetection2(this: *mut ::std::os::raw::c_void, userAgent: *mut std_string) -> *mut FiftyoneDegrees_DeviceDetection_ResultsDeviceDetection;
}

extern "C" {
    #[doc = " Initialise the engine with the data set provided. This is the"]
    #[doc = " data set which carries out all the processing in the engine."]
    #[doc = " @param dataSet pointer to the data used by the engine"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection21EngineDeviceDetection4initEP43fiftyone_degrees_dataset_device_detection_t"]
    pub fn FiftyoneDegrees_DeviceDetection_EngineDeviceDetection_init(this: *mut ::std::os::raw::c_void, dataSet: *mut fiftyoneDegreesDataSetDeviceDetection);
}

#[doc = " C++ class wrapper for the #fiftyoneDegreesConfigHash"]
#[doc = " configuration structure. See hash.h."]
#[doc = ""]
#[doc = " This extends the ConfigDeviceDetection class to add Hash"]
#[doc = " specific configuration options."]
#[doc = ""]
#[doc = " Configuration options are set using setter methods and fetched"]
#[doc = " using corresponding getter methods. The names are self"]
#[doc = " explanatory."]
#[doc = ""]
#[doc = " ## Usage Example"]
#[doc = ""]
#[doc = " ```"]
#[doc = " using namespace FiftyoneDegrees::Common;"]
#[doc = " using namespace FiftyoneDegrees::DeviceDetection::Hash;"]
#[doc = " string dataFilePath;"]
#[doc = " RequiredPropertiesConfig *properties;"]
#[doc = ""]
#[doc = " // Construct a new configuration"]
#[doc = " ConfigHash *config = new ConfigHash();"]
#[doc = ""]
#[doc = " // Configure the engine to load the entire data set into memory"]
#[doc = " // for maximum performance, and set the maximum drift and"]
#[doc = " // difference to allow when finding substring hashes"]
#[doc = " config->setMaxPerformance();"]
#[doc = " config->setDrift(2);"]
#[doc = " config->setDifference(10);"]
#[doc = ""]
#[doc = " // Use the configuration when constructing an engine"]
#[doc = " EngineHash *engine = new EngineHash("]
#[doc = "     dataFilePath,"]
#[doc = "     config,"]
#[doc = "     properties);"]
#[doc = " ```"]
#[repr(C)]
#[derive(Debug)]
pub struct FiftyoneDegrees_DeviceDetection_Hash_ConfigHash {
    pub _base: FiftyoneDegrees_DeviceDetection_ConfigDeviceDetection,
    #[doc = " The underlying configuration structure"] pub config: fiftyoneDegreesConfigHash,
    #[doc = " The underlying strings configuration structure"] pub strings: FiftyoneDegrees_Common_CollectionConfig,
    #[doc = " The underlying properties configuration structure"] pub properties: FiftyoneDegrees_Common_CollectionConfig,
    #[doc = " The underlying values configuration structure"] pub values: FiftyoneDegrees_Common_CollectionConfig,
    #[doc = " The underlying profiles configuration structure"] pub profiles: FiftyoneDegrees_Common_CollectionConfig,
    #[doc = " The underlying nodes configuration structure"] pub nodes: FiftyoneDegrees_Common_CollectionConfig,
    #[doc = " The underlying profile offsets configuration structure"] pub profileOffsets: FiftyoneDegrees_Common_CollectionConfig,
    #[doc = " The underlying data set maps configuration structure"] pub maps: FiftyoneDegrees_Common_CollectionConfig,
    #[doc = " The underlying components configuration structure"] pub components: FiftyoneDegrees_Common_CollectionConfig,
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_DeviceDetection_Hash_ConfigHash() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_DeviceDetection_Hash_ConfigHash>(), 280usize, concat!("Size of: ", stringify!(FiftyoneDegrees_DeviceDetection_Hash_ConfigHash)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_DeviceDetection_Hash_ConfigHash>(), 8usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_DeviceDetection_Hash_ConfigHash)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_DeviceDetection_Hash_ConfigHash>())).config as *const _ as usize }, 48usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_DeviceDetection_Hash_ConfigHash), "::", stringify!(config)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_DeviceDetection_Hash_ConfigHash>())).strings as *const _ as usize }, 216usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_DeviceDetection_Hash_ConfigHash), "::", stringify!(strings)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_DeviceDetection_Hash_ConfigHash>())).properties as *const _ as usize }, 224usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_DeviceDetection_Hash_ConfigHash), "::", stringify!(properties)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_DeviceDetection_Hash_ConfigHash>())).values as *const _ as usize }, 232usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_DeviceDetection_Hash_ConfigHash), "::", stringify!(values)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_DeviceDetection_Hash_ConfigHash>())).profiles as *const _ as usize }, 240usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_DeviceDetection_Hash_ConfigHash), "::", stringify!(profiles)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_DeviceDetection_Hash_ConfigHash>())).nodes as *const _ as usize }, 248usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_DeviceDetection_Hash_ConfigHash), "::", stringify!(nodes)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_DeviceDetection_Hash_ConfigHash>())).profileOffsets as *const _ as usize }, 256usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_DeviceDetection_Hash_ConfigHash), "::", stringify!(profileOffsets)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_DeviceDetection_Hash_ConfigHash>())).maps as *const _ as usize }, 264usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_DeviceDetection_Hash_ConfigHash), "::", stringify!(maps)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_DeviceDetection_Hash_ConfigHash>())).components as *const _ as usize }, 272usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_DeviceDetection_Hash_ConfigHash), "::", stringify!(components)));
}

extern "C" {
    #[doc = " Set the collections to use the high performance"]
    #[doc = " configuration."]
    #[doc = " See #fiftyoneDegreesHashHighPerformanceConfig"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash18setHighPerformanceEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setHighPerformance(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash);
}

extern "C" {
    #[doc = " Set the collections to use the balanced configuration."]
    #[doc = " See #fiftyoneDegreesHashBalancedConfig"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash11setBalancedEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setBalanced(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash);
}

extern "C" {
    #[doc = " Set the collections to use the balanced temp configuration."]
    #[doc = " See #fiftyoneDegreesHashBalancedTempConfig"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash15setBalancedTempEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setBalancedTemp(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash);
}

extern "C" {
    #[doc = " Set the collections to use the low memory configuration."]
    #[doc = " See #fiftyoneDegreesHashLowMemoryConfig"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash12setLowMemoryEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setLowMemory(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash);
}

extern "C" {
    #[doc = " Set the collections to use the entirely in memory"]
    #[doc = " configuration."]
    #[doc = " See #fiftyoneDegreesHashInMemoryConfig"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash17setMaxPerformanceEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setMaxPerformance(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash);
}

extern "C" {
    #[doc = " Set the maximum difference in hash value to allow when"]
    #[doc = " finding hashes during the processing of HTTP headers."]
    #[doc = " If the difference is exceeded, the result is considered"]
    #[doc = " invalid and values will not be returned. By default"]
    #[doc = " this is 0."]
    #[doc = " @param difference to set"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash13setDifferenceEi"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setDifference(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash, difference: i32);
}

extern "C" {
    #[doc = " Set the maximum drift to allow when matching hashes. If the"]
    #[doc = " drift is exceeded, the result is considered invalid and"]
    #[doc = " values will not be returned. By default this is 0."]
    #[doc = " @param drift to set"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash8setDriftEi"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setDrift(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash, drift: i32);
}

extern "C" {
    #[doc = " Set whether or not the performance optimized graph is used"]
    #[doc = " for processing. When processing evidence, the performance"]
    #[doc = " graph is optimised to find an answer as quick as possible."]
    #[doc = " However, this can be at the expense of finding the best"]
    #[doc = " match for evidence which was not in the training data. If"]
    #[doc = " the predictive graph is also enabled, it will be used"]
    #[doc = " next if there was no match in the performance graph."]
    #[doc = " @param use true if the performance graph should be used"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash22setUsePerformanceGraphEb"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setUsePerformanceGraph(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash, use_: bool);
}

extern "C" {
    #[doc = " Set whether or not the predictive optimized graph is used"]
    #[doc = " for processing. When processing evidence, the predictive"]
    #[doc = " graph is optimised to find the best answer for evidence"]
    #[doc = " which was not in the training data. However, this is at the"]
    #[doc = " expense of processing time, as more possibilities are taken"]
    #[doc = " into consideration."]
    #[doc = " @param use true if the predictive graph should be used"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash21setUsePredictiveGraphEb"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setUsePredictiveGraph(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash, use_: bool);
}

extern "C" {
    #[doc = " Set the expected concurrent requests for all the data set's"]
    #[doc = " collections. All collections in the data set which use"]
    #[doc = " cached elements will have their caches constructued to allow"]
    #[doc = " for the concurrency value set here."]
    #[doc = " See CollectionConfig::setConcurrency"]
    #[doc = " @param concurrency expected concurrent requests"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash14setConcurrencyEt"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setConcurrency(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash, concurrency: u16);
}

extern "C" {
    #[doc = " Sets whether the route through each graph should be traced"]
    #[doc = " during processing. The trace can then be printed to debug"]
    #[doc = " the matching after the fact. Note that this option is only"]
    #[doc = " considered when compiled in debug mode."]
    #[doc = " @param shouldTrace true if graphs should be traced"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash13setTraceRouteEb"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setTraceRoute(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash, shouldTrace: bool);
}

extern "C" {
    #[doc = " Get the configuration for the strings collection."]
    #[doc = " @return strings collection configuration"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash10getStringsEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getStrings(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash) -> FiftyoneDegrees_Common_CollectionConfig;
}

extern "C" {
    #[doc = " Get the configuration for the properties collection."]
    #[doc = " @return properties collection configuration"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash13getPropertiesEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getProperties(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash) -> FiftyoneDegrees_Common_CollectionConfig;
}

extern "C" {
    #[doc = " Get the configuration for the values collection."]
    #[doc = " @return values collection configuration"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash9getValuesEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getValues(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash) -> FiftyoneDegrees_Common_CollectionConfig;
}

extern "C" {
    #[doc = " Get the configuration for the profiles collection."]
    #[doc = " @return profiles collection configuration"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash11getProfilesEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getProfiles(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash) -> FiftyoneDegrees_Common_CollectionConfig;
}

extern "C" {
    #[doc = " Get the configuration for the nodes collection."]
    #[doc = " @return nodes collection configuration"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash8getNodesEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getNodes(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash) -> FiftyoneDegrees_Common_CollectionConfig;
}

extern "C" {
    #[doc = " Get the configuration for the profile offsets collection."]
    #[doc = " @return profile offsets collection configuration"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash17getProfileOffsetsEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getProfileOffsets(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash) -> FiftyoneDegrees_Common_CollectionConfig;
}

extern "C" {
    #[doc = " Gets the drift value that should be used for all device"]
    #[doc = " detection requests."]
    #[doc = " @return the drift value to use for all device detection."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash8getDriftEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getDrift(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Gets the difference value that should be used for all device"]
    #[doc = " detection"]
    #[doc = " requests."]
    #[doc = " @return the difference value to use for all device detection."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash13getDifferenceEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getDifference(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Get whether or not the performance optimized graph is used"]
    #[doc = " for processing."]
    #[doc = " @return true if the performance graph will be used"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash22getUsePerformanceGraphEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getUsePerformanceGraph(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash) -> bool;
}

extern "C" {
    #[doc = " Get whether or not the predicitive optimized graph is used"]
    #[doc = " for processing."]
    #[doc = " @return true if the performance graph will be used"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash21getUsePredictiveGraphEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getUsePredictiveGraph(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash) -> bool;
}

extern "C" {
    #[doc = " Gets whether the route through each graph should be traced"]
    #[doc = " during processing. The trace can then be printed to debug"]
    #[doc = " the matching after the fact. Note that this option is only"]
    #[doc = " considered when compiled in debug mode."]
    #[doc = " @return true if graphs should be traced"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash13getTraceRouteEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getTraceRoute(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash) -> bool;
}

extern "C" {
    #[doc = " Gets the configuration data structure for use in C code."]
    #[doc = " Used internally."]
    #[doc = " @return pointer to the underlying configuration data"]
    #[doc = " structure."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash9getConfigEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getConfig(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash) -> *mut fiftyoneDegreesConfigHash;
}

extern "C" {
    #[doc = " Construct a new instance using the default configuration"]
    #[doc = " #fiftyoneDegreesHashDefaultConfig."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHashC1Ev"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_ConfigHash(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash);
}

extern "C" {
    #[doc = " Construct a new instance using the configuration provided."]
    #[doc = " The values are copied and no reference to the provided"]
    #[doc = " parameter is retained."]
    #[doc = " @param config pointer to the configuration to copy"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHashC1EP30fiftyone_degrees_config_hash_t"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_ConfigHash1(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash, config: *mut fiftyoneDegreesConfigHash);
}

impl FiftyoneDegrees_DeviceDetection_Hash_ConfigHash {
    #[inline]
    pub unsafe fn setHighPerformance(&mut self) { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setHighPerformance(self) }
    #[inline]
    pub unsafe fn setBalanced(&mut self) { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setBalanced(self) }
    #[inline]
    pub unsafe fn setBalancedTemp(&mut self) { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setBalancedTemp(self) }
    #[inline]
    pub unsafe fn setLowMemory(&mut self) { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setLowMemory(self) }
    #[inline]
    pub unsafe fn setMaxPerformance(&mut self) { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setMaxPerformance(self) }
    #[inline]
    pub unsafe fn setDifference(&mut self, difference: i32) { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setDifference(self, difference) }
    #[inline]
    pub unsafe fn setDrift(&mut self, drift: i32) { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setDrift(self, drift) }
    #[inline]
    pub unsafe fn setUsePerformanceGraph(&mut self, use_: bool) { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setUsePerformanceGraph(self, use_) }
    #[inline]
    pub unsafe fn setUsePredictiveGraph(&mut self, use_: bool) { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setUsePredictiveGraph(self, use_) }
    #[inline]
    pub unsafe fn setConcurrency(&mut self, concurrency: u16) { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setConcurrency(self, concurrency) }
    #[inline]
    pub unsafe fn setTraceRoute(&mut self, shouldTrace: bool) { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_setTraceRoute(self, shouldTrace) }
    #[inline]
    pub unsafe fn getStrings(&mut self) -> FiftyoneDegrees_Common_CollectionConfig { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getStrings(self) }
    #[inline]
    pub unsafe fn getProperties(&mut self) -> FiftyoneDegrees_Common_CollectionConfig { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getProperties(self) }
    #[inline]
    pub unsafe fn getValues(&mut self) -> FiftyoneDegrees_Common_CollectionConfig { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getValues(self) }
    #[inline]
    pub unsafe fn getProfiles(&mut self) -> FiftyoneDegrees_Common_CollectionConfig { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getProfiles(self) }
    #[inline]
    pub unsafe fn getNodes(&mut self) -> FiftyoneDegrees_Common_CollectionConfig { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getNodes(self) }
    #[inline]
    pub unsafe fn getProfileOffsets(&mut self) -> FiftyoneDegrees_Common_CollectionConfig { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getProfileOffsets(self) }
    #[inline]
    pub unsafe fn getDrift(&mut self) -> ::std::os::raw::c_int { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getDrift(self) }
    #[inline]
    pub unsafe fn getDifference(&mut self) -> ::std::os::raw::c_int { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getDifference(self) }
    #[inline]
    pub unsafe fn getUsePerformanceGraph(&mut self) -> bool { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getUsePerformanceGraph(self) }
    #[inline]
    pub unsafe fn getUsePredictiveGraph(&mut self) -> bool { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getUsePredictiveGraph(self) }
    #[inline]
    pub unsafe fn getTraceRoute(&mut self) -> bool { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getTraceRoute(self) }
    #[inline]
    pub unsafe fn getConfig(&mut self) -> *mut fiftyoneDegreesConfigHash { FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getConfig(self) }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_ConfigHash(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(config: *mut fiftyoneDegreesConfigHash) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_ConfigHash1(__bindgen_tmp.as_mut_ptr(), config);
        __bindgen_tmp.assume_init()
    }
}

extern "C" {
    #[doc = " Get the lowest concurrency value in the list of possible"]
    #[doc = " concurrencies."]
    #[doc = " @return a 16 bit integer with the minimum concurrency value."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10ConfigHash14getConcurrencyEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ConfigHash_getConcurrency(this: *mut ::std::os::raw::c_void) -> u16;
}

#[doc = " Encapsulates the results of a Hash device detection engine's"]
#[doc = " processing. The class is constructed using an instance of a C"]
#[doc = " #fiftyoneDegreesResultsHash structure which are then"]
#[doc = " referenced to return associated values and metrics."]
#[doc = ""]
#[doc = " Additional get methods are included on top of the device"]
#[doc = " detection methods to return Hash specific metrics."]
#[doc = ""]
#[doc = " The key used to get the value for a property can be either the"]
#[doc = " name of the property, or the index of the property in the"]
#[doc = " required properties structure."]
#[doc = ""]
#[doc = " Results instances should only be created by an Engine."]
#[doc = ""]
#[doc = " ## Usage Example"]
#[doc = ""]
#[doc = " ```"]
#[doc = " using namespace FiftyoneDegrees::DeviceDetection::Hash;"]
#[doc = " ResultsHash *results;"]
#[doc = ""]
#[doc = " // Get the maximum drift used to arrive at the result"]
#[doc = " int drift = results->getDrift();"]
#[doc = ""]
#[doc = " // Delete the results"]
#[doc = " delete results;"]
#[doc = " ```"]
#[repr(C)]
#[derive(Debug)]
pub struct FiftyoneDegrees_DeviceDetection_Hash_ResultsHash {
    pub _base: FiftyoneDegrees_DeviceDetection_ResultsDeviceDetection,
    pub results: *mut fiftyoneDegreesResultsHash,
    #[doc = " The index in the available properties of the"]
    #[doc = " JavaScriptHardwareProfile property."] pub _jsHardwareProfileRequiredIndex: ::std::os::raw::c_int,
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_DeviceDetection_Hash_ResultsHash() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_DeviceDetection_Hash_ResultsHash>(), 56usize, concat!("Size of: ", stringify!(FiftyoneDegrees_DeviceDetection_Hash_ResultsHash)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_DeviceDetection_Hash_ResultsHash>(), 8usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_DeviceDetection_Hash_ResultsHash)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_DeviceDetection_Hash_ResultsHash>())).results as *const _ as usize }, 40usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_DeviceDetection_Hash_ResultsHash), "::", stringify!(results)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<FiftyoneDegrees_DeviceDetection_Hash_ResultsHash>()))._jsHardwareProfileRequiredIndex as *const _ as usize }, 48usize, concat!("Offset of field: ", stringify!(FiftyoneDegrees_DeviceDetection_Hash_ResultsHash), "::", stringify!(_jsHardwareProfileRequiredIndex)));
}

extern "C" {
    #[doc = " Returns the unique device id if the Id property was included"]
    #[doc = " in the required list of properties when the Provider was"]
    #[doc = " constructed."]
    #[doc = " @param resultIndex index of the individual User-Agent in the"]
    #[doc = " results"]
    #[doc = " @return device id string"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHash11getDeviceIdEj"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getDeviceId(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ResultsHash, resultIndex: u32) -> std_string;
}

extern "C" {
    #[doc = " Get the number of iterations carried out in order to find a"]
    #[doc = " match. This is the number of nodes in the graph which have"]
    #[doc = " been visited."]
    #[doc = " @return number of iterations"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHash13getIterationsEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getIterations(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ResultsHash) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Returns the maximum drift for a matched substring from the"]
    #[doc = " character position where it was expected to be found. The"]
    #[doc = " higher this value, the less accurate the results should be"]
    #[doc = " considered."]
    #[doc = " @return int maximum drift"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHash8getDriftEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getDrift(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ResultsHash) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Returns the drift for a matched substring from the character"]
    #[doc = " position where it was expected to be found. The higher this"]
    #[doc = " value, the lass accurate the results should be considered."]
    #[doc = " @param resultIndex index of the individual User-Agent in the"]
    #[doc = " results"]
    #[doc = " @return individual drift"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHash8getDriftEj"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getDrift1(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ResultsHash, resultIndex: u32) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Returns the number of hash nodes matched within the"]
    #[doc = " evidence."]
    #[doc = " @return"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHash15getMatchedNodesEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getMatchedNodes(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ResultsHash) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Returns the total difference between the results returned"]
    #[doc = " and the target User-Agents. Where multiple evidence items"]
    #[doc = " are used, this is"]
    #[doc = " the total difference."]
    #[doc = " @return total difference"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHash13getDifferenceEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getDifference(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ResultsHash) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Returns the difference between the result returned and the"]
    #[doc = " target User-Agent."]
    #[doc = " @param resultIndex index of the individual User-Agent in the"]
    #[doc = " results"]
    #[doc = " @return individual difference"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHash13getDifferenceEj"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getDifference1(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ResultsHash, resultIndex: u32) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Returns the method used to determine the match result. See"]
    #[doc = " #fiftyoneDegreesHashMatchMethod"]
    #[doc = " @return highest method used"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHash9getMethodEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getMethod(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ResultsHash) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Returns the method used to determine the match result. See"]
    #[doc = " #fiftyoneDegreesHashMatchMethod"]
    #[doc = " @param resultIndex index of the individual User-Agent in the"]
    #[doc = " results"]
    #[doc = " @return individual method used"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHash9getMethodEj"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getMethod1(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ResultsHash, resultIndex: u32) -> ::std::os::raw::c_int;
}

extern "C" {
    #[doc = " Get the trace route in a readable format showing the hash"]
    #[doc = " nodes which were visited during processing."]
    #[doc = " @return trace route string"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHash8getTraceEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getTrace(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ResultsHash) -> std_string;
}

extern "C" {
    #[doc = " Get the trace route in a readable format for the result"]
    #[doc = " index specified showing the hash nodes which were visited"]
    #[doc = " during processing."]
    #[doc = " @param resultIndex index to get the trace route for"]
    #[doc = " @return trace route string"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHash8getTraceEj"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getTrace1(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ResultsHash, resultIndex: u32) -> std_string;
}

extern "C" {
    #[doc = " @copydoc ResultsDeviceDetection::ResultsDeviceDetection"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHashC1EP50fiftyone_degrees_array_fiftyoneDegreesResultHash_tNSt3__110shared_ptrI35fiftyone_degrees_resource_manager_tEE"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_ResultsHash(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ResultsHash, results: *mut fiftyoneDegreesResultsHash, manager: [u64; 2usize]);
}

impl FiftyoneDegrees_DeviceDetection_Hash_ResultsHash {
    #[inline]
    pub unsafe fn getDeviceId(&mut self, resultIndex: u32) -> std_string { FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getDeviceId(self, resultIndex) }
    #[inline]
    pub unsafe fn getIterations(&mut self) -> ::std::os::raw::c_int { FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getIterations(self) }
    #[inline]
    pub unsafe fn getDrift(&mut self) -> ::std::os::raw::c_int { FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getDrift(self) }
    #[inline]
    pub unsafe fn getDrift1(&mut self, resultIndex: u32) -> ::std::os::raw::c_int { FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getDrift1(self, resultIndex) }
    #[inline]
    pub unsafe fn getMatchedNodes(&mut self) -> ::std::os::raw::c_int { FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getMatchedNodes(self) }
    #[inline]
    pub unsafe fn getDifference(&mut self) -> ::std::os::raw::c_int { FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getDifference(self) }
    #[inline]
    pub unsafe fn getDifference1(&mut self, resultIndex: u32) -> ::std::os::raw::c_int { FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getDifference1(self, resultIndex) }
    #[inline]
    pub unsafe fn getMethod(&mut self) -> ::std::os::raw::c_int { FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getMethod(self) }
    #[inline]
    pub unsafe fn getMethod1(&mut self, resultIndex: u32) -> ::std::os::raw::c_int { FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getMethod1(self, resultIndex) }
    #[inline]
    pub unsafe fn getTrace(&mut self) -> std_string { FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getTrace(self) }
    #[inline]
    pub unsafe fn getTrace1(&mut self, resultIndex: u32) -> std_string { FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getTrace1(self, resultIndex) }
    #[inline]
    pub unsafe fn new(results: *mut fiftyoneDegreesResultsHash, manager: [u64; 2usize]) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_ResultsHash(__bindgen_tmp.as_mut_ptr(), results, manager);
        __bindgen_tmp.assume_init()
    }
}

extern "C" {
    #[doc = " Release the reference to the underlying results and"]
    #[doc = " and associated data set."]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHashD1Ev"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_ResultsHash_destructor(this: *mut FiftyoneDegrees_DeviceDetection_Hash_ResultsHash);
}

extern "C" {
    #[doc = " @}"]
    #[doc = " @name DeviceDetection::ResultsDeviceDetection Implementation"]
    #[doc = " @{"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHash11getDeviceIdEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getDeviceId1(this: *mut ::std::os::raw::c_void) -> std_string;
}

extern "C" {
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHash13getUserAgentsEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getUserAgents(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}

extern "C" {
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHash12getUserAgentEi"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getUserAgent(this: *mut ::std::os::raw::c_void, resultIndex: ::std::os::raw::c_int) -> std_string;
}

extern "C" {
    #[doc = " @}"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHash17getValuesInternalEiRNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEE"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getValuesInternal(this: *mut ::std::os::raw::c_void, requiredPropertyIndex: ::std::os::raw::c_int, values: *mut [u64; 3usize]);
}

extern "C" {
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHash17hasValuesInternalEi"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_hasValuesInternal(this: *mut ::std::os::raw::c_void, requiredPropertyIndex: ::std::os::raw::c_int) -> bool;
}

extern "C" {
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHash25getNoValueMessageInternalE42e_fiftyone_degrees_results_no_value_reason"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getNoValueMessageInternal(this: *mut ::std::os::raw::c_void, reason: fiftyoneDegreesResultsNoValueReason) -> *const ::std::os::raw::c_char;
}

extern "C" {
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash11ResultsHash24getNoValueReasonInternalEi"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_ResultsHash_getNoValueReasonInternal(this: *mut ::std::os::raw::c_void, requiredPropertyIndex: ::std::os::raw::c_int) -> fiftyoneDegreesResultsNoValueReason;
}

#[doc = " Encapsulates the Hash engine class which implements"]
#[doc = " #EngineDeviceDetection. This carries out processing using a"]
#[doc = " Hash data set."]
#[doc = ""]
#[doc = " An engine is constructed with a configuration, and either a"]
#[doc = " data file, or an in memory data set, then used to process"]
#[doc = " evidence in order to return a set of results. It also exposes"]
#[doc = " methods to refresh the data using a new data set, and get"]
#[doc = " properties relating to the data set being used by the engine."]
#[doc = ""]
#[doc = " ## Usage Example"]
#[doc = ""]
#[doc = " ```"]
#[doc = " using namespace FiftyoneDegrees::Common;"]
#[doc = " using namespace FiftyoneDegrees::DeviceDetection;"]
#[doc = " using namespace FiftyoneDegrees::DeviceDetection::Hash;"]
#[doc = " ConfigHash *config;"]
#[doc = " string dataFilePath;"]
#[doc = " void *inMemoryDataSet;"]
#[doc = " long inMemoryDataSetLength;"]
#[doc = " RequiredPropertiesConfig *properties;"]
#[doc = " EvidenceDeviceDetection *evidence;"]
#[doc = ""]
#[doc = " // Construct the engine from a data file"]
#[doc = " EngineHash *engine = new EngineHash("]
#[doc = "     dataFilePath,"]
#[doc = "     config,"]
#[doc = "     properties);"]
#[doc = ""]
#[doc = " // Or from a data file which has been loaded into continuous"]
#[doc = " // memory"]
#[doc = " EngineHash *engine = new EngineHash("]
#[doc = "     inMemoryDataSet,"]
#[doc = "     inMemoryDataSetLength,"]
#[doc = "     config,"]
#[doc = "     properties);"]
#[doc = ""]
#[doc = " // Process some evidence"]
#[doc = " ResultsHash *results = engine->process(evidence);"]
#[doc = ""]
#[doc = " // Or just process a single User-Agent string"]
#[doc = " ResultsHash *results = engine->process(\"some User-Agent\");"]
#[doc = ""]
#[doc = " // Do something with the results"]
#[doc = " // ..."]
#[doc = ""]
#[doc = " // Delete the results and the engine"]
#[doc = " delete results;"]
#[doc = " delete engine;"]
#[doc = " ```"]
#[repr(C)]
#[derive(Debug)]
pub struct FiftyoneDegrees_DeviceDetection_Hash_EngineHash {
    pub _base: FiftyoneDegrees_DeviceDetection_EngineDeviceDetection,
}

#[test]
fn bindgen_test_layout_FiftyoneDegrees_DeviceDetection_Hash_EngineHash() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_DeviceDetection_Hash_EngineHash>(), 144usize, concat!("Size of: ", stringify!(FiftyoneDegrees_DeviceDetection_Hash_EngineHash)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_DeviceDetection_Hash_EngineHash>(), 8usize, concat!("Alignment of ", stringify!(FiftyoneDegrees_DeviceDetection_Hash_EngineHash)));
}

extern "C" {
    #[doc = " @copydoc EngineDeviceDetection::processDeviceDetection(EvidenceDeviceDetection*)"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHash7processEPNS0_23EvidenceDeviceDetectionE"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_process(this: *mut FiftyoneDegrees_DeviceDetection_Hash_EngineHash, evidence: *mut FiftyoneDegrees_DeviceDetection_EvidenceDeviceDetection) -> *mut FiftyoneDegrees_DeviceDetection_Hash_ResultsHash;
}

extern "C" {
    #[doc = " @copydoc EngineDeviceDetection::processDeviceDetection(const char*)"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHash7processEPKc"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_process1(this: *mut FiftyoneDegrees_DeviceDetection_Hash_EngineHash, userAgent: *const ::std::os::raw::c_char) -> *mut FiftyoneDegrees_DeviceDetection_Hash_ResultsHash;
}

extern "C" {
    #[doc = " @copydoc EngineDeviceDetection::init"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHash4initEP31fiftyone_degrees_dataset_hash_t"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_init(this: *mut FiftyoneDegrees_DeviceDetection_Hash_EngineHash, dataSet: *mut fiftyoneDegreesDataSetHash);
}

extern "C" {
    #[doc = " @copydoc Common::EngineBase::EngineBase"]
    #[doc = " The data set is constructed from the file provided."]
    #[doc = " @param fileName path to the file containing the data file"]
    #[doc = " to load"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHashC1EPKcPNS1_10ConfigHashEPNS_6Common24RequiredPropertiesConfigE"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_EngineHash(this: *mut FiftyoneDegrees_DeviceDetection_Hash_EngineHash, fileName: *const ::std::os::raw::c_char, config: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash, properties: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig);
}

extern "C" {
    #[doc = " @copydoc Common::EngineBase::EngineBase"]
    #[doc = " The data set is constructed from the file provided."]
    #[doc = " @param fileName path to the file containing the data file to"]
    #[doc = " load"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHashC1ERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPNS1_10ConfigHashEPNS_6Common24RequiredPropertiesConfigE"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_EngineHash1(this: *mut FiftyoneDegrees_DeviceDetection_Hash_EngineHash, fileName: *const std_string, config: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash, properties: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig);
}

extern "C" {
    #[doc = " @copydoc Common::EngineBase::EngineBase"]
    #[doc = " The data set is constructed from data stored in memory"]
    #[doc = " described by the data and length parameters."]
    #[doc = " @param data pointer to the memory containing the data set"]
    #[doc = " @param length size of the data in memory"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHashC1EPvlPNS1_10ConfigHashEPNS_6Common24RequiredPropertiesConfigE"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_EngineHash2(this: *mut FiftyoneDegrees_DeviceDetection_Hash_EngineHash, data: *mut ::std::os::raw::c_void, length: ::std::os::raw::c_long, config: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash, properties: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig);
}

extern "C" {
    #[doc = " @copydoc Common::EngineBase::EngineBase"]
    #[doc = " The data set is constructed from data stored in memory"]
    #[doc = " described by the data and length parameters."]
    #[doc = " @param data pointer to the memory containing the data set"]
    #[doc = " @param length size of the data in memory"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHashC1EPhlPNS1_10ConfigHashEPNS_6Common24RequiredPropertiesConfigE"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_EngineHash3(this: *mut FiftyoneDegrees_DeviceDetection_Hash_EngineHash, data: *mut ::std::os::raw::c_uchar, length: ::std::os::raw::c_long, config: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash, properties: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig);
}

impl FiftyoneDegrees_DeviceDetection_Hash_EngineHash {
    #[inline]
    pub unsafe fn process(&mut self, evidence: *mut FiftyoneDegrees_DeviceDetection_EvidenceDeviceDetection) -> *mut FiftyoneDegrees_DeviceDetection_Hash_ResultsHash { FiftyoneDegrees_DeviceDetection_Hash_EngineHash_process(self, evidence) }
    #[inline]
    pub unsafe fn process1(&mut self, userAgent: *const ::std::os::raw::c_char) -> *mut FiftyoneDegrees_DeviceDetection_Hash_ResultsHash { FiftyoneDegrees_DeviceDetection_Hash_EngineHash_process1(self, userAgent) }
    #[inline]
    pub unsafe fn init(&mut self, dataSet: *mut fiftyoneDegreesDataSetHash) { FiftyoneDegrees_DeviceDetection_Hash_EngineHash_init(self, dataSet) }
    #[inline]
    pub unsafe fn new(fileName: *const ::std::os::raw::c_char, config: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash, properties: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_DeviceDetection_Hash_EngineHash_EngineHash(__bindgen_tmp.as_mut_ptr(), fileName, config, properties);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(fileName: *const std_string, config: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash, properties: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_DeviceDetection_Hash_EngineHash_EngineHash1(__bindgen_tmp.as_mut_ptr(), fileName, config, properties);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(data: *mut ::std::os::raw::c_void, length: ::std::os::raw::c_long, config: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash, properties: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_DeviceDetection_Hash_EngineHash_EngineHash2(__bindgen_tmp.as_mut_ptr(), data, length, config, properties);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(data: *mut ::std::os::raw::c_uchar, length: ::std::os::raw::c_long, config: *mut FiftyoneDegrees_DeviceDetection_Hash_ConfigHash, properties: *mut FiftyoneDegrees_Common_RequiredPropertiesConfig) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FiftyoneDegrees_DeviceDetection_Hash_EngineHash_EngineHash3(__bindgen_tmp.as_mut_ptr(), data, length, config, properties);
        __bindgen_tmp.assume_init()
    }
}

extern "C" {
    #[doc = " @}"]
    #[doc = " @name Common::EngineBase Implementation"]
    #[doc = " @{"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHash11refreshDataEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_refreshData(this: *mut ::std::os::raw::c_void);
}

extern "C" {
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHash11refreshDataEPKc"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_refreshData1(this: *mut ::std::os::raw::c_void, fileName: *const ::std::os::raw::c_char);
}

extern "C" {
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHash11refreshDataEPvl"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_refreshData2(this: *mut ::std::os::raw::c_void, data: *mut ::std::os::raw::c_void, length: ::std::os::raw::c_long);
}

extern "C" {
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHash11refreshDataEPhl"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_refreshData3(this: *mut ::std::os::raw::c_void, data: *mut ::std::os::raw::c_uchar, length: ::std::os::raw::c_long);
}

extern "C" {
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHash11processBaseEPNS_6Common12EvidenceBaseE"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_processBase(this: *mut ::std::os::raw::c_void, evidence: *mut FiftyoneDegrees_Common_EvidenceBase) -> *mut FiftyoneDegrees_Common_ResultsBase;
}

extern "C" {
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHash16getPublishedTimeEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_getPublishedTime(this: *mut ::std::os::raw::c_void) -> FiftyoneDegrees_Common_Date;
}

extern "C" {
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHash22getUpdateAvailableTimeEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_getUpdateAvailableTime(this: *mut ::std::os::raw::c_void) -> FiftyoneDegrees_Common_Date;
}

extern "C" {
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHash15getDataFilePathEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_getDataFilePath(this: *mut ::std::os::raw::c_void) -> std_string;
}

extern "C" {
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHash19getDataFileTempPathEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_getDataFileTempPath(this: *mut ::std::os::raw::c_void) -> std_string;
}

extern "C" {
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHash10getProductEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_getProduct(this: *mut ::std::os::raw::c_void) -> std_string;
}

extern "C" {
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHash7getTypeEv"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_getType(this: *mut ::std::os::raw::c_void) -> std_string;
}

extern "C" {
    #[doc = " @}"]
    #[doc = " @name DeviceDetection::EngineDeviceDetection Implementation"]
    #[doc = " @{"]
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHash22processDeviceDetectionEPNS0_23EvidenceDeviceDetectionE"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_processDeviceDetection(this: *mut ::std::os::raw::c_void, evidence: *mut FiftyoneDegrees_DeviceDetection_EvidenceDeviceDetection) -> *mut FiftyoneDegrees_DeviceDetection_ResultsDeviceDetection;
}

extern "C" {
    #[link_name = "\u{1}__ZN15FiftyoneDegrees15DeviceDetection4Hash10EngineHash22processDeviceDetectionEPKc"]
    pub fn FiftyoneDegrees_DeviceDetection_Hash_EngineHash_processDeviceDetection1(this: *mut ::std::os::raw::c_void, userAgent: *const ::std::os::raw::c_char) -> *mut FiftyoneDegrees_DeviceDetection_ResultsDeviceDetection;
}

#[doc = " @cond FORWARD_DECLARATIONS"]
pub type fiftyoneDegreesPoolItem = fiftyone_degrees_pool_item_t;
#[doc = " Pool of resources stored as items in a stack."]
pub type fiftyoneDegreesPool = fiftyone_degrees_pool_t;
#[doc = " Frees a resource previously created with #fiftyoneDegreesPoolResourceCreate."]
#[doc = " @param pool containing the resource"]
#[doc = " @param resource to free"]
pub type fiftyoneDegreesPoolResourceFree = ::std::option::Option<unsafe extern "C" fn(pool: *mut fiftyoneDegreesPool, resource: *mut ::std::os::raw::c_void)>;

#[doc = " Pool item node in the stack of items."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_pool_item_t {
    #[doc = "< Pointer to the resource in the pool"] pub resource: *mut ::std::os::raw::c_void,
    #[doc = "< The next item in the stack"] pub next: u16,
    #[doc = "< Reader the handle belongs to"] pub pool: *mut fiftyoneDegreesPool,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_pool_item_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_pool_item_t>(), 24usize, concat!("Size of: ", stringify!(fiftyone_degrees_pool_item_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_pool_item_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_pool_item_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_pool_item_t>())).resource as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_pool_item_t), "::", stringify!(resource)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_pool_item_t>())).next as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_pool_item_t), "::", stringify!(next)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_pool_item_t>())).pool as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_pool_item_t), "::", stringify!(pool)));
}

#[doc = " The head of the stack used for pop and push operations."]
#[repr(C)]
#[derive(Copy, Clone)]
pub union fiftyone_degrees_pool_head_t {
    #[doc = "< Number used in the compare exchange operation"] pub exchange: ::std::os::raw::c_long,
    #[doc = "< Value index with its ABA value"] pub values: fiftyone_degrees_pool_head_t__bindgen_ty_1,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_pool_head_t__bindgen_ty_1 {
    #[doc = "< Index of the item in the linked list"] pub index: u16,
    #[doc = "< ABA value used to ensure proper operation"] pub aba: u16,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_pool_head_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_pool_head_t__bindgen_ty_1>(), 4usize, concat!("Size of: ", stringify!(fiftyone_degrees_pool_head_t__bindgen_ty_1)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_pool_head_t__bindgen_ty_1>(), 2usize, concat!("Alignment of ", stringify!(fiftyone_degrees_pool_head_t__bindgen_ty_1)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_pool_head_t__bindgen_ty_1>())).index as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_pool_head_t__bindgen_ty_1), "::", stringify!(index)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_pool_head_t__bindgen_ty_1>())).aba as *const _ as usize }, 2usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_pool_head_t__bindgen_ty_1), "::", stringify!(aba)));
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_pool_head_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_pool_head_t>(), 8usize, concat!("Size of: ", stringify!(fiftyone_degrees_pool_head_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_pool_head_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_pool_head_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_pool_head_t>())).exchange as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_pool_head_t), "::", stringify!(exchange)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_pool_head_t>())).values as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_pool_head_t), "::", stringify!(values)));
}

#[doc = " The head of the stack used for pop and push operations."]
pub type fiftyoneDegreesPoolHead = fiftyone_degrees_pool_head_t;

#[doc = " Pool of resources stored as items in a stack."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fiftyone_degrees_pool_t {
    #[doc = "< Pointer to the memory used by the"]
    #[doc = "stack"] pub stack: *mut fiftyoneDegreesPoolItem,
    #[doc = "< Head of the stack"] pub head: fiftyoneDegreesPoolHead,
    #[doc = "< Number of resource items that stack can hold"] pub count: u16,
    #[doc = "< Frees a resource"] pub resourceFree: fiftyoneDegreesPoolResourceFree,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_pool_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_pool_t>(), 32usize, concat!("Size of: ", stringify!(fiftyone_degrees_pool_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_pool_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_pool_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_pool_t>())).stack as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_pool_t), "::", stringify!(stack)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_pool_t>())).head as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_pool_t), "::", stringify!(head)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_pool_t>())).count as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_pool_t), "::", stringify!(count)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_pool_t>())).resourceFree as *const _ as usize }, 24usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_pool_t), "::", stringify!(resourceFree)));
}

#[doc = " Stack of handles used to read data from a single source file."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fiftyone_degrees_file_pool_t {
    #[doc = "< The pool of file handles"] pub pool: fiftyoneDegreesPool,
    #[doc = "< Length of the file in bytes"] pub length: ::std::os::raw::c_long,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_file_pool_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_file_pool_t>(), 40usize, concat!("Size of: ", stringify!(fiftyone_degrees_file_pool_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_file_pool_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_file_pool_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_file_pool_t>())).pool as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_file_pool_t), "::", stringify!(pool)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_file_pool_t>())).length as *const _ as usize }, 32usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_file_pool_t), "::", stringify!(length)));
}

#[doc = " Stack of handles used to read data from a single source file."]
pub type fiftyoneDegreesFilePool = fiftyone_degrees_file_pool_t;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_collection_header_t {
    #[doc = "< Start position in the data file of the entities"] pub startPosition: u32,
    #[doc = "< Length in bytes of all the entities"] pub length: u32,
    #[doc = "< Number of entities in the collection"] pub count: u32,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_collection_header_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_collection_header_t>(), 12usize, concat!("Size of: ", stringify!(fiftyone_degrees_collection_header_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_collection_header_t>(), 4usize, concat!("Alignment of ", stringify!(fiftyone_degrees_collection_header_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_collection_header_t>())).startPosition as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_collection_header_t), "::", stringify!(startPosition)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_collection_header_t>())).length as *const _ as usize }, 4usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_collection_header_t), "::", stringify!(length)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_collection_header_t>())).count as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_collection_header_t), "::", stringify!(count)));
}

pub type fiftyoneDegreesCollectionHeader = fiftyone_degrees_collection_header_t;

#[doc = " Collection configuration structure which defines how the collection should"]
#[doc = " be created by the create methods."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_collection_config_t {
    #[doc = "< Number of items to load into memory from the start of"]
    #[doc = "the collection"] pub loaded: u32,
    #[doc = "< Number of items the cache should store, 0 for no"]
    #[doc = "cache"] pub capacity: u32,
    #[doc = "< Expected number of concurrent requests, 1 or"]
    #[doc = "greater"] pub concurrency: u16,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_collection_config_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_collection_config_t>(), 12usize, concat!("Size of: ", stringify!(fiftyone_degrees_collection_config_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_collection_config_t>(), 4usize, concat!("Alignment of ", stringify!(fiftyone_degrees_collection_config_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_collection_config_t>())).loaded as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_collection_config_t), "::", stringify!(loaded)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_collection_config_t>())).capacity as *const _ as usize }, 4usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_collection_config_t), "::", stringify!(capacity)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_collection_config_t>())).concurrency as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_collection_config_t), "::", stringify!(concurrency)));
}

#[doc = " Collection configuration structure which defines how the collection should"]
#[doc = " be created by the create methods."]
pub type fiftyoneDegreesCollectionConfig = fiftyone_degrees_collection_config_t;
#[doc = " @cond FORWARD_DECLARATIONS"]
pub type fiftyoneDegreesCollection = fiftyone_degrees_collection_t;
#[doc = " Used to store a handle to the underlying item that could be used to release"]
#[doc = " the item when it's finished with. Also contains a reference to the data"]
#[doc = " structure used to handle memory allocation enabling memory to be reused"]
#[doc = " across multiple gets reducing the frequency of memory operations."]
pub type fiftyoneDegreesCollectionItem = fiftyone_degrees_collection_item_t;

#[doc = " Used to store a handle to the underlying item that could be used to release"]
#[doc = " the item when it's finished with. Also contains a reference to the data"]
#[doc = " structure used to handle memory allocation enabling memory to be reused"]
#[doc = " across multiple gets reducing the frequency of memory operations."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_collection_item_t {
    #[doc = "< Item data including allocated memory"] pub data: fiftyoneDegreesData,
    #[doc = "< A handle that relates to the data. i.e. a cache node"] pub handle: *mut ::std::os::raw::c_void,
    #[doc = "< Collection the item came from"]
    #[doc = "which may not have been set."]
    #[doc = "Should not be used by external"]
    #[doc = "code"] pub collection: *mut fiftyoneDegreesCollection,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_collection_item_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_collection_item_t>(), 32usize, concat!("Size of: ", stringify!(fiftyone_degrees_collection_item_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_collection_item_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_collection_item_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_collection_item_t>())).data as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_collection_item_t), "::", stringify!(data)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_collection_item_t>())).handle as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_collection_item_t), "::", stringify!(handle)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_collection_item_t>())).collection as *const _ as usize }, 24usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_collection_item_t), "::", stringify!(collection)));
}

#[doc = " Gets an item from the collection. Returns a pointer to the item, or NULL"]
#[doc = " if the item could not be loaded. The exception parameter is set to the"]
#[doc = " status code to indicate the failure."]
#[doc = " @param collection pointer to the file collection"]
#[doc = " @param offsetOrIndex index or offset to the item in the data structure"]
#[doc = " @param item pointer to the item structure to place the result in"]
#[doc = " @param exception pointer to an exception data structure to be used if an"]
#[doc = " exception occurs. See exceptions.h."]
#[doc = " @return the value in the data->ptr field, or NULL if not successful"]
pub type fiftyoneDegreesCollectionGetMethod = ::std::option::Option<unsafe extern "C" fn(collection: *mut fiftyoneDegreesCollection, indexOrOffset: u32, item: *mut fiftyoneDegreesCollectionItem, exception: *mut fiftyoneDegreesException) -> *mut ::std::os::raw::c_void>;
#[doc = " Releases the item so that the collection can free the memory or take"]
#[doc = " other actions when the caller no longer needs access to the item."]
#[doc = " @param item the item returned from Get to be released"]
pub type fiftyoneDegreesCollectionReleaseMethod = ::std::option::Option<unsafe extern "C" fn(item: *mut fiftyoneDegreesCollectionItem)>;
#[doc = " Frees all the memory and handles associated with the collection."]
#[doc = " @param collection the collection to be freed"]
pub type fiftyoneDegreesCollectionFreeMethod = ::std::option::Option<unsafe extern "C" fn(collection: *mut fiftyoneDegreesCollection)>;

#[doc = " All the shared methods and fields required by file, memory and cached"]
#[doc = " collections. The state field points to the specific collection data"]
#[doc = " structure and handles."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_collection_t {
    #[doc = "< Gets an entry into the"]
    #[doc = "item provided. The consumer MUST"]
    #[doc = "release the item when it has"]
    #[doc = "finished with the data"] pub get: fiftyoneDegreesCollectionGetMethod,
    #[doc = "< Releases the item"]
    #[doc = "handle"] pub release: fiftyoneDegreesCollectionReleaseMethod,
    #[doc = "< Frees collection"]
    #[doc = "and all items retrieved"]
    #[doc = "from the collection"]
    #[doc = "will become invalid"] pub freeCollection: fiftyoneDegreesCollectionFreeMethod,
    #[doc = "< Pointer to data for memory, cache or file. Either a"]
    #[doc = "#fiftyoneDegreesCollectionMemory,"]
    #[doc = "#fiftyoneDegreesCollectionFile or"]
    #[doc = "#fiftyoneDegreesCollectionCache"] pub state: *mut ::std::os::raw::c_void,
    #[doc = "< The next collection implementation or"]
    #[doc = "NULL"] pub next: *mut fiftyoneDegreesCollection,
    #[doc = "< The number of items, or 0 if not available"] pub count: u32,
    #[doc = "< The size of each entry, or 0 if variable length"] pub elementSize: u32,
    #[doc = "< Number of bytes in the source data structure containing"]
    #[doc = "the collection's data"] pub size: u32,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_collection_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_collection_t>(), 56usize, concat!("Size of: ", stringify!(fiftyone_degrees_collection_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_collection_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_collection_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_collection_t>())).get as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_collection_t), "::", stringify!(get)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_collection_t>())).release as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_collection_t), "::", stringify!(release)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_collection_t>())).freeCollection as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_collection_t), "::", stringify!(freeCollection)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_collection_t>())).state as *const _ as usize }, 24usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_collection_t), "::", stringify!(state)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_collection_t>())).next as *const _ as usize }, 32usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_collection_t), "::", stringify!(next)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_collection_t>())).count as *const _ as usize }, 40usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_collection_t), "::", stringify!(count)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_collection_t>())).elementSize as *const _ as usize }, 44usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_collection_t), "::", stringify!(elementSize)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_collection_t>())).size as *const _ as usize }, 48usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_collection_t), "::", stringify!(size)));
}

#[doc = "< An HTTP header"]
#[doc = "value"]
pub const e_fiftyone_degrees_evidence_prefix_FIFTYONE_DEGREES_EVIDENCE_HTTP_HEADER_STRING: e_fiftyone_degrees_evidence_prefix = 1;
#[doc = "< A list of"]
#[doc = "IP addresses"]
#[doc = "as a string to"]
#[doc = "be parsed into"]
#[doc = "a IP addresses"]
#[doc = "collection."]
pub const e_fiftyone_degrees_evidence_prefix_FIFTYONE_DEGREES_EVIDENCE_HTTP_HEADER_IP_ADDRESSES: e_fiftyone_degrees_evidence_prefix = 2;
#[doc = "< A server value e.g. client"]
#[doc = "IP"]
pub const e_fiftyone_degrees_evidence_prefix_FIFTYONE_DEGREES_EVIDENCE_SERVER: e_fiftyone_degrees_evidence_prefix = 4;
#[doc = "< A query string parameter"]
pub const e_fiftyone_degrees_evidence_prefix_FIFTYONE_DEGREES_EVIDENCE_QUERY: e_fiftyone_degrees_evidence_prefix = 8;
#[doc = "< A cookie value"]
pub const e_fiftyone_degrees_evidence_prefix_FIFTYONE_DEGREES_EVIDENCE_COOKIE: e_fiftyone_degrees_evidence_prefix = 16;
#[doc = "< The evidence is invalid and"]
#[doc = "should be ignored"]
pub const e_fiftyone_degrees_evidence_prefix_FIFTYONE_DEGREES_EVIDENCE_IGNORE: e_fiftyone_degrees_evidence_prefix = 128;

#[doc = " Evidence prefixes used to determine the category a piece of evidence"]
#[doc = " belongs to. This will determine how the value is parsed."]
pub type e_fiftyone_degrees_evidence_prefix = ::std::os::raw::c_uint;

#[doc = " Evidence prefixes used to determine the category a piece of evidence"]
#[doc = " belongs to. This will determine how the value is parsed."]
pub use self::e_fiftyone_degrees_evidence_prefix as fiftyoneDegreesEvidencePrefix;

#[doc = " Evidence key value pair structure which combines the prefix, key and value."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_evidence_key_value_pair_t {
    #[doc = "< e.g. #FIFTYONE_DEGREES_EVIDENCE_HTTP_HEADER_STRING"] pub prefix: fiftyoneDegreesEvidencePrefix,
    #[doc = "< e.g. User-Agent or ScreenPixelsWidth"] pub field: *const ::std::os::raw::c_char,
    #[doc = "< The original unparsed value"] pub originalValue: *const ::std::os::raw::c_void,
    #[doc = "< The parsed value which may not be a string"] pub parsedValue: *const ::std::os::raw::c_void,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_evidence_key_value_pair_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_evidence_key_value_pair_t>(), 32usize, concat!("Size of: ", stringify!(fiftyone_degrees_evidence_key_value_pair_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_evidence_key_value_pair_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_evidence_key_value_pair_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_evidence_key_value_pair_t>())).prefix as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_evidence_key_value_pair_t), "::", stringify!(prefix)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_evidence_key_value_pair_t>())).field as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_evidence_key_value_pair_t), "::", stringify!(field)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_evidence_key_value_pair_t>())).originalValue as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_evidence_key_value_pair_t), "::", stringify!(originalValue)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_evidence_key_value_pair_t>())).parsedValue as *const _ as usize }, 24usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_evidence_key_value_pair_t), "::", stringify!(parsedValue)));
}

#[doc = " Evidence key value pair structure which combines the prefix, key and value."]
pub type fiftyoneDegreesEvidenceKeyValuePair = fiftyone_degrees_evidence_key_value_pair_t;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_array_fiftyoneDegreesEvidenceKeyValuePair_t {
    pub count: u32,
    pub capacity: u32,
    pub items: *mut fiftyoneDegreesEvidenceKeyValuePair,
    pub pseudoEvidence: *mut fiftyone_degrees_array_fiftyoneDegreesEvidenceKeyValuePair_t,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_array_fiftyoneDegreesEvidenceKeyValuePair_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_array_fiftyoneDegreesEvidenceKeyValuePair_t>(), 24usize, concat!("Size of: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesEvidenceKeyValuePair_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_array_fiftyoneDegreesEvidenceKeyValuePair_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_array_fiftyoneDegreesEvidenceKeyValuePair_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesEvidenceKeyValuePair_t>())).count as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesEvidenceKeyValuePair_t), "::", stringify!(count)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesEvidenceKeyValuePair_t>())).capacity as *const _ as usize }, 4usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesEvidenceKeyValuePair_t), "::", stringify!(capacity)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesEvidenceKeyValuePair_t>())).items as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesEvidenceKeyValuePair_t), "::", stringify!(items)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesEvidenceKeyValuePair_t>())).pseudoEvidence as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesEvidenceKeyValuePair_t), "::", stringify!(pseudoEvidence)));
}

pub type fiftyoneDegreesEvidenceKeyValuePairArray = fiftyone_degrees_array_fiftyoneDegreesEvidenceKeyValuePair_t;

#[doc = " List structure which contains a list of collection items."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_list_t {
    #[doc = "< Array of items"] pub items: *mut fiftyoneDegreesCollectionItem,
    #[doc = "< Capacity of the list to store items"] pub capacity: u32,
    #[doc = "< Number of items currently in the list"] pub count: u32,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_list_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_list_t>(), 16usize, concat!("Size of: ", stringify!(fiftyone_degrees_list_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_list_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_list_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_list_t>())).items as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_list_t), "::", stringify!(items)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_list_t>())).capacity as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_list_t), "::", stringify!(capacity)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_list_t>())).count as *const _ as usize }, 12usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_list_t), "::", stringify!(count)));
}

#[doc = " List structure which contains a list of collection items."]
pub type fiftyoneDegreesList = fiftyone_degrees_list_t;
#[doc = " Index in the properties collection to a property which is required to get"]
#[doc = " evidence for another property."]
pub type fiftyoneDegreesEvidencePropertyIndex = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_array_fiftyoneDegreesEvidencePropertyIndex_t {
    pub count: u32,
    pub capacity: u32,
    pub items: *mut fiftyoneDegreesEvidencePropertyIndex,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_array_fiftyoneDegreesEvidencePropertyIndex_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_array_fiftyoneDegreesEvidencePropertyIndex_t>(), 16usize, concat!("Size of: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesEvidencePropertyIndex_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_array_fiftyoneDegreesEvidencePropertyIndex_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_array_fiftyoneDegreesEvidencePropertyIndex_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesEvidencePropertyIndex_t>())).count as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesEvidencePropertyIndex_t), "::", stringify!(count)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesEvidencePropertyIndex_t>())).capacity as *const _ as usize }, 4usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesEvidencePropertyIndex_t), "::", stringify!(capacity)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesEvidencePropertyIndex_t>())).items as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesEvidencePropertyIndex_t), "::", stringify!(items)));
}

pub type fiftyoneDegreesEvidencePropertyIndexArray = fiftyone_degrees_array_fiftyoneDegreesEvidencePropertyIndex_t;
#[doc = " Array of properties which are required to fetch additional evidence for"]
#[doc = " a specific property."]
pub type fiftyoneDegreesEvidenceProperties = fiftyoneDegreesEvidencePropertyIndexArray;

#[doc = " Used to access the property item quickly without the need to search."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_property_available_t {
    #[doc = "< Index of the property in the collection of all"]
    #[doc = "properties"] pub propertyIndex: u32,
    #[doc = "< Name of the property from strings"] pub name: fiftyoneDegreesCollectionItem,
    #[doc = "< Evidence"]
    #[doc = "properties which are"]
    #[doc = "required by this"]
    #[doc = "property"] pub evidenceProperties: *mut fiftyoneDegreesEvidenceProperties,
    #[doc = "< True if the execution any JavaScript returned as"]
    #[doc = "a value of this property should be delayed. False if"]
    #[doc = "it should be run immediately. This is always"]
    #[doc = "initialized to false, so should be set by the calling"]
    #[doc = "function"] pub delayExecution: bool,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_property_available_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_property_available_t>(), 56usize, concat!("Size of: ", stringify!(fiftyone_degrees_property_available_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_property_available_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_property_available_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_property_available_t>())).propertyIndex as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_property_available_t), "::", stringify!(propertyIndex)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_property_available_t>())).name as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_property_available_t), "::", stringify!(name)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_property_available_t>())).evidenceProperties as *const _ as usize }, 40usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_property_available_t), "::", stringify!(evidenceProperties)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_property_available_t>())).delayExecution as *const _ as usize }, 48usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_property_available_t), "::", stringify!(delayExecution)));
}

#[doc = " Used to access the property item quickly without the need to search."]
pub type fiftyoneDegreesPropertyAvailable = fiftyone_degrees_property_available_t;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_array_fiftyoneDegreesPropertyAvailable_t {
    pub count: u32,
    pub capacity: u32,
    pub items: *mut fiftyoneDegreesPropertyAvailable,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_array_fiftyoneDegreesPropertyAvailable_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_array_fiftyoneDegreesPropertyAvailable_t>(), 16usize, concat!("Size of: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesPropertyAvailable_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_array_fiftyoneDegreesPropertyAvailable_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_array_fiftyoneDegreesPropertyAvailable_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesPropertyAvailable_t>())).count as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesPropertyAvailable_t), "::", stringify!(count)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesPropertyAvailable_t>())).capacity as *const _ as usize }, 4usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesPropertyAvailable_t), "::", stringify!(capacity)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesPropertyAvailable_t>())).items as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesPropertyAvailable_t), "::", stringify!(items)));
}

pub type fiftyoneDegreesPropertyAvailableArray = fiftyone_degrees_array_fiftyoneDegreesPropertyAvailable_t;
#[doc = " Array of properties which are available in a data set."]
pub type fiftyoneDegreesPropertiesAvailable = fiftyoneDegreesPropertyAvailableArray;

#[doc = " Defines a set of properties which are required by a caller. Usually to a"]
#[doc = " data set creation method."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_properties_required_t {
    #[doc = "< Array of required properties or NULL if all"]
    #[doc = "properties are required. See the count property for"]
    #[doc = "the number of items in the array"] pub array: *mut *const ::std::os::raw::c_char,
    #[doc = "< Number of properties in array"] pub count: ::std::os::raw::c_int,
    #[doc = "< Separated list of required properties or NULL if"]
    #[doc = "all properties are required"] pub string: *const ::std::os::raw::c_char,
    #[doc = "< A pointer to an existing"]
    #[doc = "set of property names"]
    #[doc = "from another instance"] pub existing: *mut fiftyoneDegreesPropertiesAvailable,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_properties_required_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_properties_required_t>(), 32usize, concat!("Size of: ", stringify!(fiftyone_degrees_properties_required_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_properties_required_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_properties_required_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_properties_required_t>())).array as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_properties_required_t), "::", stringify!(array)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_properties_required_t>())).count as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_properties_required_t), "::", stringify!(count)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_properties_required_t>())).string as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_properties_required_t), "::", stringify!(string)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_properties_required_t>())).existing as *const _ as usize }, 24usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_properties_required_t), "::", stringify!(existing)));
}

#[doc = " Defines a set of properties which are required by a caller. Usually to a"]
#[doc = " data set creation method."]
pub type fiftyoneDegreesPropertiesRequired = fiftyone_degrees_properties_required_t;

#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_date_t {
    #[doc = "< Year"] pub year: i16,
    #[doc = "< Month"] pub month: byte,
    #[doc = "< Day of the Month"] pub day: byte,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_date_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_date_t>(), 4usize, concat!("Size of: ", stringify!(fiftyone_degrees_date_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_date_t>(), 1usize, concat!("Alignment of ", stringify!(fiftyone_degrees_date_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_date_t>())).year as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_date_t), "::", stringify!(year)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_date_t>())).month as *const _ as usize }, 2usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_date_t), "::", stringify!(month)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_date_t>())).day as *const _ as usize }, 3usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_date_t), "::", stringify!(day)));
}

pub type fiftyoneDegreesDate = fiftyone_degrees_date_t;

#[doc = " Base configuration structure containing common configuration options, and"]
#[doc = " options that apply to structures and methods in the common library."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_config_base_t {
    #[doc = "< True if the data file should be loaded entirely into"]
    #[doc = "continuous memory."] pub allInMemory: bool,
    #[doc = "< True if the HTTP header field names"]
    #[doc = "MIGHT include the prefix HTTP_"] pub usesUpperPrefixedHeaders: bool,
    #[doc = "< True if the memory containing the data set should be"]
    #[doc = "freed after it is no longer needed. This only applies to"]
    #[doc = "externally allocated memory, anything allocated"]
    #[doc = "internally is automatically freed."] pub freeData: bool,
    #[doc = "< Indicates whether a temporary file should be created"]
    #[doc = "instead of using the original file."] pub useTempFile: bool,
    #[doc = "< Indicates that an existing temp file may be used."]
    #[doc = "This should be selected if multiple instances wish"]
    #[doc = "to use the same file to prevent high disk usage."] pub reuseTempFile: bool,
    #[doc = "< Array of temp directories which can be used in"]
    #[doc = "order of preference."] pub tempDirs: *mut *const ::std::os::raw::c_char,
    #[doc = "< Number of directories in the tempDirs array."] pub tempDirCount: ::std::os::raw::c_int,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_config_base_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_config_base_t>(), 24usize, concat!("Size of: ", stringify!(fiftyone_degrees_config_base_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_config_base_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_config_base_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_base_t>())).allInMemory as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_base_t), "::", stringify!(allInMemory)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_base_t>())).usesUpperPrefixedHeaders as *const _ as usize }, 1usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_base_t), "::", stringify!(usesUpperPrefixedHeaders)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_base_t>())).freeData as *const _ as usize }, 2usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_base_t), "::", stringify!(freeData)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_base_t>())).useTempFile as *const _ as usize }, 3usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_base_t), "::", stringify!(useTempFile)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_base_t>())).reuseTempFile as *const _ as usize }, 4usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_base_t), "::", stringify!(reuseTempFile)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_base_t>())).tempDirs as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_base_t), "::", stringify!(tempDirs)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_base_t>())).tempDirCount as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_base_t), "::", stringify!(tempDirCount)));
}

#[doc = " Base configuration structure containing common configuration options, and"]
#[doc = " options that apply to structures and methods in the common library."]
pub type fiftyoneDegreesConfigBase = fiftyone_degrees_config_base_t;

#[doc = " Header structure containing the name and unique id."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_header_t {
    #[doc = "< Collection item containing the"]
    #[doc = "name of the header as a"]
    #[doc = "#fiftyoneDegreesString"] pub name: fiftyoneDegreesCollectionItem,
    #[doc = "< Indices for unique headers that form"]
    #[doc = "this pseudo-header. Null if not a pseudo header"] pub requestHeaders: *mut u32,
    #[doc = "< Number of request headers. 0 If not a"]
    #[doc = "pseudo header"] pub requestHeaderCount: u32,
    #[doc = "< Id which uniquely identifies the header within the"]
    #[doc = "data set."] pub uniqueId: u32,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_header_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_header_t>(), 48usize, concat!("Size of: ", stringify!(fiftyone_degrees_header_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_header_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_header_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_header_t>())).name as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_header_t), "::", stringify!(name)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_header_t>())).requestHeaders as *const _ as usize }, 32usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_header_t), "::", stringify!(requestHeaders)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_header_t>())).requestHeaderCount as *const _ as usize }, 40usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_header_t), "::", stringify!(requestHeaderCount)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_header_t>())).uniqueId as *const _ as usize }, 44usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_header_t), "::", stringify!(uniqueId)));
}

#[doc = " Header structure containing the name and unique id."]
pub type fiftyoneDegreesHeader = fiftyone_degrees_header_t;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_array_fiftyoneDegreesHeader_t {
    pub count: u32,
    pub capacity: u32,
    pub items: *mut fiftyoneDegreesHeader,
    pub expectUpperPrefixedHeaders: bool,
    pub pseudoHeaders: *mut u32,
    pub pseudoHeadersCount: u32,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_array_fiftyoneDegreesHeader_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_array_fiftyoneDegreesHeader_t>(), 40usize, concat!("Size of: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesHeader_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_array_fiftyoneDegreesHeader_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_array_fiftyoneDegreesHeader_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesHeader_t>())).count as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesHeader_t), "::", stringify!(count)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesHeader_t>())).capacity as *const _ as usize }, 4usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesHeader_t), "::", stringify!(capacity)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesHeader_t>())).items as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesHeader_t), "::", stringify!(items)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesHeader_t>())).expectUpperPrefixedHeaders as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesHeader_t), "::", stringify!(expectUpperPrefixedHeaders)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesHeader_t>())).pseudoHeaders as *const _ as usize }, 24usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesHeader_t), "::", stringify!(pseudoHeaders)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesHeader_t>())).pseudoHeadersCount as *const _ as usize }, 32usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesHeader_t), "::", stringify!(pseudoHeadersCount)));
}

pub type fiftyoneDegreesHeaderArray = fiftyone_degrees_array_fiftyoneDegreesHeader_t;
#[doc = " Array of headers used to easily access and track the size of the array."]
pub type fiftyoneDegreesHeaders = fiftyoneDegreesHeaderArray;

#[doc = " Index and pointer to a property which can be overridden."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_override_property_t {
    #[doc = "< Index in the available properties"]
    #[doc = "structure"] pub requiredPropertyIndex: u32,
    #[doc = "< Pointer to the property"] pub available: *mut fiftyoneDegreesPropertyAvailable,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_override_property_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_override_property_t>(), 16usize, concat!("Size of: ", stringify!(fiftyone_degrees_override_property_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_override_property_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_override_property_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_override_property_t>())).requiredPropertyIndex as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_override_property_t), "::", stringify!(requiredPropertyIndex)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_override_property_t>())).available as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_override_property_t), "::", stringify!(available)));
}

#[doc = " Index and pointer to a property which can be overridden."]
pub type fiftyoneDegreesOverrideProperty = fiftyone_degrees_override_property_t;

#[doc = " String value which should override the value for the property indicated by"]
#[doc = " the required property index."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_override_value_t {
    #[doc = "< Index in the available properties"]
    #[doc = "structure"] pub requiredPropertyIndex: u32,
    #[doc = "< Overridden value"] pub string: fiftyoneDegreesData,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_override_value_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_override_value_t>(), 24usize, concat!("Size of: ", stringify!(fiftyone_degrees_override_value_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_override_value_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_override_value_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_override_value_t>())).requiredPropertyIndex as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_override_value_t), "::", stringify!(requiredPropertyIndex)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_override_value_t>())).string as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_override_value_t), "::", stringify!(string)));
}

#[doc = " String value which should override the value for the property indicated by"]
#[doc = " the required property index."]
pub type fiftyoneDegreesOverrideValue = fiftyone_degrees_override_value_t;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_array_fiftyoneDegreesOverrideProperty_t {
    pub count: u32,
    pub capacity: u32,
    pub items: *mut fiftyoneDegreesOverrideProperty,
    pub prefix: bool,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_array_fiftyoneDegreesOverrideProperty_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_array_fiftyoneDegreesOverrideProperty_t>(), 24usize, concat!("Size of: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesOverrideProperty_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_array_fiftyoneDegreesOverrideProperty_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_array_fiftyoneDegreesOverrideProperty_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesOverrideProperty_t>())).count as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesOverrideProperty_t), "::", stringify!(count)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesOverrideProperty_t>())).capacity as *const _ as usize }, 4usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesOverrideProperty_t), "::", stringify!(capacity)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesOverrideProperty_t>())).items as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesOverrideProperty_t), "::", stringify!(items)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesOverrideProperty_t>())).prefix as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesOverrideProperty_t), "::", stringify!(prefix)));
}

pub type fiftyoneDegreesOverridePropertyArray = fiftyone_degrees_array_fiftyoneDegreesOverrideProperty_t;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_array_fiftyoneDegreesOverrideValue_t {
    pub count: u32,
    pub capacity: u32,
    pub items: *mut fiftyoneDegreesOverrideValue,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_array_fiftyoneDegreesOverrideValue_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_array_fiftyoneDegreesOverrideValue_t>(), 16usize, concat!("Size of: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesOverrideValue_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_array_fiftyoneDegreesOverrideValue_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_array_fiftyoneDegreesOverrideValue_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesOverrideValue_t>())).count as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesOverrideValue_t), "::", stringify!(count)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesOverrideValue_t>())).capacity as *const _ as usize }, 4usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesOverrideValue_t), "::", stringify!(capacity)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesOverrideValue_t>())).items as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesOverrideValue_t), "::", stringify!(items)));
}

pub type fiftyoneDegreesOverrideValueArray = fiftyone_degrees_array_fiftyoneDegreesOverrideValue_t;

#[doc = " Base data set structure which contains the 'must have's for all data sets."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fiftyone_degrees_dataset_base_t {
    #[doc = "< Path to the file"]
    #[doc = "used to initialise the"]
    #[doc = "data set. This will"]
    #[doc = "either be the same as"]
    #[doc = "the master file name,"]
    #[doc = "or the path to the"]
    #[doc = "temp file being used."] pub fileName: [::std::os::raw::c_char; 4096usize],
    #[doc = "< Path to the"]
    #[doc = "file used to"]
    #[doc = "initialise the"]
    #[doc = "data set."] pub masterFileName: [::std::os::raw::c_char; 4096usize],
    #[doc = "< A pointer to the memory where the data within the"]
    #[doc = "data set is held. NULL if the entire data set is not"]
    #[doc = "held in memory, the caller is going to free the"]
    #[doc = "memory or there are a mixture of caches and"]
    #[doc = "partially allocated memory in use."] pub memoryToFree: *mut ::std::os::raw::c_void,
    #[doc = "< True if the data file has been read into continuous"]
    #[doc = "memory"] pub isInMemory: bool,
    pub isClientHintsEnabled: bool,
    #[doc = "< Linked list of file readers"] pub filePool: fiftyoneDegreesFilePool,
    #[doc = "< Pointer to the handle that"]
    #[doc = "tracks this data set instance"] pub handle: *mut fiftyoneDegreesResourceHandle,
    #[doc = "< Available properties"] pub available: *mut fiftyoneDegreesPropertiesAvailable,
    #[doc = "< Related HTTP headers"] pub uniqueHeaders: *mut fiftyoneDegreesHeaders,
    #[doc = "< Array of properties"]
    #[doc = "that can be"]
    #[doc = "overridden"] pub overridable: *mut fiftyoneDegreesOverridePropertyArray,
    #[doc = "< Pointer to the config used to create the dataset"] pub config: *const ::std::os::raw::c_void,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_dataset_base_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_dataset_base_t>(), 8288usize, concat!("Size of: ", stringify!(fiftyone_degrees_dataset_base_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_dataset_base_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_dataset_base_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_base_t>())).fileName as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_base_t), "::", stringify!(fileName)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_base_t>())).masterFileName as *const _ as usize }, 4096usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_base_t), "::", stringify!(masterFileName)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_base_t>())).memoryToFree as *const _ as usize }, 8192usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_base_t), "::", stringify!(memoryToFree)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_base_t>())).isInMemory as *const _ as usize }, 8200usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_base_t), "::", stringify!(isInMemory)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_base_t>())).isClientHintsEnabled as *const _ as usize }, 8201usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_base_t), "::", stringify!(isClientHintsEnabled)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_base_t>())).filePool as *const _ as usize }, 8208usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_base_t), "::", stringify!(filePool)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_base_t>())).handle as *const _ as usize }, 8248usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_base_t), "::", stringify!(handle)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_base_t>())).available as *const _ as usize }, 8256usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_base_t), "::", stringify!(available)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_base_t>())).uniqueHeaders as *const _ as usize }, 8264usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_base_t), "::", stringify!(uniqueHeaders)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_base_t>())).overridable as *const _ as usize }, 8272usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_base_t), "::", stringify!(overridable)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_base_t>())).config as *const _ as usize }, 8280usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_base_t), "::", stringify!(config)));
}

#[doc = " Base data set structure which contains the 'must have's for all data sets."]
pub type fiftyoneDegreesDataSetBase = fiftyone_degrees_dataset_base_t;

#[doc = "< The difference"]
#[doc = "value is higher than"]
#[doc = "the threshold, see"]
#[doc = "the Pattern API"]
pub const e_fiftyone_degrees_results_no_value_reason_FIFTYONE_DEGREES_RESULTS_NO_VALUE_REASON_DIFFERENCE: e_fiftyone_degrees_results_no_value_reason = 0;
#[doc = "< No hash"]
#[doc = "nodes were"]
#[doc = "matched, see the"]
#[doc = "Hash API"]
pub const e_fiftyone_degrees_results_no_value_reason_FIFTYONE_DEGREES_RESULTS_NO_VALUE_REASON_NO_MATCHED_NODES: e_fiftyone_degrees_results_no_value_reason = 1;
#[doc = "< The requested"]
#[doc = "property does"]
#[doc = "not exist, or is"]
#[doc = "not a required"]
#[doc = "property"]
pub const e_fiftyone_degrees_results_no_value_reason_FIFTYONE_DEGREES_RESULTS_NO_VALUE_REASON_INVALID_PROPERTY: e_fiftyone_degrees_results_no_value_reason = 2;
#[doc = "< There"]
#[doc = "is no result"]
#[doc = "which"]
#[doc = "contains a"]
#[doc = "value for"]
#[doc = "the requested"]
#[doc = "property"]
pub const e_fiftyone_degrees_results_no_value_reason_FIFTYONE_DEGREES_RESULTS_NO_VALUE_REASON_NO_RESULT_FOR_PROPERTY: e_fiftyone_degrees_results_no_value_reason = 3;
#[doc = "< There are no"]
#[doc = "results to get a value"]
#[doc = "from"]
pub const e_fiftyone_degrees_results_no_value_reason_FIFTYONE_DEGREES_RESULTS_NO_VALUE_REASON_NO_RESULTS: e_fiftyone_degrees_results_no_value_reason = 4;
#[doc = "< There are too"]
#[doc = "many values to be"]
#[doc = "expressed as the"]
#[doc = "requested type"]
pub const e_fiftyone_degrees_results_no_value_reason_FIFTYONE_DEGREES_RESULTS_NO_VALUE_REASON_TOO_MANY_VALUES: e_fiftyone_degrees_results_no_value_reason = 5;
#[doc = "< The results"]
#[doc = "contain a null"]
#[doc = "profile for the"]
#[doc = "required component"]
pub const e_fiftyone_degrees_results_no_value_reason_FIFTYONE_DEGREES_RESULTS_NO_VALUE_REASON_NULL_PROFILE: e_fiftyone_degrees_results_no_value_reason = 6;
#[doc = "< None of the above"]
pub const e_fiftyone_degrees_results_no_value_reason_FIFTYONE_DEGREES_RESULTS_NO_VALUE_REASON_UNKNOWN: e_fiftyone_degrees_results_no_value_reason = 7;

#[doc = " Enum containing reasons which cause a value to not be present or valid."]
pub type e_fiftyone_degrees_results_no_value_reason = ::std::os::raw::c_uint;

#[doc = " Enum containing reasons which cause a value to not be present or valid."]
pub use self::e_fiftyone_degrees_results_no_value_reason as fiftyoneDegreesResultsNoValueReason;

#[doc = " Base results structure which any processing results should extend."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_results_base_t {
    #[doc = "< Pointer to the data set associated with the results"] pub dataSet: *mut ::std::os::raw::c_void,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_results_base_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_results_base_t>(), 8usize, concat!("Size of: ", stringify!(fiftyone_degrees_results_base_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_results_base_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_results_base_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_results_base_t>())).dataSet as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_results_base_t), "::", stringify!(dataSet)));
}

#[doc = " Base results structure which any processing results should extend."]
pub type fiftyoneDegreesResultsBase = fiftyone_degrees_results_base_t;

#[doc = " Device detection configuration structure containing device detection"]
#[doc = " specific configuration options, and options that apply to structures and"]
#[doc = " methods in device detection libraries."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_config_device_detecton_t {
    #[doc = "< Base structure members"] pub b: fiftyoneDegreesConfigBase,
    #[doc = "< True if the detection should record the"]
    #[doc = "matched characters from the target"]
    #[doc = "User-Agent"] pub updateMatchedUserAgent: bool,
    #[doc = "< Number of characters to consider in"]
    #[doc = "the matched User-Agent. Ignored if"]
    #[doc = "updateMatchedUserAgent is false."] pub maxMatchedUserAgentLength: size_t,
    #[doc = "< True if there should be at least one matched node"]
    #[doc = "in order for the results to be considered valid. By"]
    #[doc = "default, this is false"] pub allowUnmatched: bool,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_config_device_detecton_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_config_device_detecton_t>(), 48usize, concat!("Size of: ", stringify!(fiftyone_degrees_config_device_detecton_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_config_device_detecton_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_config_device_detecton_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_device_detecton_t>())).b as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_device_detecton_t), "::", stringify!(b)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_device_detecton_t>())).updateMatchedUserAgent as *const _ as usize }, 24usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_device_detecton_t), "::", stringify!(updateMatchedUserAgent)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_device_detecton_t>())).maxMatchedUserAgentLength as *const _ as usize }, 32usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_device_detecton_t), "::", stringify!(maxMatchedUserAgentLength)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_device_detecton_t>())).allowUnmatched as *const _ as usize }, 40usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_device_detecton_t), "::", stringify!(allowUnmatched)));
}

#[doc = " Device detection configuration structure containing device detection"]
#[doc = " specific configuration options, and options that apply to structures and"]
#[doc = " methods in device detection libraries."]
pub type fiftyoneDegreesConfigDeviceDetection = fiftyone_degrees_config_device_detecton_t;

#[doc = " Device detection data set structure which contains the 'must have's for all"]
#[doc = " device detection data sets."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fiftyone_degrees_dataset_device_detection_t {
    #[doc = "< Base structure members"] pub b: fiftyoneDegreesDataSetBase,
    #[doc = "< The unique HTTP header for the field"]
    #[doc = "name \"User-Agent\""] pub uniqueUserAgentHeaderIndex: ::std::os::raw::c_int,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_dataset_device_detection_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_dataset_device_detection_t>(), 8296usize, concat!("Size of: ", stringify!(fiftyone_degrees_dataset_device_detection_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_dataset_device_detection_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_dataset_device_detection_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_device_detection_t>())).b as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_device_detection_t), "::", stringify!(b)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_device_detection_t>())).uniqueUserAgentHeaderIndex as *const _ as usize }, 8288usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_device_detection_t), "::", stringify!(uniqueUserAgentHeaderIndex)));
}

#[doc = " Device detection data set structure which contains the 'must have's for all"]
#[doc = " device detection data sets."]
pub type fiftyoneDegreesDataSetDeviceDetection = fiftyone_degrees_dataset_device_detection_t;

#[doc = " Singular User-Agent result returned by a device detection process method."]
#[doc = " This contains data describing the matched User-Agent string."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_result_user_agent_t {
    #[doc = "< Index in the headers collection of the data"]
    #[doc = "set to the HTTP header field"]
    #[doc = "i.e. User-Agent"] pub uniqueHttpHeaderIndex: ::std::os::raw::c_int,
    #[doc = "< Pointer to the matched User-Agent if requested"]
    #[doc = "by setting the updateMatchedUserAgent config option"]
    #[doc = "to true, otherwise NULL. The memory allocated to"]
    #[doc = "the pointer is determined by the"]
    #[doc = "maxMatchedUserAgentLength member of the"]
    #[doc = "ConfigDeviceDetection structure. The final"]
    #[doc = "character will always be a null terminator once"]
    #[doc = "initialized by the ResultsUserAgentInit method"] pub matchedUserAgent: *mut ::std::os::raw::c_char,
    #[doc = "< Number of characters in the matched"]
    #[doc = "User-Agent"] pub matchedUserAgentLength: ::std::os::raw::c_int,
    #[doc = "< Pointer to the string containing the"]
    #[doc = "User-Agent for processing"] pub targetUserAgent: *const ::std::os::raw::c_char,
    #[doc = "< Number of characters in the target"]
    #[doc = "User-Agent"] pub targetUserAgentLength: ::std::os::raw::c_int,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_result_user_agent_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_result_user_agent_t>(), 40usize, concat!("Size of: ", stringify!(fiftyone_degrees_result_user_agent_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_result_user_agent_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_result_user_agent_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_result_user_agent_t>())).uniqueHttpHeaderIndex as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_result_user_agent_t), "::", stringify!(uniqueHttpHeaderIndex)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_result_user_agent_t>())).matchedUserAgent as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_result_user_agent_t), "::", stringify!(matchedUserAgent)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_result_user_agent_t>())).matchedUserAgentLength as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_result_user_agent_t), "::", stringify!(matchedUserAgentLength)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_result_user_agent_t>())).targetUserAgent as *const _ as usize }, 24usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_result_user_agent_t), "::", stringify!(targetUserAgent)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_result_user_agent_t>())).targetUserAgentLength as *const _ as usize }, 32usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_result_user_agent_t), "::", stringify!(targetUserAgentLength)));
}

#[doc = " Singular User-Agent result returned by a device detection process method."]
#[doc = " This contains data describing the matched User-Agent string."]
pub type fiftyoneDegreesResultUserAgent = fiftyone_degrees_result_user_agent_t;

#[doc = " Device detection specific results structure which any device detection"]
#[doc = " processing results should extend. This adds an array of value overrides to"]
#[doc = " the base results."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_results_device_detection_t {
    #[doc = "< Base results"] pub b: fiftyoneDegreesResultsBase,
    #[doc = "< Any value overrides in"]
    #[doc = "the results"] pub overrides: *mut fiftyoneDegreesOverrideValueArray,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_results_device_detection_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_results_device_detection_t>(), 16usize, concat!("Size of: ", stringify!(fiftyone_degrees_results_device_detection_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_results_device_detection_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_results_device_detection_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_results_device_detection_t>())).b as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_results_device_detection_t), "::", stringify!(b)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_results_device_detection_t>())).overrides as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_results_device_detection_t), "::", stringify!(overrides)));
}

#[doc = " Device detection specific results structure which any device detection"]
#[doc = " processing results should extend. This adds an array of value overrides to"]
#[doc = " the base results."]
pub type fiftyoneDegreesResultsDeviceDetection = fiftyone_degrees_results_device_detection_t;
#[doc = " @cond FORWARD_DECLARATIONS"]
pub type fiftyoneDegreesGraphTraceNode = fiftyoneDegrees_graph_trace_node_t;

#[doc = " Trace node structure used to trace the route taken when evaluating a graph."]
#[doc = " This contains information from a node which was evaluated, and forms part of"]
#[doc = " a linked list which describes the route taken through a graph."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_graph_trace_node_t {
    #[doc = "< The index in the evidence where the hash was found, or"]
    #[doc = "the last index which was evaluated if no matching hash was"]
    #[doc = "found"] pub index: u32,
    #[doc = "< The length of the hashed value being evaluated"] pub length: u32,
    #[doc = "< The first index in the hash node"] pub firstIndex: u32,
    #[doc = "< The last index in the hash node"] pub lastIndex: u32,
    #[doc = "< The matched hash code, or zero if no matching hash"]
    #[doc = "was found"] pub hashCode: u32,
    #[doc = "< True if a matching hash was found"] pub matched: bool,
    #[doc = "< The name title of the node. This is null for most"]
    #[doc = "nodes, but for root nodes this is usually the name of the"]
    #[doc = "graph"] pub rootName: *mut ::std::os::raw::c_char,
    #[doc = "< Pointer to the next node in the"]
    #[doc = "linked list"] pub next: *mut fiftyoneDegreesGraphTraceNode,
}

#[test]
fn bindgen_test_layout_fiftyoneDegrees_graph_trace_node_t() {
    assert_eq!(::std::mem::size_of::<fiftyoneDegrees_graph_trace_node_t>(), 40usize, concat!("Size of: ", stringify!(fiftyoneDegrees_graph_trace_node_t)));
    assert_eq!(::std::mem::align_of::<fiftyoneDegrees_graph_trace_node_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyoneDegrees_graph_trace_node_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_graph_trace_node_t>())).index as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_graph_trace_node_t), "::", stringify!(index)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_graph_trace_node_t>())).length as *const _ as usize }, 4usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_graph_trace_node_t), "::", stringify!(length)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_graph_trace_node_t>())).firstIndex as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_graph_trace_node_t), "::", stringify!(firstIndex)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_graph_trace_node_t>())).lastIndex as *const _ as usize }, 12usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_graph_trace_node_t), "::", stringify!(lastIndex)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_graph_trace_node_t>())).hashCode as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_graph_trace_node_t), "::", stringify!(hashCode)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_graph_trace_node_t>())).matched as *const _ as usize }, 20usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_graph_trace_node_t), "::", stringify!(matched)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_graph_trace_node_t>())).rootName as *const _ as usize }, 24usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_graph_trace_node_t), "::", stringify!(rootName)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_graph_trace_node_t>())).next as *const _ as usize }, 32usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_graph_trace_node_t), "::", stringify!(next)));
}

pub const e_fiftyone_degrees_hash_match_method_FIFTYONE_DEGREES_HASH_MATCH_METHOD_NONE: e_fiftyone_degrees_hash_match_method = 0;
pub const e_fiftyone_degrees_hash_match_method_FIFTYONE_DEGREES_HASH_MATCH_METHOD_PERFORMANCE: e_fiftyone_degrees_hash_match_method = 1;
pub const e_fiftyone_degrees_hash_match_method_FIFTYONE_DEGREES_HASH_MATCH_METHOD_COMBINED: e_fiftyone_degrees_hash_match_method = 2;
pub const e_fiftyone_degrees_hash_match_method_FIFTYONE_DEGREES_HASH_MATCH_METHOD_PREDICTIVE: e_fiftyone_degrees_hash_match_method = 3;
#[doc = "< The length of the enum"]
pub const e_fiftyone_degrees_hash_match_method_FIFTYONE_DEGREES_HASH_MATCH_METHODS_LENGTH: e_fiftyone_degrees_hash_match_method = 4;

#[doc = " Enum used to indicate which method was used to find a match for the evidence"]
#[doc = " provided."]
pub type e_fiftyone_degrees_hash_match_method = ::std::os::raw::c_uint;

#[doc = " Enum used to indicate which method was used to find a match for the evidence"]
#[doc = " provided."]
pub use self::e_fiftyone_degrees_hash_match_method as fiftyoneDegreesHashMatchMethod;

#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyoneDegrees_hash_dataset_header_t {
    #[doc = "< Major version of the data file loaded"] pub versionMajor: i32,
    #[doc = "< Minor version of the data file loaded"] pub versionMinor: i32,
    #[doc = "< Build version of the data file loaded"] pub versionBuild: i32,
    #[doc = "< Revision version of the data file"]
    #[doc = "loaded"] pub versionRevision: i32,
    #[doc = "< Unique data file tag"] pub tag: [byte; 16usize],
    #[doc = "< Tag identifying the data file export"] pub exportTag: [byte; 16usize],
    #[doc = "< Offset of the copyright string in the"]
    #[doc = "strings collection"] pub copyrightOffset: i32,
    #[doc = "< Age of the data set format"] pub age: i16,
    #[doc = "< Minimum count for a User-Agent to be"]
    #[doc = "included in the data file export"] pub minUserAgentCount: i32,
    #[doc = "< Offset of the data file name in the strings"]
    #[doc = "collection"] pub nameOffset: i32,
    #[doc = "< Offset of the data file format in the"]
    #[doc = "strings collection"] pub formatOffset: i32,
    #[doc = "< Date when the data file was"]
    #[doc = "published"] pub published: fiftyoneDegreesDate,
    #[doc = "< Date when the next data file"]
    #[doc = "will be available"] pub nextUpdate: fiftyoneDegreesDate,
    #[doc = "< Size and location of"]
    #[doc = "the strings collection"] pub strings: fiftyoneDegreesCollectionHeader,
    #[doc = "< Size and location of"]
    #[doc = "the components collection"] pub components: fiftyoneDegreesCollectionHeader,
    #[doc = "< Size and location of the"]
    #[doc = "maps collection"] pub maps: fiftyoneDegreesCollectionHeader,
    #[doc = "< Size and location of"]
    #[doc = "the properties collection"] pub properties: fiftyoneDegreesCollectionHeader,
    #[doc = "< Size and location of the"]
    #[doc = "values collection"] pub values: fiftyoneDegreesCollectionHeader,
    #[doc = "< Size and location of"]
    #[doc = "the profiles collection"] pub profiles: fiftyoneDegreesCollectionHeader,
    #[doc = "< Root nodes which"]
    #[doc = "point to the start of each"]
    #[doc = "graph used in detection"] pub rootNodes: fiftyoneDegreesCollectionHeader,
    #[doc = "< Size and location of the"]
    #[doc = "nodes collection"] pub nodes: fiftyoneDegreesCollectionHeader,
    #[doc = "< Size and"]
    #[doc = "location of the"]
    #[doc = "profile offsets"]
    #[doc = "collection"] pub profileOffsets: fiftyoneDegreesCollectionHeader,
}

#[test]
fn bindgen_test_layout_fiftyoneDegrees_hash_dataset_header_t() {
    assert_eq!(::std::mem::size_of::<fiftyoneDegrees_hash_dataset_header_t>(), 182usize, concat!("Size of: ", stringify!(fiftyoneDegrees_hash_dataset_header_t)));
    assert_eq!(::std::mem::align_of::<fiftyoneDegrees_hash_dataset_header_t>(), 1usize, concat!("Alignment of ", stringify!(fiftyoneDegrees_hash_dataset_header_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).versionMajor as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(versionMajor)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).versionMinor as *const _ as usize }, 4usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(versionMinor)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).versionBuild as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(versionBuild)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).versionRevision as *const _ as usize }, 12usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(versionRevision)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).tag as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(tag)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).exportTag as *const _ as usize }, 32usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(exportTag)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).copyrightOffset as *const _ as usize }, 48usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(copyrightOffset)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).age as *const _ as usize }, 52usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(age)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).minUserAgentCount as *const _ as usize }, 54usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(minUserAgentCount)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).nameOffset as *const _ as usize }, 58usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(nameOffset)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).formatOffset as *const _ as usize }, 62usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(formatOffset)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).published as *const _ as usize }, 66usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(published)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).nextUpdate as *const _ as usize }, 70usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(nextUpdate)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).strings as *const _ as usize }, 74usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(strings)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).components as *const _ as usize }, 86usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(components)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).maps as *const _ as usize }, 98usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(maps)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).properties as *const _ as usize }, 110usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(properties)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).values as *const _ as usize }, 122usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(values)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).profiles as *const _ as usize }, 134usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(profiles)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).rootNodes as *const _ as usize }, 146usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(rootNodes)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).nodes as *const _ as usize }, 158usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(nodes)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyoneDegrees_hash_dataset_header_t>())).profileOffsets as *const _ as usize }, 170usize, concat!("Offset of field: ", stringify!(fiftyoneDegrees_hash_dataset_header_t), "::", stringify!(profileOffsets)));
}

pub type fiftyoneDegreesDataSetHashHeader = fiftyoneDegrees_hash_dataset_header_t;

#[doc = " Hash specific configuration structure. This extends the"]
#[doc = " #fiftyoneDegreesConfigDeviceDetection structure by adding collection"]
#[doc = " configurations and options for the allowable drift and difference."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_config_hash_t {
    #[doc = "< Base configuration"] pub b: fiftyoneDegreesConfigDeviceDetection,
    #[doc = "< Strings collection config"] pub strings: fiftyoneDegreesCollectionConfig,
    #[doc = "< Components collection"]
    #[doc = "config"] pub components: fiftyoneDegreesCollectionConfig,
    #[doc = "< Maps collection config"] pub maps: fiftyoneDegreesCollectionConfig,
    #[doc = "< Properties collection"]
    #[doc = "config"] pub properties: fiftyoneDegreesCollectionConfig,
    #[doc = "< Values collection config"] pub values: fiftyoneDegreesCollectionConfig,
    #[doc = "< Profiles collection config"] pub profiles: fiftyoneDegreesCollectionConfig,
    #[doc = "< Root nodes collection"]
    #[doc = "config"] pub rootNodes: fiftyoneDegreesCollectionConfig,
    #[doc = "< Nodes collection config"] pub nodes: fiftyoneDegreesCollectionConfig,
    #[doc = "< Profile offsets"]
    #[doc = "collection config"] pub profileOffsets: fiftyoneDegreesCollectionConfig,
    #[doc = "< The maximum difference to allow when matching"]
    #[doc = "hashes. If the difference is exceeded, the result is"]
    #[doc = "considered invalid and values will not be returned. By"]
    #[doc = "default this is 0."] pub difference: i32,
    #[doc = "< The maximum drift to allow when matching hashes. If the"]
    #[doc = "drift is exceeded, the result is considered invalid and"]
    #[doc = "values will not be returned. By default this is 0."] pub drift: i32,
    #[doc = "< True if the performance optimized graph"]
    #[doc = "should be used for processing."] pub usePerformanceGraph: bool,
    #[doc = "< True if the predictive optimized graph should"]
    #[doc = "be used for processing."] pub usePredictiveGraph: bool,
    #[doc = "< True if the route through each graph should be traced"]
    #[doc = "during processing. The trace can then be printed to debug"]
    #[doc = "the matching after the fact. Note that this option is only"]
    #[doc = "considered when compiled in debug mode."] pub traceRoute: bool,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_config_hash_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_config_hash_t>(), 168usize, concat!("Size of: ", stringify!(fiftyone_degrees_config_hash_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_config_hash_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_config_hash_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_hash_t>())).b as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_hash_t), "::", stringify!(b)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_hash_t>())).strings as *const _ as usize }, 48usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_hash_t), "::", stringify!(strings)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_hash_t>())).components as *const _ as usize }, 60usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_hash_t), "::", stringify!(components)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_hash_t>())).maps as *const _ as usize }, 72usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_hash_t), "::", stringify!(maps)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_hash_t>())).properties as *const _ as usize }, 84usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_hash_t), "::", stringify!(properties)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_hash_t>())).values as *const _ as usize }, 96usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_hash_t), "::", stringify!(values)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_hash_t>())).profiles as *const _ as usize }, 108usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_hash_t), "::", stringify!(profiles)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_hash_t>())).rootNodes as *const _ as usize }, 120usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_hash_t), "::", stringify!(rootNodes)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_hash_t>())).nodes as *const _ as usize }, 132usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_hash_t), "::", stringify!(nodes)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_hash_t>())).profileOffsets as *const _ as usize }, 144usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_hash_t), "::", stringify!(profileOffsets)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_hash_t>())).difference as *const _ as usize }, 156usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_hash_t), "::", stringify!(difference)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_hash_t>())).drift as *const _ as usize }, 160usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_hash_t), "::", stringify!(drift)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_hash_t>())).usePerformanceGraph as *const _ as usize }, 164usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_hash_t), "::", stringify!(usePerformanceGraph)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_hash_t>())).usePredictiveGraph as *const _ as usize }, 165usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_hash_t), "::", stringify!(usePredictiveGraph)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_config_hash_t>())).traceRoute as *const _ as usize }, 166usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_config_hash_t), "::", stringify!(traceRoute)));
}

#[doc = " Hash specific configuration structure. This extends the"]
#[doc = " #fiftyoneDegreesConfigDeviceDetection structure by adding collection"]
#[doc = " configurations and options for the allowable drift and difference."]
pub type fiftyoneDegreesConfigHash = fiftyone_degrees_config_hash_t;

#[doc = " Data set structure containing all the components used for detections."]
#[doc = " This should predominantly be used through a #fiftyoneDegreesResourceManager"]
#[doc = " pointer to maintain a safe reference. If access the data set is needed then"]
#[doc = " a safe reference can be fetched and released with the"]
#[doc = " #fiftyoneDegreesDataSetHashGet and #fiftyoneDegreesDataSetHashRelease"]
#[doc = " methods. This extends the #fiftyoneDegreesDataSetDeviceDetection"]
#[doc = " structure to add Hash specific collections an create a complete data set."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fiftyone_degrees_dataset_hash_t {
    #[doc = "< Base data set"] pub b: fiftyoneDegreesDataSetDeviceDetection,
    #[doc = "< Dataset header"] pub header: fiftyoneDegreesDataSetHashHeader,
    #[doc = "< Copy of the configuration"] pub config: fiftyoneDegreesConfigHash,
    #[doc = "< Collection of all strings"] pub strings: *mut fiftyoneDegreesCollection,
    #[doc = "< Collection of all components"] pub components: *mut fiftyoneDegreesCollection,
    #[doc = "< List of component items from the"]
    #[doc = "components collection"] pub componentsList: fiftyoneDegreesList,
    #[doc = "< Array of flags indicating if there are"]
    #[doc = "any properties available for the component with"]
    #[doc = "the matching index in componentsList"] pub componentsAvailable: *mut bool,
    #[doc = "< Collection data file maps"] pub maps: *mut fiftyoneDegreesCollection,
    #[doc = "< Collection of all properties"] pub properties: *mut fiftyoneDegreesCollection,
    #[doc = "< Collection of all values"] pub values: *mut fiftyoneDegreesCollection,
    #[doc = "< Collection of all profiles"] pub profiles: *mut fiftyoneDegreesCollection,
    #[doc = "< Collection of all root nodes"] pub rootNodes: *mut fiftyoneDegreesCollection,
    #[doc = "< Collection of all hash nodes"] pub nodes: *mut fiftyoneDegreesCollection,
    #[doc = "< Collection of all offsets"]
    #[doc = "to profiles in the profiles"]
    #[doc = "collection"] pub profileOffsets: *mut fiftyoneDegreesCollection,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_dataset_hash_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_dataset_hash_t>(), 8744usize, concat!("Size of: ", stringify!(fiftyone_degrees_dataset_hash_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_dataset_hash_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_dataset_hash_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_hash_t>())).b as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_hash_t), "::", stringify!(b)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_hash_t>())).header as *const _ as usize }, 8296usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_hash_t), "::", stringify!(header)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_hash_t>())).config as *const _ as usize }, 8480usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_hash_t), "::", stringify!(config)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_hash_t>())).strings as *const _ as usize }, 8648usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_hash_t), "::", stringify!(strings)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_hash_t>())).components as *const _ as usize }, 8656usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_hash_t), "::", stringify!(components)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_hash_t>())).componentsList as *const _ as usize }, 8664usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_hash_t), "::", stringify!(componentsList)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_hash_t>())).componentsAvailable as *const _ as usize }, 8680usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_hash_t), "::", stringify!(componentsAvailable)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_hash_t>())).maps as *const _ as usize }, 8688usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_hash_t), "::", stringify!(maps)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_hash_t>())).properties as *const _ as usize }, 8696usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_hash_t), "::", stringify!(properties)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_hash_t>())).values as *const _ as usize }, 8704usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_hash_t), "::", stringify!(values)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_hash_t>())).profiles as *const _ as usize }, 8712usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_hash_t), "::", stringify!(profiles)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_hash_t>())).rootNodes as *const _ as usize }, 8720usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_hash_t), "::", stringify!(rootNodes)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_hash_t>())).nodes as *const _ as usize }, 8728usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_hash_t), "::", stringify!(nodes)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_dataset_hash_t>())).profileOffsets as *const _ as usize }, 8736usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_dataset_hash_t), "::", stringify!(profileOffsets)));
}

#[doc = " Data set structure containing all the components used for detections."]
#[doc = " This should predominantly be used through a #fiftyoneDegreesResourceManager"]
#[doc = " pointer to maintain a safe reference. If access the data set is needed then"]
#[doc = " a safe reference can be fetched and released with the"]
#[doc = " #fiftyoneDegreesDataSetHashGet and #fiftyoneDegreesDataSetHashRelease"]
#[doc = " methods. This extends the #fiftyoneDegreesDataSetDeviceDetection"]
#[doc = " structure to add Hash specific collections an create a complete data set."]
pub type fiftyoneDegreesDataSetHash = fiftyone_degrees_dataset_hash_t;
#[doc = " @cond FORWARD_DECLARATIONS"]
pub type fiftyoneDegreesResultHash = fiftyone_degrees_result_hash_t;

#[doc = " Singular User-Agent result returned by a Hash process method. This"]
#[doc = " extends the #fiftyoneDegreesResultUserAgent structure by adding some Hash"]
#[doc = " specific metrics."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_result_hash_t {
    #[doc = "< Base User-Agent result"] pub b: fiftyoneDegreesResultUserAgent,
    #[doc = "< Array of profile offsets where the index is"]
    #[doc = "the component index"] pub profileOffsets: *mut u32,
    #[doc = "< Array of boolean flags indicating whether"]
    #[doc = "the result profile offset at the same index is"]
    #[doc = "one which has been overridden"] pub profileIsOverriden: *mut bool,
    #[doc = "< The method used to provide"]
    #[doc = "the match result"] pub method: fiftyoneDegreesHashMatchMethod,
    #[doc = "< Number of iterations required to get the device"]
    #[doc = "offset"] pub iterations: i32,
    #[doc = "< The total difference in hash code values between"]
    #[doc = "the matched substring and the actual substring"] pub difference: i32,
    #[doc = "< The maximum drift for a matched substring from the"]
    #[doc = "character position where it was expected to be found"] pub drift: i32,
    #[doc = "< The number of hashes matched in the User-Agent"] pub matchedNodes: i32,
    #[doc = "< The graph trace constructed"]
    #[doc = "during processing if the option was"]
    #[doc = "enabled (and the executable was"]
    #[doc = "compiled in debug mode). This can be"]
    #[doc = "printed using the"]
    #[doc = "fiftyoneDegreesGraphTraceGet method"] pub trace: *mut fiftyoneDegreesGraphTraceNode,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_result_hash_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_result_hash_t>(), 88usize, concat!("Size of: ", stringify!(fiftyone_degrees_result_hash_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_result_hash_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_result_hash_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_result_hash_t>())).b as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_result_hash_t), "::", stringify!(b)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_result_hash_t>())).profileOffsets as *const _ as usize }, 40usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_result_hash_t), "::", stringify!(profileOffsets)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_result_hash_t>())).profileIsOverriden as *const _ as usize }, 48usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_result_hash_t), "::", stringify!(profileIsOverriden)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_result_hash_t>())).method as *const _ as usize }, 56usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_result_hash_t), "::", stringify!(method)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_result_hash_t>())).iterations as *const _ as usize }, 60usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_result_hash_t), "::", stringify!(iterations)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_result_hash_t>())).difference as *const _ as usize }, 64usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_result_hash_t), "::", stringify!(difference)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_result_hash_t>())).drift as *const _ as usize }, 68usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_result_hash_t), "::", stringify!(drift)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_result_hash_t>())).matchedNodes as *const _ as usize }, 72usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_result_hash_t), "::", stringify!(matchedNodes)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_result_hash_t>())).trace as *const _ as usize }, 80usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_result_hash_t), "::", stringify!(trace)));
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiftyone_degrees_array_fiftyoneDegreesResultHash_t {
    pub count: u32,
    pub capacity: u32,
    pub items: *mut fiftyoneDegreesResultHash,
    pub b: fiftyoneDegreesResultsDeviceDetection,
    pub propertyItem: fiftyoneDegreesCollectionItem,
    pub values: fiftyoneDegreesList,
    pub pseudoEvidence: *mut fiftyoneDegreesEvidenceKeyValuePairArray,
}

#[test]
fn bindgen_test_layout_fiftyone_degrees_array_fiftyoneDegreesResultHash_t() {
    assert_eq!(::std::mem::size_of::<fiftyone_degrees_array_fiftyoneDegreesResultHash_t>(), 88usize, concat!("Size of: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesResultHash_t)));
    assert_eq!(::std::mem::align_of::<fiftyone_degrees_array_fiftyoneDegreesResultHash_t>(), 8usize, concat!("Alignment of ", stringify!(fiftyone_degrees_array_fiftyoneDegreesResultHash_t)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesResultHash_t>())).count as *const _ as usize }, 0usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesResultHash_t), "::", stringify!(count)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesResultHash_t>())).capacity as *const _ as usize }, 4usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesResultHash_t), "::", stringify!(capacity)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesResultHash_t>())).items as *const _ as usize }, 8usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesResultHash_t), "::", stringify!(items)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesResultHash_t>())).b as *const _ as usize }, 16usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesResultHash_t), "::", stringify!(b)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesResultHash_t>())).propertyItem as *const _ as usize }, 32usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesResultHash_t), "::", stringify!(propertyItem)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesResultHash_t>())).values as *const _ as usize }, 64usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesResultHash_t), "::", stringify!(values)));
    assert_eq!(unsafe { &(*(::std::ptr::null::<fiftyone_degrees_array_fiftyoneDegreesResultHash_t>())).pseudoEvidence as *const _ as usize }, 80usize, concat!("Offset of field: ", stringify!(fiftyone_degrees_array_fiftyoneDegreesResultHash_t), "::", stringify!(pseudoEvidence)));
}

pub type fiftyoneDegreesResultHashArray = fiftyone_degrees_array_fiftyoneDegreesResultHash_t;
#[doc = " Array of Hash results used to easily access and track the size of the"]
#[doc = " array."]
pub type fiftyoneDegreesResultsHash = fiftyoneDegreesResultHashArray;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EngineHashTests {
    _unused: [u8; 0],
}

pub type iterator = u8;
pub type value_type = u8;

#[test]
fn __bindgen_test_layout_FiftyoneDegrees_Common_EntityMetaData_open0_byte_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_EntityMetaData<byte>>(), 1usize, concat!("Size of template specialization: ", stringify!(FiftyoneDegrees_Common_EntityMetaData < byte >)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_EntityMetaData<byte>>(), 1usize, concat!("Alignment of template specialization: ", stringify!(FiftyoneDegrees_Common_EntityMetaData < byte >)));
}

#[test]
fn __bindgen_test_layout_FiftyoneDegrees_Common_EntityMetaData_open0_std_string_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_EntityMetaData<std_string>>(), 24usize, concat!("Size of template specialization: ", stringify!(FiftyoneDegrees_Common_EntityMetaData < std_string >)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_EntityMetaData<std_string>>(), 8usize, concat!("Alignment of template specialization: ", stringify!(FiftyoneDegrees_Common_EntityMetaData < std_string >)));
}

#[test]
fn __bindgen_test_layout_FiftyoneDegrees_Common_EntityMetaData_open0_uint32_t_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_EntityMetaData<u32>>(), 4usize, concat!("Size of template specialization: ", stringify!(FiftyoneDegrees_Common_EntityMetaData < u32 >)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_EntityMetaData<u32>>(), 4usize, concat!("Alignment of template specialization: ", stringify!(FiftyoneDegrees_Common_EntityMetaData < u32 >)));
}

#[test]
fn __bindgen_test_layout_FiftyoneDegrees_Common_EntityMetaData_open0_FiftyoneDegrees_Common_ValueMetaDataKey_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_EntityMetaData<FiftyoneDegrees_Common_ValueMetaDataKey>>(), 48usize, concat!("Size of template specialization: ", stringify!(FiftyoneDegrees_Common_EntityMetaData < FiftyoneDegrees_Common_ValueMetaDataKey >)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_EntityMetaData<FiftyoneDegrees_Common_ValueMetaDataKey>>(), 8usize, concat!("Alignment of template specialization: ", stringify!(FiftyoneDegrees_Common_EntityMetaData < FiftyoneDegrees_Common_ValueMetaDataKey >)));
}

#[test]
fn __bindgen_test_layout_FiftyoneDegrees_Common_Collection_open0_byte_FiftyoneDegrees_Common_ComponentMetaData_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_Collection>(), 8usize, concat!("Size of template specialization: ", stringify!(FiftyoneDegrees_Common_Collection)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_Collection>(), 8usize, concat!("Alignment of template specialization: ", stringify!(FiftyoneDegrees_Common_Collection)));
}

#[test]
fn __bindgen_test_layout_FiftyoneDegrees_Common_Collection_open0_std_string_FiftyoneDegrees_Common_PropertyMetaData_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_Collection>(), 8usize, concat!("Size of template specialization: ", stringify!(FiftyoneDegrees_Common_Collection)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_Collection>(), 8usize, concat!("Alignment of template specialization: ", stringify!(FiftyoneDegrees_Common_Collection)));
}

#[test]
fn __bindgen_test_layout_FiftyoneDegrees_Common_Collection_open0_uint32_t_FiftyoneDegrees_Common_ProfileMetaData_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_Collection>(), 8usize, concat!("Size of template specialization: ", stringify!(FiftyoneDegrees_Common_Collection)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_Collection>(), 8usize, concat!("Alignment of template specialization: ", stringify!(FiftyoneDegrees_Common_Collection)));
}

#[test]
fn __bindgen_test_layout_FiftyoneDegrees_Common_Collection_open0_FiftyoneDegrees_Common_ValueMetaDataKey_FiftyoneDegrees_Common_ValueMetaData_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_Collection>(), 8usize, concat!("Size of template specialization: ", stringify!(FiftyoneDegrees_Common_Collection)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_Collection>(), 8usize, concat!("Alignment of template specialization: ", stringify!(FiftyoneDegrees_Common_Collection)));
}

#[test]
fn __bindgen_test_layout_FiftyoneDegrees_Common_Collection_open0_FiftyoneDegrees_Common_ValueMetaDataKey_FiftyoneDegrees_Common_ValueMetaData_close0_instantiation_1() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_Collection>(), 8usize, concat!("Size of template specialization: ", stringify!(FiftyoneDegrees_Common_Collection)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_Collection>(), 8usize, concat!("Alignment of template specialization: ", stringify!(FiftyoneDegrees_Common_Collection)));
}

#[test]
fn __bindgen_test_layout_FiftyoneDegrees_Common_Collection_open0_FiftyoneDegrees_Common_ValueMetaDataKey_FiftyoneDegrees_Common_ValueMetaData_close0_instantiation_2() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_Collection>(), 8usize, concat!("Size of template specialization: ", stringify!(FiftyoneDegrees_Common_Collection)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_Collection>(), 8usize, concat!("Alignment of template specialization: ", stringify!(FiftyoneDegrees_Common_Collection)));
}

#[test]
fn __bindgen_test_layout_FiftyoneDegrees_Common_Collection_open0_std_string_FiftyoneDegrees_Common_PropertyMetaData_close0_instantiation_1() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_Collection>(), 8usize, concat!("Size of template specialization: ", stringify!(FiftyoneDegrees_Common_Collection)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_Collection>(), 8usize, concat!("Alignment of template specialization: ", stringify!(FiftyoneDegrees_Common_Collection)));
}

#[test]
fn __bindgen_test_layout_FiftyoneDegrees_Common_Collection_open0_std_string_FiftyoneDegrees_Common_PropertyMetaData_close0_instantiation_2() {
    assert_eq!(::std::mem::size_of::<FiftyoneDegrees_Common_Collection>(), 8usize, concat!("Size of template specialization: ", stringify!(FiftyoneDegrees_Common_Collection)));
    assert_eq!(::std::mem::align_of::<FiftyoneDegrees_Common_Collection>(), 8usize, concat!("Alignment of template specialization: ", stringify!(FiftyoneDegrees_Common_Collection)));
}